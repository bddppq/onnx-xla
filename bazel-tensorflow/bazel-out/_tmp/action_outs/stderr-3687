In file included from ./tensorflow/compiler/xla/service/shape_inference.h:24:0,
                 from tensorflow/compiler/xla/service/shape_inference.cc:16:
./tensorflow/compiler/xla/service/hlo_instruction.h: In member function 'void xla::HloInstruction::ReplaceCalledComputations(std::function<xla::HloComputation*(xla::HloComputation*)>)':
./tensorflow/compiler/xla/service/hlo_instruction.h:1159:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int64 i = 0; i < called_computations_.size(); ++i) {
                         ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferInDimBroadcastShape(const xla::Shape&, const xla::Shape&, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:695:42: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   } else if (broadcast_dimensions.size() != ShapeUtil::Rank(smaller_shape)) {
                                          ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferMapShape(tensorflow::gtl::ArraySlice<const xla::Shape*>, const xla::ProgramShape&, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:1018:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (dimensions.size() != arg_shape->dimensions_size()) {
                         ^
tensorflow/compiler/xla/service/shape_inference.cc:1026:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int i = 0; i < dimensions.size(); ++i) {
                     ^
tensorflow/compiler/xla/service/shape_inference.cc:1035:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (arg_shapes.size() != to_apply.parameters_size()) {
                         ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferFftShape(const xla::Shape&, xla::FftType, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:1677:28: warning: format '%lld' expects argument of type 'long long int', but argument 3 has type 'google::protobuf::int64 {aka long int}' [-Wformat=]
               fft_length[i]);
                            ^
tensorflow/compiler/xla/service/shape_inference.cc:1700:28: warning: format '%lld' expects argument of type 'long long int', but argument 3 has type 'google::protobuf::int64 {aka long int}' [-Wformat=]
               fft_length[i]);
                            ^
tensorflow/compiler/xla/service/shape_inference.cc:1709:45: warning: format '%lld' expects argument of type 'long long int', but argument 3 has type 'google::protobuf::int64 {aka long int}' [-Wformat=]
             fft_length[fft_rank - 1] / 2 + 1);
                                             ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferSliceShape(const xla::Shape&, tensorflow::gtl::ArraySlice<long long int>, tensorflow::gtl::ArraySlice<long long int>, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:1862:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (starts.size() != ShapeUtil::Rank(arg)) {
                     ^
tensorflow/compiler/xla/service/shape_inference.cc:1869:39: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int64 dimension = 0; dimension < starts.size(); ++dimension) {
                                       ^
tensorflow/compiler/xla/service/shape_inference.cc:1881:56: warning: format '%lld' expects argument of type 'long long int', but argument 3 has type 'google::protobuf::int64 {aka long int}' [-Wformat=]
                  limit_index, arg.dimensions(dimension)));
                                                        ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferDynamicSliceShape(const xla::Shape&, const xla::Shape&, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:1937:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (slice_sizes.size() != ShapeUtil::Rank(operand_shape)) {
                          ^
tensorflow/compiler/xla/service/shape_inference.cc:1943:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int64 dim = 0; dim < slice_sizes.size(); ++dim) {
                           ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferReshapeShape(const xla::Shape&, tensorflow::gtl::ArraySlice<long long int>, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:2206:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (dimensions.size() != ShapeUtil::Rank(operand) ||
                         ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferTransposeShape(const xla::Shape&, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:2224:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (dimensions.size() != ShapeUtil::Rank(operand) ||
                         ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferCallShape(tensorflow::gtl::ArraySlice<const xla::Shape*>, const xla::ProgramShape&)':
tensorflow/compiler/xla/service/shape_inference.cc:2314:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (arg_shapes.size() != to_apply.parameters_size()) {
                         ^
tensorflow/compiler/xla/service/shape_inference.cc:2329:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int i = 0; i < arg_shapes.size(); ++i) {
                     ^
tensorflow/compiler/xla/service/shape_inference.cc: In function 'tensorflow::Status xla::ValidateGatherDimensionNumbers(const xla::Shape&, tensorflow::gtl::ArraySlice<long long int>, const xla::GatherDimensionNumbers&)':
tensorflow/compiler/xla/service/shape_inference.cc:2383:61: warning: format '%lld' expects argument of type 'long long int', but argument 3 has type 'google::protobuf::int64 {aka long int}' [-Wformat=]
         gather_indices_shape[dim_numbers.index_vector_dim()]);
                                                             ^
tensorflow/compiler/xla/service/shape_inference.cc: In static member function 'static xla::StatusOr<xla::Shape> xla::ShapeInference::InferGatherShape(const xla::Shape&, const xla::Shape&, const xla::GatherDimensionNumbers&, tensorflow::gtl::ArraySlice<long long int>)':
tensorflow/compiler/xla/service/shape_inference.cc:2464:46: warning: format '%lld' expects argument of type 'long long int', but argument 3 has type 'google::protobuf::int64 {aka long int}' [-Wformat=]
         gather_dim_numbers.index_vector_dim());
                                              ^
tensorflow/compiler/xla/service/shape_inference.cc:2471:44: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (expanded_gather_indices_shape.size() ==
                                            ^
tensorflow/compiler/xla/service/shape_inference.cc:2479:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (window_bounds.size() != input_shape.dimensions_size()) {
                            ^
tensorflow/compiler/xla/service/shape_inference.cc:2486:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (window_bounds.size() !=
                            ^
tensorflow/compiler/xla/service/shape_inference.cc:2498:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (int i = 0; i < window_bounds.size(); i++) {
                     ^
tensorflow/compiler/xla/service/shape_inference.cc:2516:54: warning: format '%lld' expects argument of type 'long long int', but argument 3 has type 'google::protobuf::int64 {aka long int}' [-Wformat=]
           gather_dim_numbers.elided_window_dims(i), i);
                                                      ^
In file included from ./tensorflow/core/platform/default/logging.h:24:0,
                 from ./tensorflow/core/platform/logging.h:25,
                 from ./tensorflow/core/lib/core/status.h:25,
                 from ./tensorflow/compiler/xla/status.h:19,
                 from ./tensorflow/compiler/xla/array.h:30,
                 from ./tensorflow/compiler/xla/array2d.h:27,
                 from ./tensorflow/compiler/xla/literal_util.h:30,
                 from ./tensorflow/compiler/xla/service/hlo_instruction.h:36,
                 from ./tensorflow/compiler/xla/service/shape_inference.h:24,
                 from tensorflow/compiler/xla/service/shape_inference.cc:16:
./tensorflow/core/platform/default/logging.h: In instantiation of 'std::__cxx11::string* tensorflow::internal::Check_LEImpl(const T1&, const T2&, const char*) [with T1 = long long int; T2 = long unsigned int; std::__cxx11::string = std::__cxx11::basic_string<char>]':
./tensorflow/compiler/xla/shape_util.h:115:5:   required from here
./tensorflow/core/platform/default/logging.h:232:35: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
 TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)
                                   ^
./tensorflow/core/platform/macros.h:88:49: note: in definition of macro 'TF_PREDICT_TRUE'
 #define TF_PREDICT_TRUE(x) (__builtin_expect(!!(x), 1))
                                                 ^
./tensorflow/core/platform/default/logging.h:232:1: note: in expansion of macro 'TF_DEFINE_CHECK_OP_IMPL'
 TF_DEFINE_CHECK_OP_IMPL(Check_LE, <=)
 ^
In file included from ./tensorflow/compiler/xla/array2d.h:27:0,
                 from ./tensorflow/compiler/xla/literal_util.h:30,
                 from ./tensorflow/compiler/xla/service/hlo_instruction.h:36,
                 from ./tensorflow/compiler/xla/service/shape_inference.h:24,
                 from tensorflow/compiler/xla/service/shape_inference.cc:16:
./tensorflow/compiler/xla/array.h: In instantiation of 'bool xla::Array<T>::operator==(const xla::Array<T>&) const [with T = long long int]':
./tensorflow/compiler/xla/service/hlo_sharding.h:177:38:   required from here
./tensorflow/compiler/xla/array.h:425:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int64 i = 0; i < sizes_.size(); ++i) {
                         ^
