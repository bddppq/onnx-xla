/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AArch64InstPrinter::printInstruction(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ 's', 'h', 'a', '1', 's', 'u', '0', 9, 0,
  /* 9 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '0', 9, 0,
  /* 20 */ 'l', 'd', '1', 9, 0,
  /* 25 */ 't', 'r', 'n', '1', 9, 0,
  /* 31 */ 'z', 'i', 'p', '1', 9, 0,
  /* 37 */ 'u', 'z', 'p', '1', 9, 0,
  /* 43 */ 'd', 'c', 'p', 's', '1', 9, 0,
  /* 50 */ 's', 't', '1', 9, 0,
  /* 55 */ 's', 'h', 'a', '1', 's', 'u', '1', 9, 0,
  /* 64 */ 's', 'h', 'a', '2', '5', '6', 's', 'u', '1', 9, 0,
  /* 75 */ 'r', 'e', 'v', '3', '2', 9, 0,
  /* 82 */ 'l', 'd', '2', 9, 0,
  /* 87 */ 's', 'h', 'a', '2', '5', '6', 'h', '2', 9, 0,
  /* 97 */ 's', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 105 */ 'u', 'a', 'b', 'a', 'l', '2', 9, 0,
  /* 113 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 123 */ 's', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 131 */ 'u', 'm', 'l', 'a', 'l', '2', 9, 0,
  /* 139 */ 's', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 147 */ 'u', 's', 'u', 'b', 'l', '2', 9, 0,
  /* 155 */ 's', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 163 */ 'u', 'a', 'b', 'd', 'l', '2', 9, 0,
  /* 171 */ 's', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 179 */ 'u', 'a', 'd', 'd', 'l', '2', 9, 0,
  /* 187 */ 's', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 195 */ 'u', 's', 'h', 'l', 'l', '2', 9, 0,
  /* 203 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 213 */ 'p', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 221 */ 's', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 229 */ 'u', 'm', 'u', 'l', 'l', '2', 9, 0,
  /* 237 */ 's', 'q', 'd', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 247 */ 's', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 255 */ 'u', 'm', 'l', 's', 'l', '2', 9, 0,
  /* 263 */ 'f', 'c', 'v', 't', 'l', '2', 9, 0,
  /* 271 */ 'r', 's', 'u', 'b', 'h', 'n', '2', 9, 0,
  /* 280 */ 'r', 'a', 'd', 'd', 'h', 'n', '2', 9, 0,
  /* 289 */ 's', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 298 */ 'u', 'q', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 307 */ 's', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 317 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', '2', 9, 0,
  /* 327 */ 't', 'r', 'n', '2', 9, 0,
  /* 333 */ 'f', 'c', 'v', 't', 'n', '2', 9, 0,
  /* 341 */ 's', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 349 */ 'u', 'q', 'x', 't', 'n', '2', 9, 0,
  /* 357 */ 's', 'q', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 367 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', '2', 9, 0,
  /* 378 */ 's', 'q', 'x', 't', 'u', 'n', '2', 9, 0,
  /* 387 */ 'f', 'c', 'v', 't', 'x', 'n', '2', 9, 0,
  /* 396 */ 'z', 'i', 'p', '2', 9, 0,
  /* 402 */ 'u', 'z', 'p', '2', 9, 0,
  /* 408 */ 'd', 'c', 'p', 's', '2', 9, 0,
  /* 415 */ 's', 't', '2', 9, 0,
  /* 420 */ 's', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 428 */ 'u', 's', 'u', 'b', 'w', '2', 9, 0,
  /* 436 */ 's', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 444 */ 'u', 'a', 'd', 'd', 'w', '2', 9, 0,
  /* 452 */ 'l', 'd', '3', 9, 0,
  /* 457 */ 'd', 'c', 'p', 's', '3', 9, 0,
  /* 464 */ 's', 't', '3', 9, 0,
  /* 469 */ 'r', 'e', 'v', '6', '4', 9, 0,
  /* 476 */ 'l', 'd', '4', 9, 0,
  /* 481 */ 's', 't', '4', 9, 0,
  /* 486 */ 'r', 'e', 'v', '1', '6', 9, 0,
  /* 493 */ 'b', 'r', 'a', 'a', 9, 0,
  /* 499 */ 'l', 'd', 'r', 'a', 'a', 9, 0,
  /* 506 */ 'b', 'l', 'r', 'a', 'a', 9, 0,
  /* 513 */ 's', 'a', 'b', 'a', 9, 0,
  /* 519 */ 'u', 'a', 'b', 'a', 9, 0,
  /* 525 */ 'p', 'a', 'c', 'd', 'a', 9, 0,
  /* 532 */ 'l', 'd', 'a', 'd', 'd', 'a', 9, 0,
  /* 540 */ 'a', 'u', 't', 'd', 'a', 9, 0,
  /* 547 */ 'p', 'a', 'c', 'g', 'a', 9, 0,
  /* 554 */ 'p', 'a', 'c', 'i', 'a', 9, 0,
  /* 561 */ 'a', 'u', 't', 'i', 'a', 9, 0,
  /* 568 */ 'f', 'c', 'm', 'l', 'a', 9, 0,
  /* 575 */ 'f', 'm', 'l', 'a', 9, 0,
  /* 581 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 9, 0,
  /* 590 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 9, 0,
  /* 599 */ 'c', 'a', 's', 'p', 'a', 9, 0,
  /* 606 */ 's', 'w', 'p', 'a', 9, 0,
  /* 612 */ 'l', 'd', 'c', 'l', 'r', 'a', 9, 0,
  /* 620 */ 'l', 'd', 'e', 'o', 'r', 'a', 9, 0,
  /* 628 */ 's', 'r', 's', 'r', 'a', 9, 0,
  /* 635 */ 'u', 'r', 's', 'r', 'a', 9, 0,
  /* 642 */ 's', 's', 'r', 'a', 9, 0,
  /* 648 */ 'u', 's', 'r', 'a', 9, 0,
  /* 654 */ 'c', 'a', 's', 'a', 9, 0,
  /* 660 */ 'l', 'd', 's', 'e', 't', 'a', 9, 0,
  /* 668 */ 'f', 'r', 'i', 'n', 't', 'a', 9, 0,
  /* 676 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 9, 0,
  /* 685 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 9, 0,
  /* 694 */ 'p', 'a', 'c', 'd', 'z', 'a', 9, 0,
  /* 702 */ 'a', 'u', 't', 'd', 'z', 'a', 9, 0,
  /* 710 */ 'p', 'a', 'c', 'i', 'z', 'a', 9, 0,
  /* 718 */ 'a', 'u', 't', 'i', 'z', 'a', 9, 0,
  /* 726 */ 'l', 'd', '1', 'b', 9, 0,
  /* 732 */ 'l', 'd', 'f', 'f', '1', 'b', 9, 0,
  /* 740 */ 'l', 'd', 'n', 'f', '1', 'b', 9, 0,
  /* 748 */ 'l', 'd', 'n', 't', '1', 'b', 9, 0,
  /* 756 */ 's', 't', 'n', 't', '1', 'b', 9, 0,
  /* 764 */ 's', 't', '1', 'b', 9, 0,
  /* 770 */ 'c', 'r', 'c', '3', '2', 'b', 9, 0,
  /* 778 */ 'l', 'd', '2', 'b', 9, 0,
  /* 784 */ 's', 't', '2', 'b', 9, 0,
  /* 790 */ 'l', 'd', '3', 'b', 9, 0,
  /* 796 */ 's', 't', '3', 'b', 9, 0,
  /* 802 */ 'l', 'd', '4', 'b', 9, 0,
  /* 808 */ 's', 't', '4', 'b', 9, 0,
  /* 814 */ 'l', 'd', 'a', 'd', 'd', 'a', 'b', 9, 0,
  /* 823 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 833 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'b', 9, 0,
  /* 843 */ 's', 'w', 'p', 'a', 'b', 9, 0,
  /* 850 */ 'b', 'r', 'a', 'b', 9, 0,
  /* 856 */ 'l', 'd', 'r', 'a', 'b', 9, 0,
  /* 863 */ 'b', 'l', 'r', 'a', 'b', 9, 0,
  /* 870 */ 'l', 'd', 'c', 'l', 'r', 'a', 'b', 9, 0,
  /* 879 */ 'l', 'd', 'e', 'o', 'r', 'a', 'b', 9, 0,
  /* 888 */ 'c', 'a', 's', 'a', 'b', 9, 0,
  /* 895 */ 'l', 'd', 's', 'e', 't', 'a', 'b', 9, 0,
  /* 904 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 914 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'b', 9, 0,
  /* 924 */ 'c', 'r', 'c', '3', '2', 'c', 'b', 9, 0,
  /* 933 */ 'p', 'a', 'c', 'd', 'b', 9, 0,
  /* 940 */ 'l', 'd', 'a', 'd', 'd', 'b', 9, 0,
  /* 948 */ 'a', 'u', 't', 'd', 'b', 9, 0,
  /* 955 */ 'p', 'r', 'f', 'b', 9, 0,
  /* 961 */ 'p', 'a', 'c', 'i', 'b', 9, 0,
  /* 968 */ 'a', 'u', 't', 'i', 'b', 9, 0,
  /* 975 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'b', 9, 0,
  /* 985 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 996 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'b', 9, 0,
  /* 1007 */ 's', 'w', 'p', 'a', 'l', 'b', 9, 0,
  /* 1015 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'b', 9, 0,
  /* 1025 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'b', 9, 0,
  /* 1035 */ 'c', 'a', 's', 'a', 'l', 'b', 9, 0,
  /* 1043 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'b', 9, 0,
  /* 1053 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 1064 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'b', 9, 0,
  /* 1075 */ 'l', 'd', 'a', 'd', 'd', 'l', 'b', 9, 0,
  /* 1084 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 1094 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'b', 9, 0,
  /* 1104 */ 's', 'w', 'p', 'l', 'b', 9, 0,
  /* 1111 */ 'l', 'd', 'c', 'l', 'r', 'l', 'b', 9, 0,
  /* 1120 */ 'l', 'd', 'e', 'o', 'r', 'l', 'b', 9, 0,
  /* 1129 */ 'c', 'a', 's', 'l', 'b', 9, 0,
  /* 1136 */ 'l', 'd', 's', 'e', 't', 'l', 'b', 9, 0,
  /* 1145 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 1155 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'b', 9, 0,
  /* 1165 */ 'd', 'm', 'b', 9, 0,
  /* 1170 */ 'l', 'd', 's', 'm', 'i', 'n', 'b', 9, 0,
  /* 1179 */ 'l', 'd', 'u', 'm', 'i', 'n', 'b', 9, 0,
  /* 1188 */ 's', 'w', 'p', 'b', 9, 0,
  /* 1194 */ 'l', 'd', '1', 'r', 'q', 'b', 9, 0,
  /* 1202 */ 'l', 'd', '1', 'r', 'b', 9, 0,
  /* 1209 */ 'l', 'd', 'a', 'r', 'b', 9, 0,
  /* 1216 */ 'l', 'd', 'l', 'a', 'r', 'b', 9, 0,
  /* 1224 */ 'l', 'd', 'r', 'b', 9, 0,
  /* 1230 */ 'l', 'd', 'c', 'l', 'r', 'b', 9, 0,
  /* 1238 */ 's', 't', 'l', 'l', 'r', 'b', 9, 0,
  /* 1246 */ 's', 't', 'l', 'r', 'b', 9, 0,
  /* 1253 */ 'l', 'd', 'e', 'o', 'r', 'b', 9, 0,
  /* 1261 */ 'l', 'd', 'a', 'p', 'r', 'b', 9, 0,
  /* 1269 */ 'l', 'd', 't', 'r', 'b', 9, 0,
  /* 1276 */ 's', 't', 'r', 'b', 9, 0,
  /* 1282 */ 's', 't', 't', 'r', 'b', 9, 0,
  /* 1289 */ 'l', 'd', 'u', 'r', 'b', 9, 0,
  /* 1296 */ 's', 't', 'u', 'r', 'b', 9, 0,
  /* 1303 */ 'l', 'd', 'a', 'x', 'r', 'b', 9, 0,
  /* 1311 */ 'l', 'd', 'x', 'r', 'b', 9, 0,
  /* 1318 */ 's', 't', 'l', 'x', 'r', 'b', 9, 0,
  /* 1326 */ 's', 't', 'x', 'r', 'b', 9, 0,
  /* 1333 */ 'l', 'd', '1', 's', 'b', 9, 0,
  /* 1340 */ 'l', 'd', 'f', 'f', '1', 's', 'b', 9, 0,
  /* 1349 */ 'l', 'd', 'n', 'f', '1', 's', 'b', 9, 0,
  /* 1358 */ 'c', 'a', 's', 'b', 9, 0,
  /* 1364 */ 'd', 's', 'b', 9, 0,
  /* 1369 */ 'i', 's', 'b', 9, 0,
  /* 1374 */ 'l', 'd', '1', 'r', 's', 'b', 9, 0,
  /* 1382 */ 'l', 'd', 'r', 's', 'b', 9, 0,
  /* 1389 */ 'l', 'd', 't', 'r', 's', 'b', 9, 0,
  /* 1397 */ 'l', 'd', 'u', 'r', 's', 'b', 9, 0,
  /* 1405 */ 'l', 'd', 's', 'e', 't', 'b', 9, 0,
  /* 1413 */ 'f', 's', 'u', 'b', 9, 0,
  /* 1419 */ 's', 'h', 's', 'u', 'b', 9, 0,
  /* 1426 */ 'u', 'h', 's', 'u', 'b', 9, 0,
  /* 1433 */ 'f', 'm', 's', 'u', 'b', 9, 0,
  /* 1440 */ 'f', 'n', 'm', 's', 'u', 'b', 9, 0,
  /* 1448 */ 's', 'q', 's', 'u', 'b', 9, 0,
  /* 1455 */ 'u', 'q', 's', 'u', 'b', 9, 0,
  /* 1462 */ 'l', 'd', 's', 'm', 'a', 'x', 'b', 9, 0,
  /* 1471 */ 'l', 'd', 'u', 'm', 'a', 'x', 'b', 9, 0,
  /* 1480 */ 'p', 'a', 'c', 'd', 'z', 'b', 9, 0,
  /* 1488 */ 'a', 'u', 't', 'd', 'z', 'b', 9, 0,
  /* 1496 */ 'p', 'a', 'c', 'i', 'z', 'b', 9, 0,
  /* 1504 */ 'a', 'u', 't', 'i', 'z', 'b', 9, 0,
  /* 1512 */ 's', 'h', 'a', '1', 'c', 9, 0,
  /* 1519 */ 's', 'b', 'c', 9, 0,
  /* 1524 */ 'a', 'd', 'c', 9, 0,
  /* 1529 */ 'b', 'i', 'c', 9, 0,
  /* 1534 */ 'a', 'e', 's', 'i', 'm', 'c', 9, 0,
  /* 1542 */ 'a', 'e', 's', 'm', 'c', 9, 0,
  /* 1549 */ 'c', 's', 'i', 'n', 'c', 9, 0,
  /* 1556 */ 'h', 'v', 'c', 9, 0,
  /* 1561 */ 's', 'v', 'c', 9, 0,
  /* 1566 */ 'l', 'd', '1', 'd', 9, 0,
  /* 1572 */ 'l', 'd', 'f', 'f', '1', 'd', 9, 0,
  /* 1580 */ 'l', 'd', 'n', 'f', '1', 'd', 9, 0,
  /* 1588 */ 'l', 'd', 'n', 't', '1', 'd', 9, 0,
  /* 1596 */ 's', 't', 'n', 't', '1', 'd', 9, 0,
  /* 1604 */ 's', 't', '1', 'd', 9, 0,
  /* 1610 */ 'l', 'd', '2', 'd', 9, 0,
  /* 1616 */ 's', 't', '2', 'd', 9, 0,
  /* 1622 */ 'l', 'd', '3', 'd', 9, 0,
  /* 1628 */ 's', 't', '3', 'd', 9, 0,
  /* 1634 */ 'l', 'd', '4', 'd', 9, 0,
  /* 1640 */ 's', 't', '4', 'd', 9, 0,
  /* 1646 */ 'f', 'a', 'b', 'd', 9, 0,
  /* 1652 */ 's', 'a', 'b', 'd', 9, 0,
  /* 1658 */ 'u', 'a', 'b', 'd', 9, 0,
  /* 1664 */ 'x', 'p', 'a', 'c', 'd', 9, 0,
  /* 1671 */ 'f', 'c', 'a', 'd', 'd', 9, 0,
  /* 1678 */ 'l', 'd', 'a', 'd', 'd', 9, 0,
  /* 1685 */ 'f', 'a', 'd', 'd', 9, 0,
  /* 1691 */ 's', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 1699 */ 'u', 'r', 'h', 'a', 'd', 'd', 9, 0,
  /* 1707 */ 's', 'h', 'a', 'd', 'd', 9, 0,
  /* 1714 */ 'u', 'h', 'a', 'd', 'd', 9, 0,
  /* 1721 */ 'f', 'm', 'a', 'd', 'd', 9, 0,
  /* 1728 */ 'f', 'n', 'm', 'a', 'd', 'd', 9, 0,
  /* 1736 */ 'u', 's', 'q', 'a', 'd', 'd', 9, 0,
  /* 1744 */ 's', 'u', 'q', 'a', 'd', 'd', 9, 0,
  /* 1752 */ 'p', 'r', 'f', 'd', 9, 0,
  /* 1758 */ 'a', 'n', 'd', 9, 0,
  /* 1763 */ 'l', 'd', '1', 'r', 'q', 'd', 9, 0,
  /* 1771 */ 'l', 'd', '1', 'r', 'd', 9, 0,
  /* 1778 */ 'a', 'e', 's', 'd', 9, 0,
  /* 1784 */ 'f', 'a', 'c', 'g', 'e', 9, 0,
  /* 1791 */ 'f', 'c', 'm', 'g', 'e', 9, 0,
  /* 1798 */ 'f', 'c', 'm', 'l', 'e', 9, 0,
  /* 1805 */ 'f', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 1813 */ 'u', 'r', 'e', 'c', 'p', 'e', 9, 0,
  /* 1821 */ 'f', 'c', 'c', 'm', 'p', 'e', 9, 0,
  /* 1829 */ 'f', 'c', 'm', 'p', 'e', 9, 0,
  /* 1836 */ 'a', 'e', 's', 'e', 9, 0,
  /* 1842 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 1851 */ 'u', 'r', 's', 'q', 'r', 't', 'e', 9, 0,
  /* 1860 */ 'p', 't', 'r', 'u', 'e', 9, 0,
  /* 1867 */ 'b', 'i', 'f', 9, 0,
  /* 1872 */ 's', 'c', 'v', 't', 'f', 9, 0,
  /* 1879 */ 'u', 'c', 'v', 't', 'f', 9, 0,
  /* 1886 */ 'f', 'n', 'e', 'g', 9, 0,
  /* 1892 */ 's', 'q', 'n', 'e', 'g', 9, 0,
  /* 1899 */ 'c', 's', 'n', 'e', 'g', 9, 0,
  /* 1906 */ 's', 'h', 'a', '1', 'h', 9, 0,
  /* 1913 */ 'l', 'd', '1', 'h', 9, 0,
  /* 1919 */ 'l', 'd', 'f', 'f', '1', 'h', 9, 0,
  /* 1927 */ 'l', 'd', 'n', 'f', '1', 'h', 9, 0,
  /* 1935 */ 'l', 'd', 'n', 't', '1', 'h', 9, 0,
  /* 1943 */ 's', 't', 'n', 't', '1', 'h', 9, 0,
  /* 1951 */ 's', 't', '1', 'h', 9, 0,
  /* 1957 */ 'c', 'r', 'c', '3', '2', 'h', 9, 0,
  /* 1965 */ 'l', 'd', '2', 'h', 9, 0,
  /* 1971 */ 's', 't', '2', 'h', 9, 0,
  /* 1977 */ 'l', 'd', '3', 'h', 9, 0,
  /* 1983 */ 's', 't', '3', 'h', 9, 0,
  /* 1989 */ 'l', 'd', '4', 'h', 9, 0,
  /* 1995 */ 's', 't', '4', 'h', 9, 0,
  /* 2001 */ 's', 'h', 'a', '2', '5', '6', 'h', 9, 0,
  /* 2010 */ 'l', 'd', 'a', 'd', 'd', 'a', 'h', 9, 0,
  /* 2019 */ 's', 'q', 'r', 'd', 'm', 'l', 'a', 'h', 9, 0,
  /* 2029 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 2039 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'h', 9, 0,
  /* 2049 */ 's', 'w', 'p', 'a', 'h', 9, 0,
  /* 2056 */ 'l', 'd', 'c', 'l', 'r', 'a', 'h', 9, 0,
  /* 2065 */ 'l', 'd', 'e', 'o', 'r', 'a', 'h', 9, 0,
  /* 2074 */ 'c', 'a', 's', 'a', 'h', 9, 0,
  /* 2081 */ 'l', 'd', 's', 'e', 't', 'a', 'h', 9, 0,
  /* 2090 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 2100 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'h', 9, 0,
  /* 2110 */ 'c', 'r', 'c', '3', '2', 'c', 'h', 9, 0,
  /* 2119 */ 'l', 'd', 'a', 'd', 'd', 'h', 9, 0,
  /* 2127 */ 'p', 'r', 'f', 'h', 9, 0,
  /* 2133 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 'h', 9, 0,
  /* 2143 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 2154 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 'h', 9, 0,
  /* 2165 */ 's', 'w', 'p', 'a', 'l', 'h', 9, 0,
  /* 2173 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 'h', 9, 0,
  /* 2183 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 'h', 9, 0,
  /* 2193 */ 'c', 'a', 's', 'a', 'l', 'h', 9, 0,
  /* 2201 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 'h', 9, 0,
  /* 2211 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 2222 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 'h', 9, 0,
  /* 2233 */ 'l', 'd', 'a', 'd', 'd', 'l', 'h', 9, 0,
  /* 2242 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 2252 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 'h', 9, 0,
  /* 2262 */ 's', 'w', 'p', 'l', 'h', 9, 0,
  /* 2269 */ 'l', 'd', 'c', 'l', 'r', 'l', 'h', 9, 0,
  /* 2278 */ 'l', 'd', 'e', 'o', 'r', 'l', 'h', 9, 0,
  /* 2287 */ 'c', 'a', 's', 'l', 'h', 9, 0,
  /* 2294 */ 'l', 'd', 's', 'e', 't', 'l', 'h', 9, 0,
  /* 2303 */ 's', 'q', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 2312 */ 's', 'q', 'r', 'd', 'm', 'u', 'l', 'h', 9, 0,
  /* 2322 */ 's', 'm', 'u', 'l', 'h', 9, 0,
  /* 2329 */ 'u', 'm', 'u', 'l', 'h', 9, 0,
  /* 2336 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 2346 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 'h', 9, 0,
  /* 2356 */ 'l', 'd', 's', 'm', 'i', 'n', 'h', 9, 0,
  /* 2365 */ 'l', 'd', 'u', 'm', 'i', 'n', 'h', 9, 0,
  /* 2374 */ 's', 'w', 'p', 'h', 9, 0,
  /* 2380 */ 'l', 'd', '1', 'r', 'q', 'h', 9, 0,
  /* 2388 */ 'l', 'd', '1', 'r', 'h', 9, 0,
  /* 2395 */ 'l', 'd', 'a', 'r', 'h', 9, 0,
  /* 2402 */ 'l', 'd', 'l', 'a', 'r', 'h', 9, 0,
  /* 2410 */ 'l', 'd', 'r', 'h', 9, 0,
  /* 2416 */ 'l', 'd', 'c', 'l', 'r', 'h', 9, 0,
  /* 2424 */ 's', 't', 'l', 'l', 'r', 'h', 9, 0,
  /* 2432 */ 's', 't', 'l', 'r', 'h', 9, 0,
  /* 2439 */ 'l', 'd', 'e', 'o', 'r', 'h', 9, 0,
  /* 2447 */ 'l', 'd', 'a', 'p', 'r', 'h', 9, 0,
  /* 2455 */ 'l', 'd', 't', 'r', 'h', 9, 0,
  /* 2462 */ 's', 't', 'r', 'h', 9, 0,
  /* 2468 */ 's', 't', 't', 'r', 'h', 9, 0,
  /* 2475 */ 'l', 'd', 'u', 'r', 'h', 9, 0,
  /* 2482 */ 's', 't', 'u', 'r', 'h', 9, 0,
  /* 2489 */ 'l', 'd', 'a', 'x', 'r', 'h', 9, 0,
  /* 2497 */ 'l', 'd', 'x', 'r', 'h', 9, 0,
  /* 2504 */ 's', 't', 'l', 'x', 'r', 'h', 9, 0,
  /* 2512 */ 's', 't', 'x', 'r', 'h', 9, 0,
  /* 2519 */ 'l', 'd', '1', 's', 'h', 9, 0,
  /* 2526 */ 'l', 'd', 'f', 'f', '1', 's', 'h', 9, 0,
  /* 2535 */ 'l', 'd', 'n', 'f', '1', 's', 'h', 9, 0,
  /* 2544 */ 'c', 'a', 's', 'h', 9, 0,
  /* 2550 */ 's', 'q', 'r', 'd', 'm', 'l', 's', 'h', 9, 0,
  /* 2560 */ 'l', 'd', '1', 'r', 's', 'h', 9, 0,
  /* 2568 */ 'l', 'd', 'r', 's', 'h', 9, 0,
  /* 2575 */ 'l', 'd', 't', 'r', 's', 'h', 9, 0,
  /* 2583 */ 'l', 'd', 'u', 'r', 's', 'h', 9, 0,
  /* 2591 */ 'l', 'd', 's', 'e', 't', 'h', 9, 0,
  /* 2599 */ 'l', 'd', 's', 'm', 'a', 'x', 'h', 9, 0,
  /* 2608 */ 'l', 'd', 'u', 'm', 'a', 'x', 'h', 9, 0,
  /* 2617 */ 'x', 'p', 'a', 'c', 'i', 9, 0,
  /* 2624 */ 'c', 'm', 'h', 'i', 9, 0,
  /* 2630 */ 's', 'l', 'i', 9, 0,
  /* 2635 */ 'm', 'v', 'n', 'i', 9, 0,
  /* 2641 */ 's', 'r', 'i', 9, 0,
  /* 2646 */ 'f', 'r', 'i', 'n', 't', 'i', 9, 0,
  /* 2654 */ 'm', 'o', 'v', 'i', 9, 0,
  /* 2660 */ 'b', 'r', 'k', 9, 0,
  /* 2665 */ 'm', 'o', 'v', 'k', 9, 0,
  /* 2671 */ 's', 'a', 'b', 'a', 'l', 9, 0,
  /* 2678 */ 'u', 'a', 'b', 'a', 'l', 9, 0,
  /* 2685 */ 'l', 'd', 'a', 'd', 'd', 'a', 'l', 9, 0,
  /* 2694 */ 's', 'q', 'd', 'm', 'l', 'a', 'l', 9, 0,
  /* 2703 */ 's', 'm', 'l', 'a', 'l', 9, 0,
  /* 2710 */ 'u', 'm', 'l', 'a', 'l', 9, 0,
  /* 2717 */ 'l', 'd', 's', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 2727 */ 'l', 'd', 'u', 'm', 'i', 'n', 'a', 'l', 9, 0,
  /* 2737 */ 'c', 'a', 's', 'p', 'a', 'l', 9, 0,
  /* 2745 */ 's', 'w', 'p', 'a', 'l', 9, 0,
  /* 2752 */ 'l', 'd', 'c', 'l', 'r', 'a', 'l', 9, 0,
  /* 2761 */ 'l', 'd', 'e', 'o', 'r', 'a', 'l', 9, 0,
  /* 2770 */ 'c', 'a', 's', 'a', 'l', 9, 0,
  /* 2777 */ 'l', 'd', 's', 'e', 't', 'a', 'l', 9, 0,
  /* 2786 */ 'l', 'd', 's', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 2796 */ 'l', 'd', 'u', 'm', 'a', 'x', 'a', 'l', 9, 0,
  /* 2806 */ 't', 'b', 'l', 9, 0,
  /* 2811 */ 's', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 2819 */ 'u', 'm', 's', 'u', 'b', 'l', 9, 0,
  /* 2827 */ 's', 's', 'u', 'b', 'l', 9, 0,
  /* 2834 */ 'u', 's', 'u', 'b', 'l', 9, 0,
  /* 2841 */ 's', 'a', 'b', 'd', 'l', 9, 0,
  /* 2848 */ 'u', 'a', 'b', 'd', 'l', 9, 0,
  /* 2855 */ 'l', 'd', 'a', 'd', 'd', 'l', 9, 0,
  /* 2863 */ 's', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 2871 */ 'u', 'm', 'a', 'd', 'd', 'l', 9, 0,
  /* 2879 */ 's', 'a', 'd', 'd', 'l', 9, 0,
  /* 2886 */ 'u', 'a', 'd', 'd', 'l', 9, 0,
  /* 2893 */ 'f', 'c', 's', 'e', 'l', 9, 0,
  /* 2900 */ 's', 'q', 's', 'h', 'l', 9, 0,
  /* 2907 */ 'u', 'q', 's', 'h', 'l', 9, 0,
  /* 2914 */ 's', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 2922 */ 'u', 'q', 'r', 's', 'h', 'l', 9, 0,
  /* 2930 */ 's', 'r', 's', 'h', 'l', 9, 0,
  /* 2937 */ 'u', 'r', 's', 'h', 'l', 9, 0,
  /* 2944 */ 's', 's', 'h', 'l', 9, 0,
  /* 2950 */ 'u', 's', 'h', 'l', 9, 0,
  /* 2956 */ 's', 's', 'h', 'l', 'l', 9, 0,
  /* 2963 */ 'u', 's', 'h', 'l', 'l', 9, 0,
  /* 2970 */ 's', 'q', 'd', 'm', 'u', 'l', 'l', 9, 0,
  /* 2979 */ 'p', 'm', 'u', 'l', 'l', 9, 0,
  /* 2986 */ 's', 'm', 'u', 'l', 'l', 9, 0,
  /* 2993 */ 'u', 'm', 'u', 'l', 'l', 9, 0,
  /* 3000 */ 'l', 'd', 's', 'm', 'i', 'n', 'l', 9, 0,
  /* 3009 */ 'l', 'd', 'u', 'm', 'i', 'n', 'l', 9, 0,
  /* 3018 */ 'a', 'd', 'd', 'p', 'l', 9, 0,
  /* 3025 */ 'c', 'a', 's', 'p', 'l', 9, 0,
  /* 3032 */ 's', 'w', 'p', 'l', 9, 0,
  /* 3038 */ 'l', 'd', 'c', 'l', 'r', 'l', 9, 0,
  /* 3046 */ 'l', 'd', 'e', 'o', 'r', 'l', 9, 0,
  /* 3054 */ 'c', 'a', 's', 'l', 9, 0,
  /* 3060 */ 'b', 's', 'l', 9, 0,
  /* 3065 */ 's', 'q', 'd', 'm', 'l', 's', 'l', 9, 0,
  /* 3074 */ 's', 'm', 'l', 's', 'l', 9, 0,
  /* 3081 */ 'u', 'm', 'l', 's', 'l', 9, 0,
  /* 3088 */ 's', 'y', 's', 'l', 9, 0,
  /* 3094 */ 'l', 'd', 's', 'e', 't', 'l', 9, 0,
  /* 3102 */ 'f', 'c', 'v', 't', 'l', 9, 0,
  /* 3109 */ 'f', 'm', 'u', 'l', 9, 0,
  /* 3115 */ 'f', 'n', 'm', 'u', 'l', 9, 0,
  /* 3122 */ 'p', 'm', 'u', 'l', 9, 0,
  /* 3128 */ 'a', 'd', 'd', 'v', 'l', 9, 0,
  /* 3135 */ 'r', 'd', 'v', 'l', 9, 0,
  /* 3141 */ 'l', 'd', 's', 'm', 'a', 'x', 'l', 9, 0,
  /* 3150 */ 'l', 'd', 'u', 'm', 'a', 'x', 'l', 9, 0,
  /* 3159 */ 's', 'h', 'a', '1', 'm', 9, 0,
  /* 3166 */ 's', 'b', 'f', 'm', 9, 0,
  /* 3172 */ 'u', 'b', 'f', 'm', 9, 0,
  /* 3178 */ 'p', 'r', 'f', 'm', 9, 0,
  /* 3184 */ 'f', 'm', 'i', 'n', 'n', 'm', 9, 0,
  /* 3192 */ 'f', 'm', 'a', 'x', 'n', 'm', 9, 0,
  /* 3200 */ 'd', 'u', 'p', 'm', 9, 0,
  /* 3206 */ 'f', 'r', 'i', 'n', 't', 'm', 9, 0,
  /* 3214 */ 'p', 'r', 'f', 'u', 'm', 9, 0,
  /* 3221 */ 'r', 's', 'u', 'b', 'h', 'n', 9, 0,
  /* 3229 */ 'r', 'a', 'd', 'd', 'h', 'n', 9, 0,
  /* 3237 */ 'f', 'm', 'i', 'n', 9, 0,
  /* 3243 */ 'l', 'd', 's', 'm', 'i', 'n', 9, 0,
  /* 3251 */ 'l', 'd', 'u', 'm', 'i', 'n', 9, 0,
  /* 3259 */ 'c', 'c', 'm', 'n', 9, 0,
  /* 3265 */ 'e', 'o', 'n', 9, 0,
  /* 3270 */ 's', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 3278 */ 'u', 'q', 's', 'h', 'r', 'n', 9, 0,
  /* 3286 */ 's', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 3295 */ 'u', 'q', 'r', 's', 'h', 'r', 'n', 9, 0,
  /* 3304 */ 'o', 'r', 'n', 9, 0,
  /* 3309 */ 'f', 'r', 'i', 'n', 't', 'n', 9, 0,
  /* 3317 */ 'f', 'c', 'v', 't', 'n', 9, 0,
  /* 3324 */ 's', 'q', 'x', 't', 'n', 9, 0,
  /* 3331 */ 'u', 'q', 'x', 't', 'n', 9, 0,
  /* 3338 */ 's', 'q', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 3347 */ 's', 'q', 'r', 's', 'h', 'r', 'u', 'n', 9, 0,
  /* 3357 */ 's', 'q', 'x', 't', 'u', 'n', 9, 0,
  /* 3365 */ 'm', 'o', 'v', 'n', 9, 0,
  /* 3371 */ 'f', 'c', 'v', 't', 'x', 'n', 9, 0,
  /* 3379 */ 's', 'h', 'a', '1', 'p', 9, 0,
  /* 3386 */ 'f', 'a', 'd', 'd', 'p', 9, 0,
  /* 3393 */ 'l', 'd', 'p', 9, 0,
  /* 3398 */ 's', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 3406 */ 'u', 'a', 'd', 'a', 'l', 'p', 9, 0,
  /* 3414 */ 's', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 3422 */ 'u', 'a', 'd', 'd', 'l', 'p', 9, 0,
  /* 3430 */ 'f', 'c', 'c', 'm', 'p', 9, 0,
  /* 3437 */ 'f', 'c', 'm', 'p', 9, 0,
  /* 3443 */ 'f', 'm', 'i', 'n', 'n', 'm', 'p', 9, 0,
  /* 3452 */ 'f', 'm', 'a', 'x', 'n', 'm', 'p', 9, 0,
  /* 3461 */ 'l', 'd', 'n', 'p', 9, 0,
  /* 3467 */ 'f', 'm', 'i', 'n', 'p', 9, 0,
  /* 3474 */ 's', 'm', 'i', 'n', 'p', 9, 0,
  /* 3481 */ 'u', 'm', 'i', 'n', 'p', 9, 0,
  /* 3488 */ 's', 't', 'n', 'p', 9, 0,
  /* 3494 */ 'a', 'd', 'r', 'p', 9, 0,
  /* 3500 */ 'c', 'a', 's', 'p', 9, 0,
  /* 3506 */ 'f', 'r', 'i', 'n', 't', 'p', 9, 0,
  /* 3514 */ 's', 't', 'p', 9, 0,
  /* 3519 */ 'f', 'd', 'u', 'p', 9, 0,
  /* 3525 */ 's', 'w', 'p', 9, 0,
  /* 3530 */ 'l', 'd', 'a', 'x', 'p', 9, 0,
  /* 3537 */ 'f', 'm', 'a', 'x', 'p', 9, 0,
  /* 3544 */ 's', 'm', 'a', 'x', 'p', 9, 0,
  /* 3551 */ 'u', 'm', 'a', 'x', 'p', 9, 0,
  /* 3558 */ 'l', 'd', 'x', 'p', 9, 0,
  /* 3564 */ 's', 't', 'l', 'x', 'p', 9, 0,
  /* 3571 */ 's', 't', 'x', 'p', 9, 0,
  /* 3577 */ 'f', 'c', 'm', 'e', 'q', 9, 0,
  /* 3584 */ 'l', 'd', '1', 'r', 9, 0,
  /* 3590 */ 'l', 'd', '2', 'r', 9, 0,
  /* 3596 */ 'l', 'd', '3', 'r', 9, 0,
  /* 3602 */ 'l', 'd', '4', 'r', 9, 0,
  /* 3608 */ 'l', 'd', 'a', 'r', 9, 0,
  /* 3614 */ 'l', 'd', 'l', 'a', 'r', 9, 0,
  /* 3621 */ 'b', 'r', 9, 0,
  /* 3625 */ 'a', 'd', 'r', 9, 0,
  /* 3630 */ 'l', 'd', 'r', 9, 0,
  /* 3635 */ 's', 'r', 's', 'h', 'r', 9, 0,
  /* 3642 */ 'u', 'r', 's', 'h', 'r', 9, 0,
  /* 3649 */ 's', 's', 'h', 'r', 9, 0,
  /* 3655 */ 'u', 's', 'h', 'r', 9, 0,
  /* 3661 */ 'b', 'l', 'r', 9, 0,
  /* 3666 */ 'l', 'd', 'c', 'l', 'r', 9, 0,
  /* 3673 */ 's', 't', 'l', 'l', 'r', 9, 0,
  /* 3680 */ 's', 't', 'l', 'r', 9, 0,
  /* 3686 */ 'l', 'd', 'e', 'o', 'r', 9, 0,
  /* 3693 */ 'r', 'o', 'r', 9, 0,
  /* 3698 */ 'l', 'd', 'a', 'p', 'r', 9, 0,
  /* 3705 */ 'o', 'r', 'r', 9, 0,
  /* 3710 */ 'a', 's', 'r', 9, 0,
  /* 3715 */ 'l', 's', 'r', 9, 0,
  /* 3720 */ 'm', 's', 'r', 9, 0,
  /* 3725 */ 'l', 'd', 't', 'r', 9, 0,
  /* 3731 */ 's', 't', 'r', 9, 0,
  /* 3736 */ 's', 't', 't', 'r', 9, 0,
  /* 3742 */ 'e', 'x', 't', 'r', 9, 0,
  /* 3748 */ 'l', 'd', 'u', 'r', 9, 0,
  /* 3754 */ 's', 't', 'u', 'r', 9, 0,
  /* 3760 */ 'l', 'd', 'a', 'x', 'r', 9, 0,
  /* 3767 */ 'l', 'd', 'x', 'r', 9, 0,
  /* 3773 */ 's', 't', 'l', 'x', 'r', 9, 0,
  /* 3780 */ 's', 't', 'x', 'r', 9, 0,
  /* 3786 */ 'c', 'a', 's', 9, 0,
  /* 3791 */ 'f', 'c', 'v', 't', 'a', 's', 9, 0,
  /* 3799 */ 'f', 'a', 'b', 's', 9, 0,
  /* 3805 */ 's', 'q', 'a', 'b', 's', 9, 0,
  /* 3812 */ 's', 'u', 'b', 's', 9, 0,
  /* 3818 */ 's', 'b', 'c', 's', 9, 0,
  /* 3824 */ 'a', 'd', 'c', 's', 9, 0,
  /* 3830 */ 'b', 'i', 'c', 's', 9, 0,
  /* 3836 */ 'a', 'd', 'd', 's', 9, 0,
  /* 3842 */ 'a', 'n', 'd', 's', 9, 0,
  /* 3848 */ 'p', 't', 'r', 'u', 'e', 's', 9, 0,
  /* 3856 */ 'c', 'm', 'h', 's', 9, 0,
  /* 3862 */ 'c', 'l', 's', 9, 0,
  /* 3867 */ 'f', 'm', 'l', 's', 9, 0,
  /* 3873 */ 'f', 'c', 'v', 't', 'm', 's', 9, 0,
  /* 3881 */ 'i', 'n', 's', 9, 0,
  /* 3886 */ 'f', 'c', 'v', 't', 'n', 's', 9, 0,
  /* 3894 */ 'f', 'r', 'e', 'c', 'p', 's', 9, 0,
  /* 3902 */ 'f', 'c', 'v', 't', 'p', 's', 9, 0,
  /* 3910 */ 'm', 'r', 's', 9, 0,
  /* 3915 */ 'f', 'r', 's', 'q', 'r', 't', 's', 9, 0,
  /* 3924 */ 's', 'y', 's', 9, 0,
  /* 3929 */ 'f', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 3937 */ 'f', 'j', 'c', 'v', 't', 'z', 's', 9, 0,
  /* 3946 */ 'r', 'e', 't', 9, 0,
  /* 3951 */ 'l', 'd', 's', 'e', 't', 9, 0,
  /* 3958 */ 'f', 'a', 'c', 'g', 't', 9, 0,
  /* 3965 */ 'f', 'c', 'm', 'g', 't', 9, 0,
  /* 3972 */ 'r', 'b', 'i', 't', 9, 0,
  /* 3978 */ 'h', 'l', 't', 9, 0,
  /* 3983 */ 'f', 'c', 'm', 'l', 't', 9, 0,
  /* 3990 */ 'c', 'n', 't', 9, 0,
  /* 3995 */ 'h', 'i', 'n', 't', 9, 0,
  /* 4001 */ 's', 'd', 'o', 't', 9, 0,
  /* 4007 */ 'u', 'd', 'o', 't', 9, 0,
  /* 4013 */ 'n', 'o', 't', 9, 0,
  /* 4018 */ 'f', 's', 'q', 'r', 't', 9, 0,
  /* 4025 */ 'c', 'm', 't', 's', 't', 9, 0,
  /* 4032 */ 'f', 'c', 'v', 't', 9, 0,
  /* 4038 */ 'e', 'x', 't', 9, 0,
  /* 4043 */ 'f', 'c', 'v', 't', 'a', 'u', 9, 0,
  /* 4051 */ 's', 'q', 's', 'h', 'l', 'u', 9, 0,
  /* 4059 */ 'f', 'c', 'v', 't', 'm', 'u', 9, 0,
  /* 4067 */ 'f', 'c', 'v', 't', 'n', 'u', 9, 0,
  /* 4075 */ 'f', 'c', 'v', 't', 'p', 'u', 9, 0,
  /* 4083 */ 'f', 'c', 'v', 't', 'z', 'u', 9, 0,
  /* 4091 */ 'a', 'd', 'd', 'v', 9, 0,
  /* 4097 */ 'r', 'e', 'v', 9, 0,
  /* 4102 */ 'f', 'd', 'i', 'v', 9, 0,
  /* 4108 */ 's', 'd', 'i', 'v', 9, 0,
  /* 4114 */ 'u', 'd', 'i', 'v', 9, 0,
  /* 4120 */ 's', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 4128 */ 'u', 'a', 'd', 'd', 'l', 'v', 9, 0,
  /* 4136 */ 'f', 'm', 'i', 'n', 'n', 'm', 'v', 9, 0,
  /* 4145 */ 'f', 'm', 'a', 'x', 'n', 'm', 'v', 9, 0,
  /* 4154 */ 'f', 'm', 'i', 'n', 'v', 9, 0,
  /* 4161 */ 's', 'm', 'i', 'n', 'v', 9, 0,
  /* 4168 */ 'u', 'm', 'i', 'n', 'v', 9, 0,
  /* 4175 */ 'c', 's', 'i', 'n', 'v', 9, 0,
  /* 4182 */ 'f', 'm', 'o', 'v', 9, 0,
  /* 4188 */ 's', 'm', 'o', 'v', 9, 0,
  /* 4194 */ 'u', 'm', 'o', 'v', 9, 0,
  /* 4200 */ 'f', 'm', 'a', 'x', 'v', 9, 0,
  /* 4207 */ 's', 'm', 'a', 'x', 'v', 9, 0,
  /* 4214 */ 'u', 'm', 'a', 'x', 'v', 9, 0,
  /* 4221 */ 'l', 'd', '1', 'w', 9, 0,
  /* 4227 */ 'l', 'd', 'f', 'f', '1', 'w', 9, 0,
  /* 4235 */ 'l', 'd', 'n', 'f', '1', 'w', 9, 0,
  /* 4243 */ 'l', 'd', 'n', 't', '1', 'w', 9, 0,
  /* 4251 */ 's', 't', 'n', 't', '1', 'w', 9, 0,
  /* 4259 */ 's', 't', '1', 'w', 9, 0,
  /* 4265 */ 'c', 'r', 'c', '3', '2', 'w', 9, 0,
  /* 4273 */ 'l', 'd', '2', 'w', 9, 0,
  /* 4279 */ 's', 't', '2', 'w', 9, 0,
  /* 4285 */ 'l', 'd', '3', 'w', 9, 0,
  /* 4291 */ 's', 't', '3', 'w', 9, 0,
  /* 4297 */ 'l', 'd', '4', 'w', 9, 0,
  /* 4303 */ 's', 't', '4', 'w', 9, 0,
  /* 4309 */ 's', 's', 'u', 'b', 'w', 9, 0,
  /* 4316 */ 'u', 's', 'u', 'b', 'w', 9, 0,
  /* 4323 */ 'c', 'r', 'c', '3', '2', 'c', 'w', 9, 0,
  /* 4332 */ 's', 'a', 'd', 'd', 'w', 9, 0,
  /* 4339 */ 'u', 'a', 'd', 'd', 'w', 9, 0,
  /* 4346 */ 'p', 'r', 'f', 'w', 9, 0,
  /* 4352 */ 'l', 'd', '1', 'r', 'q', 'w', 9, 0,
  /* 4360 */ 'l', 'd', '1', 'r', 'w', 9, 0,
  /* 4367 */ 'l', 'd', '1', 's', 'w', 9, 0,
  /* 4374 */ 'l', 'd', 'f', 'f', '1', 's', 'w', 9, 0,
  /* 4383 */ 'l', 'd', 'n', 'f', '1', 's', 'w', 9, 0,
  /* 4392 */ 'l', 'd', 'p', 's', 'w', 9, 0,
  /* 4399 */ 'l', 'd', '1', 'r', 's', 'w', 9, 0,
  /* 4407 */ 'l', 'd', 'r', 's', 'w', 9, 0,
  /* 4414 */ 'l', 'd', 't', 'r', 's', 'w', 9, 0,
  /* 4422 */ 'l', 'd', 'u', 'r', 's', 'w', 9, 0,
  /* 4430 */ 'c', 'r', 'c', '3', '2', 'x', 9, 0,
  /* 4438 */ 'f', 'm', 'a', 'x', 9, 0,
  /* 4444 */ 'l', 'd', 's', 'm', 'a', 'x', 9, 0,
  /* 4452 */ 'l', 'd', 'u', 'm', 'a', 'x', 9, 0,
  /* 4460 */ 't', 'b', 'x', 9, 0,
  /* 4465 */ 'c', 'r', 'c', '3', '2', 'c', 'x', 9, 0,
  /* 4474 */ 'i', 'n', 'd', 'e', 'x', 9, 0,
  /* 4481 */ 'c', 'l', 'r', 'e', 'x', 9, 0,
  /* 4488 */ 'f', 'm', 'u', 'l', 'x', 9, 0,
  /* 4495 */ 'f', 'r', 'e', 'c', 'p', 'x', 9, 0,
  /* 4503 */ 'f', 'r', 'i', 'n', 't', 'x', 9, 0,
  /* 4511 */ 'f', 'c', 'p', 'y', 9, 0,
  /* 4517 */ 'b', 'r', 'a', 'a', 'z', 9, 0,
  /* 4524 */ 'b', 'l', 'r', 'a', 'a', 'z', 9, 0,
  /* 4532 */ 'b', 'r', 'a', 'b', 'z', 9, 0,
  /* 4539 */ 'b', 'l', 'r', 'a', 'b', 'z', 9, 0,
  /* 4547 */ 'c', 'b', 'z', 9, 0,
  /* 4552 */ 't', 'b', 'z', 9, 0,
  /* 4557 */ 'c', 'l', 'z', 9, 0,
  /* 4562 */ 'c', 'b', 'n', 'z', 9, 0,
  /* 4568 */ 't', 'b', 'n', 'z', 9, 0,
  /* 4574 */ 'f', 'r', 'i', 'n', 't', 'z', 9, 0,
  /* 4582 */ 'm', 'o', 'v', 'z', 9, 0,
  /* 4588 */ '.', 't', 'l', 's', 'd', 'e', 's', 'c', 'c', 'a', 'l', 'l', 32, 0,
  /* 4602 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 4633 */ 'b', '.', 0,
  /* 4636 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 4660 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 4685 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 4708 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 4731 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 4753 */ 'p', 'a', 'c', 'i', 'a', '1', '7', '1', '6', 0,
  /* 4763 */ 'a', 'u', 't', 'i', 'a', '1', '7', '1', '6', 0,
  /* 4773 */ 'p', 'a', 'c', 'i', 'b', '1', '7', '1', '6', 0,
  /* 4783 */ 'a', 'u', 't', 'i', 'b', '1', '7', '1', '6', 0,
  /* 4793 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 4806 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 4813 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 4823 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 4833 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 4848 */ 'e', 'r', 'e', 't', 'a', 'a', 0,
  /* 4855 */ 'e', 'r', 'e', 't', 'a', 'b', 0,
  /* 4862 */ 'x', 'p', 'a', 'c', 'l', 'r', 'i', 0,
  /* 4870 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 4884 */ 'p', 'a', 'c', 'i', 'a', 's', 'p', 0,
  /* 4892 */ 'a', 'u', 't', 'i', 'a', 's', 'p', 0,
  /* 4900 */ 'p', 'a', 'c', 'i', 'b', 's', 'p', 0,
  /* 4908 */ 'a', 'u', 't', 'i', 'b', 's', 'p', 0,
  /* 4916 */ 'd', 'r', 'p', 's', 0,
  /* 4921 */ 'e', 'r', 'e', 't', 0,
  /* 4926 */ 'p', 'a', 'c', 'i', 'a', 'z', 0,
  /* 4933 */ 'a', 'u', 't', 'i', 'a', 'z', 0,
  /* 4940 */ 'p', 'a', 'c', 'i', 'b', 'z', 0,
  /* 4947 */ 'a', 'u', 't', 'i', 'b', 'z', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    4814U,	// DBG_VALUE
    4824U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    4807U,	// BUNDLE
    4834U,	// LIFETIME_START
    4794U,	// LIFETIME_END
    0U,	// STACKMAP
    4871U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    4686U,	// PATCHABLE_FUNCTION_ENTER
    4603U,	// PATCHABLE_RET
    4732U,	// PATCHABLE_FUNCTION_EXIT
    4709U,	// PATCHABLE_TAIL_CALL
    4661U,	// PATCHABLE_EVENT_CALL
    4637U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    11993U,	// ABSv16i8
    34098905U,	// ABSv1i64
    1060569U,	// ABSv2i32
    1584857U,	// ABSv2i64
    2109145U,	// ABSv4i16
    2633433U,	// ABSv4i32
    3157721U,	// ABSv8i16
    3682009U,	// ABSv8i8
    34098929U,	// ADCSWr
    34098929U,	// ADCSXr
    34096629U,	// ADCWr
    34096629U,	// ADCXr
    1059999U,	// ADDHNv2i64_v2i32
    69755162U,	// ADDHNv2i64_v4i32
    2108575U,	// ADDHNv4i32_v4i16
    70279450U,	// ADDHNv4i32_v8i16
    67133722U,	// ADDHNv8i16_v16i8
    3681439U,	// ADDHNv8i16_v8i8
    34098123U,	// ADDPL_XXI
    11580U,	// ADDPv16i8
    1060156U,	// ADDPv2i32
    1584444U,	// ADDPv2i64
    544060U,	// ADDPv2i64p
    2108732U,	// ADDPv4i16
    2633020U,	// ADDPv4i32
    3157308U,	// ADDPv8i16
    3681596U,	// ADDPv8i8
    34098941U,	// ADDSWri
    0U,	// ADDSWrr
    34098941U,	// ADDSWrs
    34098941U,	// ADDSWrx
    34098941U,	// ADDSXri
    0U,	// ADDSXrr
    34098941U,	// ADDSXrs
    34098941U,	// ADDSXrx
    34098941U,	// ADDSXrx64
    34098233U,	// ADDVL_XXI
    544764U,	// ADDVv16i8v
    544764U,	// ADDVv4i16v
    544764U,	// ADDVv4i32v
    544764U,	// ADDVv8i16v
    544764U,	// ADDVv8i8v
    34096778U,	// ADDWri
    0U,	// ADDWrr
    34096778U,	// ADDWrs
    34096778U,	// ADDWrx
    34096778U,	// ADDXri
    0U,	// ADDXrr
    34096778U,	// ADDXrs
    34096778U,	// ADDXrx
    34096778U,	// ADDXrx64
    104892042U,	// ADD_ZI_B
    105424522U,	// ADD_ZI_D
    105957002U,	// ADD_ZI_H
    106489482U,	// ADD_ZI_S
    140543626U,	// ADD_ZPmZ_B
    140551818U,	// ADD_ZPmZ_D
    140560010U,	// ADD_ZPmZ_H
    140568202U,	// ADD_ZPmZ_S
    104892042U,	// ADD_ZZZ_B
    105424522U,	// ADD_ZZZ_D
    105957002U,	// ADD_ZZZ_H
    106489482U,	// ADD_ZZZ_S
    0U,	// ADDlowTLS
    9866U,	// ADDv16i8
    34096778U,	// ADDv1i64
    1058442U,	// ADDv2i32
    1582730U,	// ADDv2i64
    2107018U,	// ADDv4i16
    2631306U,	// ADDv4i32
    3155594U,	// ADDv8i16
    3679882U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    34098730U,	// ADR
    168316327U,	// ADRP
    67135219U,	// AESDrr
    67135277U,	// AESErr
    9727U,	// AESIMCrr
    0U,	// AESIMCrrTied
    9735U,	// AESMCrr
    0U,	// AESMCrrTied
    34098947U,	// ANDSWri
    0U,	// ANDSWrr
    34098947U,	// ANDSWrs
    34098947U,	// ANDSXri
    0U,	// ANDSXrr
    34098947U,	// ANDSXrs
    34096863U,	// ANDWri
    0U,	// ANDWrr
    34096863U,	// ANDWrs
    34096863U,	// ANDXri
    0U,	// ANDXrr
    34096863U,	// ANDXrs
    105424607U,	// AND_ZI
    140543711U,	// AND_ZPmZ_B
    140551903U,	// AND_ZPmZ_D
    140560095U,	// AND_ZPmZ_H
    140568287U,	// AND_ZPmZ_S
    105424607U,	// AND_ZZZ
    9951U,	// ANDv16i8
    3679967U,	// ANDv8i8
    34098815U,	// ASRVWr
    34098815U,	// ASRVXr
    34095645U,	// AUTDA
    34096053U,	// AUTDB
    6832831U,	// AUTDZA
    6833617U,	// AUTDZB
    34095666U,	// AUTIA
    4764U,	// AUTIA1716
    4893U,	// AUTIASP
    4934U,	// AUTIAZ
    34096073U,	// AUTIB
    4784U,	// AUTIB1716
    4909U,	// AUTIBSP
    4948U,	// AUTIBZ
    6832847U,	// AUTIZA
    6833633U,	// AUTIZB
    66266U,	// B
    201870432U,	// BFMWri
    201870432U,	// BFMXri
    0U,	// BICSWrr
    34098935U,	// BICSWrs
    0U,	// BICSXrr
    34098935U,	// BICSXrs
    0U,	// BICWrr
    34096634U,	// BICWrs
    0U,	// BICXrr
    34096634U,	// BICXrs
    140543482U,	// BIC_ZPmZ_B
    140551674U,	// BIC_ZPmZ_D
    140559866U,	// BIC_ZPmZ_H
    140568058U,	// BIC_ZPmZ_S
    105424378U,	// BIC_ZZZ
    9722U,	// BICv16i8
    235955706U,	// BICv2i32
    237004282U,	// BICv4i16
    237528570U,	// BICv4i32
    238052858U,	// BICv8i16
    3679738U,	// BICv8i8
    10060U,	// BIFv16i8
    3680076U,	// BIFv8i8
    67137414U,	// BITv16i8
    70807430U,	// BITv8i8
    68344U,	// BL
    6835790U,	// BLR
    34095611U,	// BLRAA
    6836653U,	// BLRAAZ
    34095968U,	// BLRAB
    6836668U,	// BLRABZ
    6835750U,	// BR
    34095598U,	// BRAA
    6836646U,	// BRAAZ
    34095955U,	// BRAB
    6836661U,	// BRABZ
    76389U,	// BRK
    67136501U,	// BSLv16i8
    70806517U,	// BSLv8i8
    86554U,	// Bcc
    201941881U,	// CASAB
    201943067U,	// CASAH
    201942028U,	// CASALB
    201943186U,	// CASALH
    201943763U,	// CASALW
    201943763U,	// CASALX
    201941647U,	// CASAW
    201941647U,	// CASAX
    201942351U,	// CASB
    201943537U,	// CASH
    201942122U,	// CASLB
    201943280U,	// CASLH
    201944047U,	// CASLW
    201944047U,	// CASLX
    101042U,	// CASPALW
    109234U,	// CASPALX
    98904U,	// CASPAW
    107096U,	// CASPAX
    101330U,	// CASPLW
    109522U,	// CASPLX
    101805U,	// CASPW
    109997U,	// CASPX
    201944779U,	// CASW
    201944779U,	// CASX
    268980691U,	// CBNZW
    268980691U,	// CBNZX
    268980676U,	// CBZW
    268980676U,	// CBZX
    34098364U,	// CCMNWi
    34098364U,	// CCMNWr
    34098364U,	// CCMNXi
    34098364U,	// CCMNXr
    34098536U,	// CCMPWi
    34098536U,	// CCMPWr
    34098536U,	// CCMPXi
    34098536U,	// CCMPXr
    6836610U,	// CLREX
    34098967U,	// CLSWr
    34098967U,	// CLSXr
    12055U,	// CLSv16i8
    1060631U,	// CLSv2i32
    2109207U,	// CLSv4i16
    2633495U,	// CLSv4i32
    3157783U,	// CLSv8i16
    3682071U,	// CLSv8i8
    34099662U,	// CLZWr
    34099662U,	// CLZXr
    12750U,	// CLZv16i8
    1061326U,	// CLZv2i32
    2109902U,	// CLZv4i16
    2634190U,	// CLZv4i32
    3158478U,	// CLZv8i16
    3682766U,	// CLZv8i8
    11771U,	// CMEQv16i8
    11771U,	// CMEQv16i8rz
    34098683U,	// CMEQv1i64
    34098683U,	// CMEQv1i64rz
    1060347U,	// CMEQv2i32
    1060347U,	// CMEQv2i32rz
    1584635U,	// CMEQv2i64
    1584635U,	// CMEQv2i64rz
    2108923U,	// CMEQv4i16
    2108923U,	// CMEQv4i16rz
    2633211U,	// CMEQv4i32
    2633211U,	// CMEQv4i32rz
    3157499U,	// CMEQv8i16
    3157499U,	// CMEQv8i16rz
    3681787U,	// CMEQv8i8
    3681787U,	// CMEQv8i8rz
    9985U,	// CMGEv16i8
    9985U,	// CMGEv16i8rz
    34096897U,	// CMGEv1i64
    34096897U,	// CMGEv1i64rz
    1058561U,	// CMGEv2i32
    1058561U,	// CMGEv2i32rz
    1582849U,	// CMGEv2i64
    1582849U,	// CMGEv2i64rz
    2107137U,	// CMGEv4i16
    2107137U,	// CMGEv4i16rz
    2631425U,	// CMGEv4i32
    2631425U,	// CMGEv4i32rz
    3155713U,	// CMGEv8i16
    3155713U,	// CMGEv8i16rz
    3680001U,	// CMGEv8i8
    3680001U,	// CMGEv8i8rz
    12159U,	// CMGTv16i8
    12159U,	// CMGTv16i8rz
    34099071U,	// CMGTv1i64
    34099071U,	// CMGTv1i64rz
    1060735U,	// CMGTv2i32
    1060735U,	// CMGTv2i32rz
    1585023U,	// CMGTv2i64
    1585023U,	// CMGTv2i64rz
    2109311U,	// CMGTv4i16
    2109311U,	// CMGTv4i16rz
    2633599U,	// CMGTv4i32
    2633599U,	// CMGTv4i32rz
    3157887U,	// CMGTv8i16
    3157887U,	// CMGTv8i16rz
    3682175U,	// CMGTv8i8
    3682175U,	// CMGTv8i8rz
    10817U,	// CMHIv16i8
    34097729U,	// CMHIv1i64
    1059393U,	// CMHIv2i32
    1583681U,	// CMHIv2i64
    2107969U,	// CMHIv4i16
    2632257U,	// CMHIv4i32
    3156545U,	// CMHIv8i16
    3680833U,	// CMHIv8i8
    12049U,	// CMHSv16i8
    34098961U,	// CMHSv1i64
    1060625U,	// CMHSv2i32
    1584913U,	// CMHSv2i64
    2109201U,	// CMHSv4i16
    2633489U,	// CMHSv4i32
    3157777U,	// CMHSv8i16
    3682065U,	// CMHSv8i8
    9992U,	// CMLEv16i8rz
    34096904U,	// CMLEv1i64rz
    1058568U,	// CMLEv2i32rz
    1582856U,	// CMLEv2i64rz
    2107144U,	// CMLEv4i16rz
    2631432U,	// CMLEv4i32rz
    3155720U,	// CMLEv8i16rz
    3680008U,	// CMLEv8i8rz
    12177U,	// CMLTv16i8rz
    34099089U,	// CMLTv1i64rz
    1060753U,	// CMLTv2i32rz
    1585041U,	// CMLTv2i64rz
    2109329U,	// CMLTv4i16rz
    2633617U,	// CMLTv4i32rz
    3157905U,	// CMLTv8i16rz
    3682193U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    12218U,	// CMTSTv16i8
    34099130U,	// CMTSTv1i64
    1060794U,	// CMTSTv2i32
    1585082U,	// CMTSTv2i64
    2109370U,	// CMTSTv4i16
    2633658U,	// CMTSTv4i32
    3157946U,	// CMTSTv8i16
    3682234U,	// CMTSTv8i8
    12183U,	// CNTv16i8
    3682199U,	// CNTv8i8
    309367201U,	// CPY_ZPmI_B
    342929825U,	// CPY_ZPmI_D
    376492449U,	// CPY_ZPmI_H
    410055073U,	// CPY_ZPmI_S
    442536353U,	// CPY_ZPzI_B
    442544545U,	// CPY_ZPzI_D
    442552737U,	// CPY_ZPzI_H
    442560929U,	// CPY_ZPzI_S
    544856U,	// CPYi16
    544856U,	// CPYi32
    544856U,	// CPYi64
    544856U,	// CPYi8
    34095875U,	// CRC32Brr
    34096029U,	// CRC32CBrr
    34097215U,	// CRC32CHrr
    34099428U,	// CRC32CWrr
    34099570U,	// CRC32CXrr
    34097062U,	// CRC32Hrr
    34099370U,	// CRC32Wrr
    34099535U,	// CRC32Xrr
    34097999U,	// CSELWr
    34097999U,	// CSELXr
    34096654U,	// CSINCWr
    34096654U,	// CSINCXr
    34099280U,	// CSINVWr
    34099280U,	// CSINVXr
    34097004U,	// CSNEGWr
    34097004U,	// CSNEGXr
    0U,	// CompilerBarrier
    73772U,	// DCPS1
    74137U,	// DCPS2
    74186U,	// DCPS3
    115854U,	// DMB
    4917U,	// DRPS
    116053U,	// DSB
    7908481U,	// DUPM_ZI
    8424897U,	// DUP_ZI_B
    8957377U,	// DUP_ZI_D
    9489857U,	// DUP_ZI_H
    10022337U,	// DUP_ZI_S
    480284097U,	// DUP_ZR_B
    480292289U,	// DUP_ZR_D
    480300481U,	// DUP_ZR_H
    480308673U,	// DUP_ZR_S
    507547073U,	// DUP_ZZI_B
    508079553U,	// DUP_ZZI_D
    508612033U,	// DUP_ZZI_H
    126401U,	// DUP_ZZI_Q
    509144513U,	// DUP_ZZI_S
    33566145U,	// DUPv16i8gpr
    11713U,	// DUPv16i8lane
    34614721U,	// DUPv2i32gpr
    1060289U,	// DUPv2i32lane
    35139009U,	// DUPv2i64gpr
    1584577U,	// DUPv2i64lane
    35663297U,	// DUPv4i16gpr
    2108865U,	// DUPv4i16lane
    36187585U,	// DUPv4i32gpr
    2633153U,	// DUPv4i32lane
    36711873U,	// DUPv8i16gpr
    3157441U,	// DUPv8i16lane
    37236161U,	// DUPv8i8gpr
    3681729U,	// DUPv8i8lane
    0U,	// EONWrr
    34098370U,	// EONWrs
    0U,	// EONXrr
    34098370U,	// EONXrs
    34098793U,	// EORWri
    0U,	// EORWrr
    34098793U,	// EORWrs
    34098793U,	// EORXri
    0U,	// EORXrr
    34098793U,	// EORXrs
    105426537U,	// EOR_ZI
    140545641U,	// EOR_ZPmZ_B
    140553833U,	// EOR_ZPmZ_D
    140562025U,	// EOR_ZPmZ_H
    140570217U,	// EOR_ZPmZ_S
    105426537U,	// EOR_ZZZ
    11881U,	// EORv16i8
    3681897U,	// EORv8i8
    4922U,	// ERET
    4849U,	// ERETAA
    4856U,	// ERETAB
    34098847U,	// EXTRWrri
    34098847U,	// EXTRXrri
    12231U,	// EXTv16i8
    3682247U,	// EXTv8i8
    0U,	// F128CSEL
    34096751U,	// FABD16
    34096751U,	// FABD32
    34096751U,	// FABD64
    1058415U,	// FABDv2f32
    1582703U,	// FABDv2f64
    2106991U,	// FABDv4f16
    2631279U,	// FABDv4f32
    3155567U,	// FABDv8f16
    34098904U,	// FABSDr
    34098904U,	// FABSHr
    34098904U,	// FABSSr
    1060568U,	// FABSv2f32
    1584856U,	// FABSv2f64
    2109144U,	// FABSv4f16
    2633432U,	// FABSv4f32
    3157720U,	// FABSv8f16
    34096889U,	// FACGE16
    34096889U,	// FACGE32
    34096889U,	// FACGE64
    1058553U,	// FACGEv2f32
    1582841U,	// FACGEv2f64
    2107129U,	// FACGEv4f16
    2631417U,	// FACGEv4f32
    3155705U,	// FACGEv8f16
    34099063U,	// FACGT16
    34099063U,	// FACGT32
    34099063U,	// FACGT64
    1060727U,	// FACGTv2f32
    1585015U,	// FACGTv2f64
    2109303U,	// FACGTv4f16
    2633591U,	// FACGTv4f32
    3157879U,	// FACGTv8f16
    34096790U,	// FADDDrr
    34096790U,	// FADDHrr
    1060155U,	// FADDPv2f32
    1584443U,	// FADDPv2f64
    544059U,	// FADDPv2i16p
    544059U,	// FADDPv2i32p
    544059U,	// FADDPv2i64p
    2108731U,	// FADDPv4f16
    2633019U,	// FADDPv4f32
    3157307U,	// FADDPv8f16
    34096790U,	// FADDSrr
    1058454U,	// FADDv2f32
    1582742U,	// FADDv2f64
    2107030U,	// FADDv4f16
    2631318U,	// FADDv4f32
    3155606U,	// FADDv8f16
    1058440U,	// FCADDv2f32
    1582728U,	// FCADDv2f64
    2107016U,	// FCADDv4f16
    2631304U,	// FCADDv4f32
    3155592U,	// FCADDv8f16
    34098535U,	// FCCMPDrr
    34096926U,	// FCCMPEDrr
    34096926U,	// FCCMPEHrr
    34096926U,	// FCCMPESrr
    34098535U,	// FCCMPHrr
    34098535U,	// FCCMPSrr
    34098682U,	// FCMEQ16
    34098682U,	// FCMEQ32
    34098682U,	// FCMEQ64
    34098682U,	// FCMEQv1i16rz
    34098682U,	// FCMEQv1i32rz
    34098682U,	// FCMEQv1i64rz
    1060346U,	// FCMEQv2f32
    1584634U,	// FCMEQv2f64
    1060346U,	// FCMEQv2i32rz
    1584634U,	// FCMEQv2i64rz
    2108922U,	// FCMEQv4f16
    2633210U,	// FCMEQv4f32
    2108922U,	// FCMEQv4i16rz
    2633210U,	// FCMEQv4i32rz
    3157498U,	// FCMEQv8f16
    3157498U,	// FCMEQv8i16rz
    34096896U,	// FCMGE16
    34096896U,	// FCMGE32
    34096896U,	// FCMGE64
    34096896U,	// FCMGEv1i16rz
    34096896U,	// FCMGEv1i32rz
    34096896U,	// FCMGEv1i64rz
    1058560U,	// FCMGEv2f32
    1582848U,	// FCMGEv2f64
    1058560U,	// FCMGEv2i32rz
    1582848U,	// FCMGEv2i64rz
    2107136U,	// FCMGEv4f16
    2631424U,	// FCMGEv4f32
    2107136U,	// FCMGEv4i16rz
    2631424U,	// FCMGEv4i32rz
    3155712U,	// FCMGEv8f16
    3155712U,	// FCMGEv8i16rz
    34099070U,	// FCMGT16
    34099070U,	// FCMGT32
    34099070U,	// FCMGT64
    34099070U,	// FCMGTv1i16rz
    34099070U,	// FCMGTv1i32rz
    34099070U,	// FCMGTv1i64rz
    1060734U,	// FCMGTv2f32
    1585022U,	// FCMGTv2f64
    1060734U,	// FCMGTv2i32rz
    1585022U,	// FCMGTv2i64rz
    2109310U,	// FCMGTv4f16
    2633598U,	// FCMGTv4f32
    2109310U,	// FCMGTv4i16rz
    2633598U,	// FCMGTv4i32rz
    3157886U,	// FCMGTv8f16
    3157886U,	// FCMGTv8i16rz
    68182585U,	// FCMLAv2f32
    68706873U,	// FCMLAv2f64
    69231161U,	// FCMLAv4f16
    69231161U,	// FCMLAv4f16_indexed
    69755449U,	// FCMLAv4f32
    69755449U,	// FCMLAv4f32_indexed
    70279737U,	// FCMLAv8f16
    70279737U,	// FCMLAv8f16_indexed
    34096903U,	// FCMLEv1i16rz
    34096903U,	// FCMLEv1i32rz
    34096903U,	// FCMLEv1i64rz
    1058567U,	// FCMLEv2i32rz
    1582855U,	// FCMLEv2i64rz
    2107143U,	// FCMLEv4i16rz
    2631431U,	// FCMLEv4i32rz
    3155719U,	// FCMLEv8i16rz
    34099088U,	// FCMLTv1i16rz
    34099088U,	// FCMLTv1i32rz
    34099088U,	// FCMLTv1i64rz
    1060752U,	// FCMLTv2i32rz
    1585040U,	// FCMLTv2i64rz
    2109328U,	// FCMLTv4i16rz
    2633616U,	// FCMLTv4i32rz
    3157904U,	// FCMLTv8i16rz
    11029870U,	// FCMPDri
    34098542U,	// FCMPDrr
    11028262U,	// FCMPEDri
    34096934U,	// FCMPEDrr
    11028262U,	// FCMPEHri
    34096934U,	// FCMPEHrr
    11028262U,	// FCMPESri
    34096934U,	// FCMPESrr
    11029870U,	// FCMPHri
    34098542U,	// FCMPHrr
    11029870U,	// FCMPSri
    34098542U,	// FCMPSrr
    544256416U,	// FCPY_ZPmI_D
    544264608U,	// FCPY_ZPmI_H
    544272800U,	// FCPY_ZPmI_S
    34097998U,	// FCSELDrrr
    34097998U,	// FCSELHrrr
    34097998U,	// FCSELSrrr
    34098896U,	// FCVTASUWDr
    34098896U,	// FCVTASUWHr
    34098896U,	// FCVTASUWSr
    34098896U,	// FCVTASUXDr
    34098896U,	// FCVTASUXHr
    34098896U,	// FCVTASUXSr
    34098896U,	// FCVTASv1f16
    34098896U,	// FCVTASv1i32
    34098896U,	// FCVTASv1i64
    1060560U,	// FCVTASv2f32
    1584848U,	// FCVTASv2f64
    2109136U,	// FCVTASv4f16
    2633424U,	// FCVTASv4f32
    3157712U,	// FCVTASv8f16
    34099148U,	// FCVTAUUWDr
    34099148U,	// FCVTAUUWHr
    34099148U,	// FCVTAUUWSr
    34099148U,	// FCVTAUUXDr
    34099148U,	// FCVTAUUXHr
    34099148U,	// FCVTAUUXSr
    34099148U,	// FCVTAUv1f16
    34099148U,	// FCVTAUv1i32
    34099148U,	// FCVTAUv1i64
    1060812U,	// FCVTAUv2f32
    1585100U,	// FCVTAUv2f64
    2109388U,	// FCVTAUv4f16
    2633676U,	// FCVTAUv4f32
    3157964U,	// FCVTAUv8f16
    34099137U,	// FCVTDHr
    34099137U,	// FCVTDSr
    34099137U,	// FCVTHDr
    34099137U,	// FCVTHSr
    1584159U,	// FCVTLv2i32
    2632735U,	// FCVTLv4i16
    1581320U,	// FCVTLv4i32
    2629896U,	// FCVTLv8i16
    34098978U,	// FCVTMSUWDr
    34098978U,	// FCVTMSUWHr
    34098978U,	// FCVTMSUWSr
    34098978U,	// FCVTMSUXDr
    34098978U,	// FCVTMSUXHr
    34098978U,	// FCVTMSUXSr
    34098978U,	// FCVTMSv1f16
    34098978U,	// FCVTMSv1i32
    34098978U,	// FCVTMSv1i64
    1060642U,	// FCVTMSv2f32
    1584930U,	// FCVTMSv2f64
    2109218U,	// FCVTMSv4f16
    2633506U,	// FCVTMSv4f32
    3157794U,	// FCVTMSv8f16
    34099164U,	// FCVTMUUWDr
    34099164U,	// FCVTMUUWHr
    34099164U,	// FCVTMUUWSr
    34099164U,	// FCVTMUUXDr
    34099164U,	// FCVTMUUXHr
    34099164U,	// FCVTMUUXSr
    34099164U,	// FCVTMUv1f16
    34099164U,	// FCVTMUv1i32
    34099164U,	// FCVTMUv1i64
    1060828U,	// FCVTMUv2f32
    1585116U,	// FCVTMUv2f64
    2109404U,	// FCVTMUv4f16
    2633692U,	// FCVTMUv4f32
    3157980U,	// FCVTMUv8f16
    34098991U,	// FCVTNSUWDr
    34098991U,	// FCVTNSUWHr
    34098991U,	// FCVTNSUWSr
    34098991U,	// FCVTNSUXDr
    34098991U,	// FCVTNSUXHr
    34098991U,	// FCVTNSUXSr
    34098991U,	// FCVTNSv1f16
    34098991U,	// FCVTNSv1i32
    34098991U,	// FCVTNSv1i64
    1060655U,	// FCVTNSv2f32
    1584943U,	// FCVTNSv2f64
    2109231U,	// FCVTNSv4f16
    2633519U,	// FCVTNSv4f32
    3157807U,	// FCVTNSv8f16
    34099172U,	// FCVTNUUWDr
    34099172U,	// FCVTNUUWHr
    34099172U,	// FCVTNUUWSr
    34099172U,	// FCVTNUUXDr
    34099172U,	// FCVTNUUXHr
    34099172U,	// FCVTNUUXSr
    34099172U,	// FCVTNUv1f16
    34099172U,	// FCVTNUv1i32
    34099172U,	// FCVTNUv1i64
    1060836U,	// FCVTNUv2f32
    1585124U,	// FCVTNUv2f64
    2109412U,	// FCVTNUv4f16
    2633700U,	// FCVTNUv4f32
    3157988U,	// FCVTNUv8f16
    1060086U,	// FCVTNv2i32
    2108662U,	// FCVTNv4i16
    69755214U,	// FCVTNv4i32
    70279502U,	// FCVTNv8i16
    34099007U,	// FCVTPSUWDr
    34099007U,	// FCVTPSUWHr
    34099007U,	// FCVTPSUWSr
    34099007U,	// FCVTPSUXDr
    34099007U,	// FCVTPSUXHr
    34099007U,	// FCVTPSUXSr
    34099007U,	// FCVTPSv1f16
    34099007U,	// FCVTPSv1i32
    34099007U,	// FCVTPSv1i64
    1060671U,	// FCVTPSv2f32
    1584959U,	// FCVTPSv2f64
    2109247U,	// FCVTPSv4f16
    2633535U,	// FCVTPSv4f32
    3157823U,	// FCVTPSv8f16
    34099180U,	// FCVTPUUWDr
    34099180U,	// FCVTPUUWHr
    34099180U,	// FCVTPUUWSr
    34099180U,	// FCVTPUUXDr
    34099180U,	// FCVTPUUXHr
    34099180U,	// FCVTPUUXSr
    34099180U,	// FCVTPUv1f16
    34099180U,	// FCVTPUv1i32
    34099180U,	// FCVTPUv1i64
    1060844U,	// FCVTPUv2f32
    1585132U,	// FCVTPUv2f64
    2109420U,	// FCVTPUv4f16
    2633708U,	// FCVTPUv4f32
    3157996U,	// FCVTPUv8f16
    34099137U,	// FCVTSDr
    34099137U,	// FCVTSHr
    34098476U,	// FCVTXNv1i64
    1060140U,	// FCVTXNv2f32
    69755268U,	// FCVTXNv4f32
    34099034U,	// FCVTZSDHr
    34099034U,	// FCVTZSHDr
    34099034U,	// FCVTZSHSr
    34099034U,	// FCVTZSSHr
    34099034U,	// FCVTZSSWDri
    34099034U,	// FCVTZSSWHri
    34099034U,	// FCVTZSSWSri
    34099034U,	// FCVTZSSXDri
    34099034U,	// FCVTZSSXHri
    34099034U,	// FCVTZSSXSri
    34099034U,	// FCVTZSUWDr
    34099034U,	// FCVTZSUWHr
    34099034U,	// FCVTZSUWSr
    34099034U,	// FCVTZSUXDr
    34099034U,	// FCVTZSUXHr
    34099034U,	// FCVTZSUXSr
    34099034U,	// FCVTZSd
    34099034U,	// FCVTZSh
    34099034U,	// FCVTZSs
    34099034U,	// FCVTZSv1f16
    34099034U,	// FCVTZSv1i32
    34099034U,	// FCVTZSv1i64
    1060698U,	// FCVTZSv2f32
    1584986U,	// FCVTZSv2f64
    1060698U,	// FCVTZSv2i32_shift
    1584986U,	// FCVTZSv2i64_shift
    2109274U,	// FCVTZSv4f16
    2633562U,	// FCVTZSv4f32
    2109274U,	// FCVTZSv4i16_shift
    2633562U,	// FCVTZSv4i32_shift
    3157850U,	// FCVTZSv8f16
    3157850U,	// FCVTZSv8i16_shift
    34099188U,	// FCVTZUDHr
    34099188U,	// FCVTZUHDr
    34099188U,	// FCVTZUHSr
    34099188U,	// FCVTZUSHr
    34099188U,	// FCVTZUSWDri
    34099188U,	// FCVTZUSWHri
    34099188U,	// FCVTZUSWSri
    34099188U,	// FCVTZUSXDri
    34099188U,	// FCVTZUSXHri
    34099188U,	// FCVTZUSXSri
    34099188U,	// FCVTZUUWDr
    34099188U,	// FCVTZUUWHr
    34099188U,	// FCVTZUUWSr
    34099188U,	// FCVTZUUXDr
    34099188U,	// FCVTZUUXHr
    34099188U,	// FCVTZUUXSr
    34099188U,	// FCVTZUd
    34099188U,	// FCVTZUh
    34099188U,	// FCVTZUs
    34099188U,	// FCVTZUv1f16
    34099188U,	// FCVTZUv1i32
    34099188U,	// FCVTZUv1i64
    1060852U,	// FCVTZUv2f32
    1585140U,	// FCVTZUv2f64
    1060852U,	// FCVTZUv2i32_shift
    1585140U,	// FCVTZUv2i64_shift
    2109428U,	// FCVTZUv4f16
    2633716U,	// FCVTZUv4f32
    2109428U,	// FCVTZUv4i16_shift
    2633716U,	// FCVTZUv4i32_shift
    3158004U,	// FCVTZUv8f16
    3158004U,	// FCVTZUv8i16_shift
    34099207U,	// FDIVDrr
    34099207U,	// FDIVHrr
    34099207U,	// FDIVSrr
    1060871U,	// FDIVv2f32
    1585159U,	// FDIVv2f64
    2109447U,	// FDIVv4f16
    2633735U,	// FDIVv4f32
    3158023U,	// FDIVv8f16
    11578816U,	// FDUP_ZI_D
    11587008U,	// FDUP_ZI_H
    11595200U,	// FDUP_ZI_S
    34099042U,	// FJCVTZS
    34096826U,	// FMADDDrrr
    34096826U,	// FMADDHrrr
    34096826U,	// FMADDSrrr
    34099543U,	// FMAXDrr
    34099543U,	// FMAXHrr
    34098297U,	// FMAXNMDrr
    34098297U,	// FMAXNMHrr
    1060221U,	// FMAXNMPv2f32
    1584509U,	// FMAXNMPv2f64
    544125U,	// FMAXNMPv2i16p
    544125U,	// FMAXNMPv2i32p
    544125U,	// FMAXNMPv2i64p
    2108797U,	// FMAXNMPv4f16
    2633085U,	// FMAXNMPv4f32
    3157373U,	// FMAXNMPv8f16
    34098297U,	// FMAXNMSrr
    544818U,	// FMAXNMVv4i16v
    544818U,	// FMAXNMVv4i32v
    544818U,	// FMAXNMVv8i16v
    1059961U,	// FMAXNMv2f32
    1584249U,	// FMAXNMv2f64
    2108537U,	// FMAXNMv4f16
    2632825U,	// FMAXNMv4f32
    3157113U,	// FMAXNMv8f16
    1060306U,	// FMAXPv2f32
    1584594U,	// FMAXPv2f64
    544210U,	// FMAXPv2i16p
    544210U,	// FMAXPv2i32p
    544210U,	// FMAXPv2i64p
    2108882U,	// FMAXPv4f16
    2633170U,	// FMAXPv4f32
    3157458U,	// FMAXPv8f16
    34099543U,	// FMAXSrr
    544873U,	// FMAXVv4i16v
    544873U,	// FMAXVv4i32v
    544873U,	// FMAXVv8i16v
    1061207U,	// FMAXv2f32
    1585495U,	// FMAXv2f64
    2109783U,	// FMAXv4f16
    2634071U,	// FMAXv4f32
    3158359U,	// FMAXv8f16
    34098342U,	// FMINDrr
    34098342U,	// FMINHrr
    34098289U,	// FMINNMDrr
    34098289U,	// FMINNMHrr
    1060212U,	// FMINNMPv2f32
    1584500U,	// FMINNMPv2f64
    544116U,	// FMINNMPv2i16p
    544116U,	// FMINNMPv2i32p
    544116U,	// FMINNMPv2i64p
    2108788U,	// FMINNMPv4f16
    2633076U,	// FMINNMPv4f32
    3157364U,	// FMINNMPv8f16
    34098289U,	// FMINNMSrr
    544809U,	// FMINNMVv4i16v
    544809U,	// FMINNMVv4i32v
    544809U,	// FMINNMVv8i16v
    1059953U,	// FMINNMv2f32
    1584241U,	// FMINNMv2f64
    2108529U,	// FMINNMv4f16
    2632817U,	// FMINNMv4f32
    3157105U,	// FMINNMv8f16
    1060236U,	// FMINPv2f32
    1584524U,	// FMINPv2f64
    544140U,	// FMINPv2i16p
    544140U,	// FMINPv2i32p
    544140U,	// FMINPv2i64p
    2108812U,	// FMINPv4f16
    2633100U,	// FMINPv4f32
    3157388U,	// FMINPv8f16
    34098342U,	// FMINSrr
    544827U,	// FMINVv4i16v
    544827U,	// FMINVv4i32v
    544827U,	// FMINVv8i16v
    1060006U,	// FMINv2f32
    1584294U,	// FMINv2f64
    2108582U,	// FMINv4f16
    2632870U,	// FMINv4f32
    3157158U,	// FMINv8f16
    201941568U,	// FMLAv1i16_indexed
    201941568U,	// FMLAv1i32_indexed
    201941568U,	// FMLAv1i64_indexed
    68182592U,	// FMLAv2f32
    68706880U,	// FMLAv2f64
    68182592U,	// FMLAv2i32_indexed
    68706880U,	// FMLAv2i64_indexed
    69231168U,	// FMLAv4f16
    69755456U,	// FMLAv4f32
    69231168U,	// FMLAv4i16_indexed
    69755456U,	// FMLAv4i32_indexed
    70279744U,	// FMLAv8f16
    70279744U,	// FMLAv8i16_indexed
    201944860U,	// FMLSv1i16_indexed
    201944860U,	// FMLSv1i32_indexed
    201944860U,	// FMLSv1i64_indexed
    68185884U,	// FMLSv2f32
    68710172U,	// FMLSv2f64
    68185884U,	// FMLSv2i32_indexed
    68710172U,	// FMLSv2i64_indexed
    69234460U,	// FMLSv4f16
    69758748U,	// FMLSv4f32
    69234460U,	// FMLSv4i16_indexed
    69758748U,	// FMLSv4i32_indexed
    70283036U,	// FMLSv8f16
    70283036U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    544855U,	// FMOVDXHighr
    34099287U,	// FMOVDXr
    570970199U,	// FMOVDi
    34099287U,	// FMOVDr
    0U,	// FMOVH0
    34099287U,	// FMOVHWr
    34099287U,	// FMOVHXr
    570970199U,	// FMOVHi
    34099287U,	// FMOVHr
    0U,	// FMOVS0
    34099287U,	// FMOVSWr
    570970199U,	// FMOVSi
    34099287U,	// FMOVSr
    34099287U,	// FMOVWHr
    34099287U,	// FMOVWSr
    45625431U,	// FMOVXDHighr
    34099287U,	// FMOVXDr
    34099287U,	// FMOVXHr
    571486295U,	// FMOVv2f32_ns
    572010583U,	// FMOVv2f64_ns
    572534871U,	// FMOVv4f16_ns
    573059159U,	// FMOVv4f32_ns
    573583447U,	// FMOVv8f16_ns
    34096538U,	// FMSUBDrrr
    34096538U,	// FMSUBHrrr
    34096538U,	// FMSUBSrrr
    34098214U,	// FMULDrr
    34098214U,	// FMULHrr
    34098214U,	// FMULSrr
    34099593U,	// FMULX16
    34099593U,	// FMULX32
    34099593U,	// FMULX64
    34099593U,	// FMULXv1i16_indexed
    34099593U,	// FMULXv1i32_indexed
    34099593U,	// FMULXv1i64_indexed
    1061257U,	// FMULXv2f32
    1585545U,	// FMULXv2f64
    1061257U,	// FMULXv2i32_indexed
    1585545U,	// FMULXv2i64_indexed
    2109833U,	// FMULXv4f16
    2634121U,	// FMULXv4f32
    2109833U,	// FMULXv4i16_indexed
    2634121U,	// FMULXv4i32_indexed
    3158409U,	// FMULXv8f16
    3158409U,	// FMULXv8i16_indexed
    34098214U,	// FMULv1i16_indexed
    34098214U,	// FMULv1i32_indexed
    34098214U,	// FMULv1i64_indexed
    1059878U,	// FMULv2f32
    1584166U,	// FMULv2f64
    1059878U,	// FMULv2i32_indexed
    1584166U,	// FMULv2i64_indexed
    2108454U,	// FMULv4f16
    2632742U,	// FMULv4f32
    2108454U,	// FMULv4i16_indexed
    2632742U,	// FMULv4i32_indexed
    3157030U,	// FMULv8f16
    3157030U,	// FMULv8i16_indexed
    34096991U,	// FNEGDr
    34096991U,	// FNEGHr
    34096991U,	// FNEGSr
    1058655U,	// FNEGv2f32
    1582943U,	// FNEGv2f64
    2107231U,	// FNEGv4f16
    2631519U,	// FNEGv4f32
    3155807U,	// FNEGv8f16
    34096833U,	// FNMADDDrrr
    34096833U,	// FNMADDHrrr
    34096833U,	// FNMADDSrrr
    34096545U,	// FNMSUBDrrr
    34096545U,	// FNMSUBHrrr
    34096545U,	// FNMSUBSrrr
    34098220U,	// FNMULDrr
    34098220U,	// FNMULHrr
    34098220U,	// FNMULSrr
    34096910U,	// FRECPEv1f16
    34096910U,	// FRECPEv1i32
    34096910U,	// FRECPEv1i64
    1058574U,	// FRECPEv2f32
    1582862U,	// FRECPEv2f64
    2107150U,	// FRECPEv4f16
    2631438U,	// FRECPEv4f32
    3155726U,	// FRECPEv8f16
    34098999U,	// FRECPS16
    34098999U,	// FRECPS32
    34098999U,	// FRECPS64
    1060663U,	// FRECPSv2f32
    1584951U,	// FRECPSv2f64
    2109239U,	// FRECPSv4f16
    2633527U,	// FRECPSv4f32
    3157815U,	// FRECPSv8f16
    34099600U,	// FRECPXv1f16
    34099600U,	// FRECPXv1i32
    34099600U,	// FRECPXv1i64
    34095773U,	// FRINTADr
    34095773U,	// FRINTAHr
    34095773U,	// FRINTASr
    1057437U,	// FRINTAv2f32
    1581725U,	// FRINTAv2f64
    2106013U,	// FRINTAv4f16
    2630301U,	// FRINTAv4f32
    3154589U,	// FRINTAv8f16
    34097751U,	// FRINTIDr
    34097751U,	// FRINTIHr
    34097751U,	// FRINTISr
    1059415U,	// FRINTIv2f32
    1583703U,	// FRINTIv2f64
    2107991U,	// FRINTIv4f16
    2632279U,	// FRINTIv4f32
    3156567U,	// FRINTIv8f16
    34098311U,	// FRINTMDr
    34098311U,	// FRINTMHr
    34098311U,	// FRINTMSr
    1059975U,	// FRINTMv2f32
    1584263U,	// FRINTMv2f64
    2108551U,	// FRINTMv4f16
    2632839U,	// FRINTMv4f32
    3157127U,	// FRINTMv8f16
    34098414U,	// FRINTNDr
    34098414U,	// FRINTNHr
    34098414U,	// FRINTNSr
    1060078U,	// FRINTNv2f32
    1584366U,	// FRINTNv2f64
    2108654U,	// FRINTNv4f16
    2632942U,	// FRINTNv4f32
    3157230U,	// FRINTNv8f16
    34098611U,	// FRINTPDr
    34098611U,	// FRINTPHr
    34098611U,	// FRINTPSr
    1060275U,	// FRINTPv2f32
    1584563U,	// FRINTPv2f64
    2108851U,	// FRINTPv4f16
    2633139U,	// FRINTPv4f32
    3157427U,	// FRINTPv8f16
    34099608U,	// FRINTXDr
    34099608U,	// FRINTXHr
    34099608U,	// FRINTXSr
    1061272U,	// FRINTXv2f32
    1585560U,	// FRINTXv2f64
    2109848U,	// FRINTXv4f16
    2634136U,	// FRINTXv4f32
    3158424U,	// FRINTXv8f16
    34099679U,	// FRINTZDr
    34099679U,	// FRINTZHr
    34099679U,	// FRINTZSr
    1061343U,	// FRINTZv2f32
    1585631U,	// FRINTZv2f64
    2109919U,	// FRINTZv4f16
    2634207U,	// FRINTZv4f32
    3158495U,	// FRINTZv8f16
    34096947U,	// FRSQRTEv1f16
    34096947U,	// FRSQRTEv1i32
    34096947U,	// FRSQRTEv1i64
    1058611U,	// FRSQRTEv2f32
    1582899U,	// FRSQRTEv2f64
    2107187U,	// FRSQRTEv4f16
    2631475U,	// FRSQRTEv4f32
    3155763U,	// FRSQRTEv8f16
    34099020U,	// FRSQRTS16
    34099020U,	// FRSQRTS32
    34099020U,	// FRSQRTS64
    1060684U,	// FRSQRTSv2f32
    1584972U,	// FRSQRTSv2f64
    2109260U,	// FRSQRTSv4f16
    2633548U,	// FRSQRTSv4f32
    3157836U,	// FRSQRTSv8f16
    34099123U,	// FSQRTDr
    34099123U,	// FSQRTHr
    34099123U,	// FSQRTSr
    1060787U,	// FSQRTv2f32
    1585075U,	// FSQRTv2f64
    2109363U,	// FSQRTv4f16
    2633651U,	// FSQRTv4f32
    3157939U,	// FSQRTv8f16
    34096518U,	// FSUBDrr
    34096518U,	// FSUBHrr
    34096518U,	// FSUBSrr
    1058182U,	// FSUBv2f32
    1582470U,	// FSUBv2f64
    2106758U,	// FSUBv4f16
    2631046U,	// FSUBv4f32
    3155334U,	// FSUBv8f16
    616694487U,	// GLD1B_D_IMM_REAL
    214041303U,	// GLD1B_D_REAL
    214041303U,	// GLD1B_D_SXTW_REAL
    214041303U,	// GLD1B_D_UXTW_REAL
    650257111U,	// GLD1B_S_IMM_REAL
    214049495U,	// GLD1B_S_SXTW_REAL
    214049495U,	// GLD1B_S_UXTW_REAL
    616695327U,	// GLD1D_IMM_REAL
    214042143U,	// GLD1D_REAL
    214042143U,	// GLD1D_SCALED_REAL
    214042143U,	// GLD1D_SXTW_REAL
    214042143U,	// GLD1D_SXTW_SCALED_REAL
    214042143U,	// GLD1D_UXTW_REAL
    214042143U,	// GLD1D_UXTW_SCALED_REAL
    616695674U,	// GLD1H_D_IMM_REAL
    214042490U,	// GLD1H_D_REAL
    214042490U,	// GLD1H_D_SCALED_REAL
    214042490U,	// GLD1H_D_SXTW_REAL
    214042490U,	// GLD1H_D_SXTW_SCALED_REAL
    214042490U,	// GLD1H_D_UXTW_REAL
    214042490U,	// GLD1H_D_UXTW_SCALED_REAL
    650258298U,	// GLD1H_S_IMM_REAL
    214050682U,	// GLD1H_S_SXTW_REAL
    214050682U,	// GLD1H_S_SXTW_SCALED_REAL
    214050682U,	// GLD1H_S_UXTW_REAL
    214050682U,	// GLD1H_S_UXTW_SCALED_REAL
    616695094U,	// GLD1SB_D_IMM_REAL
    214041910U,	// GLD1SB_D_REAL
    214041910U,	// GLD1SB_D_SXTW_REAL
    214041910U,	// GLD1SB_D_UXTW_REAL
    650257718U,	// GLD1SB_S_IMM_REAL
    214050102U,	// GLD1SB_S_SXTW_REAL
    214050102U,	// GLD1SB_S_UXTW_REAL
    616696280U,	// GLD1SH_D_IMM_REAL
    214043096U,	// GLD1SH_D_REAL
    214043096U,	// GLD1SH_D_SCALED_REAL
    214043096U,	// GLD1SH_D_SXTW_REAL
    214043096U,	// GLD1SH_D_SXTW_SCALED_REAL
    214043096U,	// GLD1SH_D_UXTW_REAL
    214043096U,	// GLD1SH_D_UXTW_SCALED_REAL
    650258904U,	// GLD1SH_S_IMM_REAL
    214051288U,	// GLD1SH_S_SXTW_REAL
    214051288U,	// GLD1SH_S_SXTW_SCALED_REAL
    214051288U,	// GLD1SH_S_UXTW_REAL
    214051288U,	// GLD1SH_S_UXTW_SCALED_REAL
    616698128U,	// GLD1SW_D_IMM_REAL
    214044944U,	// GLD1SW_D_REAL
    214044944U,	// GLD1SW_D_SCALED_REAL
    214044944U,	// GLD1SW_D_SXTW_REAL
    214044944U,	// GLD1SW_D_SXTW_SCALED_REAL
    214044944U,	// GLD1SW_D_UXTW_REAL
    214044944U,	// GLD1SW_D_UXTW_SCALED_REAL
    616697982U,	// GLD1W_D_IMM_REAL
    214044798U,	// GLD1W_D_REAL
    214044798U,	// GLD1W_D_SCALED_REAL
    214044798U,	// GLD1W_D_SXTW_REAL
    214044798U,	// GLD1W_D_SXTW_SCALED_REAL
    214044798U,	// GLD1W_D_UXTW_REAL
    214044798U,	// GLD1W_D_UXTW_SCALED_REAL
    650260606U,	// GLD1W_IMM_REAL
    214052990U,	// GLD1W_SXTW_REAL
    214052990U,	// GLD1W_SXTW_SCALED_REAL
    214052990U,	// GLD1W_UXTW_REAL
    214052990U,	// GLD1W_UXTW_SCALED_REAL
    616694493U,	// GLDFF1B_D_IMM_REAL
    214041309U,	// GLDFF1B_D_REAL
    214041309U,	// GLDFF1B_D_SXTW_REAL
    214041309U,	// GLDFF1B_D_UXTW_REAL
    650257117U,	// GLDFF1B_S_IMM_REAL
    214049501U,	// GLDFF1B_S_SXTW_REAL
    214049501U,	// GLDFF1B_S_UXTW_REAL
    616695333U,	// GLDFF1D_IMM_REAL
    214042149U,	// GLDFF1D_REAL
    214042149U,	// GLDFF1D_SCALED_REAL
    214042149U,	// GLDFF1D_SXTW_REAL
    214042149U,	// GLDFF1D_SXTW_SCALED_REAL
    214042149U,	// GLDFF1D_UXTW_REAL
    214042149U,	// GLDFF1D_UXTW_SCALED_REAL
    616695680U,	// GLDFF1H_D_IMM_REAL
    214042496U,	// GLDFF1H_D_REAL
    214042496U,	// GLDFF1H_D_SCALED_REAL
    214042496U,	// GLDFF1H_D_SXTW_REAL
    214042496U,	// GLDFF1H_D_SXTW_SCALED_REAL
    214042496U,	// GLDFF1H_D_UXTW_REAL
    214042496U,	// GLDFF1H_D_UXTW_SCALED_REAL
    650258304U,	// GLDFF1H_S_IMM_REAL
    214050688U,	// GLDFF1H_S_SXTW_REAL
    214050688U,	// GLDFF1H_S_SXTW_SCALED_REAL
    214050688U,	// GLDFF1H_S_UXTW_REAL
    214050688U,	// GLDFF1H_S_UXTW_SCALED_REAL
    616695101U,	// GLDFF1SB_D_IMM_REAL
    214041917U,	// GLDFF1SB_D_REAL
    214041917U,	// GLDFF1SB_D_SXTW_REAL
    214041917U,	// GLDFF1SB_D_UXTW_REAL
    650257725U,	// GLDFF1SB_S_IMM_REAL
    214050109U,	// GLDFF1SB_S_SXTW_REAL
    214050109U,	// GLDFF1SB_S_UXTW_REAL
    616696287U,	// GLDFF1SH_D_IMM_REAL
    214043103U,	// GLDFF1SH_D_REAL
    214043103U,	// GLDFF1SH_D_SCALED_REAL
    214043103U,	// GLDFF1SH_D_SXTW_REAL
    214043103U,	// GLDFF1SH_D_SXTW_SCALED_REAL
    214043103U,	// GLDFF1SH_D_UXTW_REAL
    214043103U,	// GLDFF1SH_D_UXTW_SCALED_REAL
    650258911U,	// GLDFF1SH_S_IMM_REAL
    214051295U,	// GLDFF1SH_S_SXTW_REAL
    214051295U,	// GLDFF1SH_S_SXTW_SCALED_REAL
    214051295U,	// GLDFF1SH_S_UXTW_REAL
    214051295U,	// GLDFF1SH_S_UXTW_SCALED_REAL
    616698135U,	// GLDFF1SW_D_IMM_REAL
    214044951U,	// GLDFF1SW_D_REAL
    214044951U,	// GLDFF1SW_D_SCALED_REAL
    214044951U,	// GLDFF1SW_D_SXTW_REAL
    214044951U,	// GLDFF1SW_D_SXTW_SCALED_REAL
    214044951U,	// GLDFF1SW_D_UXTW_REAL
    214044951U,	// GLDFF1SW_D_UXTW_SCALED_REAL
    616697988U,	// GLDFF1W_D_IMM_REAL
    214044804U,	// GLDFF1W_D_REAL
    214044804U,	// GLDFF1W_D_SCALED_REAL
    214044804U,	// GLDFF1W_D_SXTW_REAL
    214044804U,	// GLDFF1W_D_SXTW_SCALED_REAL
    214044804U,	// GLDFF1W_D_UXTW_REAL
    214044804U,	// GLDFF1W_D_UXTW_SCALED_REAL
    650260612U,	// GLDFF1W_IMM_REAL
    214052996U,	// GLDFF1W_SXTW_REAL
    214052996U,	// GLDFF1W_SXTW_SCALED_REAL
    214052996U,	// GLDFF1W_UXTW_REAL
    214052996U,	// GLDFF1W_UXTW_SCALED_REAL
    151452U,	// HINT
    77707U,	// HLT
    75285U,	// HVC
    111186299U,	// INDEX_II_B
    111194491U,	// INDEX_II_D
    111202683U,	// INDEX_II_H
    111210875U,	// INDEX_II_S
    111186299U,	// INDEX_IR_B
    111194491U,	// INDEX_IR_D
    111202683U,	// INDEX_IR_H
    111210875U,	// INDEX_IR_S
    111186299U,	// INDEX_RI_B
    111194491U,	// INDEX_RI_D
    111202683U,	// INDEX_RI_H
    111210875U,	// INDEX_RI_S
    111186299U,	// INDEX_RR_B
    111194491U,	// INDEX_RR_D
    111202683U,	// INDEX_RR_H
    111210875U,	// INDEX_RR_S
    684224298U,	// INSvi16gpr
    717778730U,	// INSvi16lane
    684748586U,	// INSvi32gpr
    718303018U,	// INSvi32lane
    683175722U,	// INSvi64gpr
    716730154U,	// INSvi64lane
    685272874U,	// INSvi8gpr
    718827306U,	// INSvi8lane
    116058U,	// ISB
    214065879U,	// LD1B
    214041303U,	// LD1B_D
    214041303U,	// LD1B_D_IMM_REAL
    214074071U,	// LD1B_H
    214074071U,	// LD1B_H_IMM_REAL
    214065879U,	// LD1B_IMM_REAL
    214049495U,	// LD1B_S
    214049495U,	// LD1B_S_IMM_REAL
    214042143U,	// LD1D
    214042143U,	// LD1D_IMM_REAL
    172053U,	// LD1Fourv16b
    14860309U,	// LD1Fourv16b_POST
    188437U,	// LD1Fourv1d
    15400981U,	// LD1Fourv1d_POST
    204821U,	// LD1Fourv2d
    14893077U,	// LD1Fourv2d_POST
    221205U,	// LD1Fourv2s
    15433749U,	// LD1Fourv2s_POST
    237589U,	// LD1Fourv4h
    15450133U,	// LD1Fourv4h_POST
    253973U,	// LD1Fourv4s
    14942229U,	// LD1Fourv4s_POST
    270357U,	// LD1Fourv8b
    15482901U,	// LD1Fourv8b_POST
    286741U,	// LD1Fourv8h
    14974997U,	// LD1Fourv8h_POST
    214075258U,	// LD1H
    214042490U,	// LD1H_D
    214042490U,	// LD1H_D_IMM_REAL
    214075258U,	// LD1H_IMM_REAL
    214050682U,	// LD1H_S
    214050682U,	// LD1H_S_IMM_REAL
    172053U,	// LD1Onev16b
    15908885U,	// LD1Onev16b_POST
    188437U,	// LD1Onev1d
    16449557U,	// LD1Onev1d_POST
    204821U,	// LD1Onev2d
    15941653U,	// LD1Onev2d_POST
    221205U,	// LD1Onev2s
    16482325U,	// LD1Onev2s_POST
    237589U,	// LD1Onev4h
    16498709U,	// LD1Onev4h_POST
    253973U,	// LD1Onev4s
    15990805U,	// LD1Onev4s_POST
    270357U,	// LD1Onev8b
    16531477U,	// LD1Onev8b_POST
    286741U,	// LD1Onev8h
    16023573U,	// LD1Onev8h_POST
    214041779U,	// LD1RB_D_IMM
    214074547U,	// LD1RB_H_IMM
    214066355U,	// LD1RB_IMM
    214049971U,	// LD1RB_S_IMM
    214042348U,	// LD1RD_IMM
    214042965U,	// LD1RH_D_IMM
    214075733U,	// LD1RH_IMM
    214051157U,	// LD1RH_S_IMM
    214066347U,	// LD1RQ_B
    214066347U,	// LD1RQ_B_IMM
    214042340U,	// LD1RQ_D
    214042340U,	// LD1RQ_D_IMM
    214075725U,	// LD1RQ_H
    214075725U,	// LD1RQ_H_IMM
    214053121U,	// LD1RQ_W
    214053121U,	// LD1RQ_W_IMM
    214041951U,	// LD1RSB_D_IMM
    214074719U,	// LD1RSB_H_IMM
    214050143U,	// LD1RSB_S_IMM
    214043137U,	// LD1RSH_D_IMM
    214051329U,	// LD1RSH_S_IMM
    214044976U,	// LD1RSW_IMM
    214044937U,	// LD1RW_D_IMM
    214053129U,	// LD1RW_IMM
    175617U,	// LD1Rv16b
    16961025U,	// LD1Rv16b_POST
    192001U,	// LD1Rv1d
    16453121U,	// LD1Rv1d_POST
    208385U,	// LD1Rv2d
    16469505U,	// LD1Rv2d_POST
    224769U,	// LD1Rv2s
    17534465U,	// LD1Rv2s_POST
    241153U,	// LD1Rv4h
    18075137U,	// LD1Rv4h_POST
    257537U,	// LD1Rv4s
    17567233U,	// LD1Rv4s_POST
    273921U,	// LD1Rv8b
    17059329U,	// LD1Rv8b_POST
    290305U,	// LD1Rv8h
    18124289U,	// LD1Rv8h_POST
    214041910U,	// LD1SB_D
    214041910U,	// LD1SB_D_IMM_REAL
    214074678U,	// LD1SB_H
    214074678U,	// LD1SB_H_IMM_REAL
    214050102U,	// LD1SB_S
    214050102U,	// LD1SB_S_IMM_REAL
    214043096U,	// LD1SH_D
    214043096U,	// LD1SH_D_IMM_REAL
    214051288U,	// LD1SH_S
    214051288U,	// LD1SH_S_IMM_REAL
    214044944U,	// LD1SW_D
    214044944U,	// LD1SW_D_IMM_REAL
    172053U,	// LD1Threev16b
    18530325U,	// LD1Threev16b_POST
    188437U,	// LD1Threev1d
    19070997U,	// LD1Threev1d_POST
    204821U,	// LD1Threev2d
    18563093U,	// LD1Threev2d_POST
    221205U,	// LD1Threev2s
    19103765U,	// LD1Threev2s_POST
    237589U,	// LD1Threev4h
    19120149U,	// LD1Threev4h_POST
    253973U,	// LD1Threev4s
    18612245U,	// LD1Threev4s_POST
    270357U,	// LD1Threev8b
    19152917U,	// LD1Threev8b_POST
    286741U,	// LD1Threev8h
    18645013U,	// LD1Threev8h_POST
    172053U,	// LD1Twov16b
    15384597U,	// LD1Twov16b_POST
    188437U,	// LD1Twov1d
    15925269U,	// LD1Twov1d_POST
    204821U,	// LD1Twov2d
    15417365U,	// LD1Twov2d_POST
    221205U,	// LD1Twov2s
    15958037U,	// LD1Twov2s_POST
    237589U,	// LD1Twov4h
    15974421U,	// LD1Twov4h_POST
    253973U,	// LD1Twov4s
    15466517U,	// LD1Twov4s_POST
    270357U,	// LD1Twov8b
    16007189U,	// LD1Twov8b_POST
    286741U,	// LD1Twov8h
    15499285U,	// LD1Twov8h_POST
    214052990U,	// LD1W
    214044798U,	// LD1W_D
    214044798U,	// LD1W_D_IMM_REAL
    214052990U,	// LD1W_IMM_REAL
    19701781U,	// LD1i16
    20234261U,	// LD1i16_POST
    19718165U,	// LD1i32
    20774933U,	// LD1i32_POST
    19734549U,	// LD1i64
    21315605U,	// LD1i64_POST
    19750933U,	// LD1i8
    21856277U,	// LD1i8_POST
    214065931U,	// LD2B
    214065931U,	// LD2B_IMM
    214042187U,	// LD2D
    214042187U,	// LD2D_IMM
    214075310U,	// LD2H
    214075310U,	// LD2H_IMM
    175623U,	// LD2Rv16b
    18009607U,	// LD2Rv16b_POST
    192007U,	// LD2Rv1d
    15928839U,	// LD2Rv1d_POST
    208391U,	// LD2Rv2d
    15945223U,	// LD2Rv2d_POST
    224775U,	// LD2Rv2s
    16485895U,	// LD2Rv2s_POST
    241159U,	// LD2Rv4h
    17550855U,	// LD2Rv4h_POST
    257543U,	// LD2Rv4s
    16518663U,	// LD2Rv4s_POST
    273927U,	// LD2Rv8b
    18107911U,	// LD2Rv8b_POST
    290311U,	// LD2Rv8h
    17600007U,	// LD2Rv8h_POST
    172115U,	// LD2Twov16b
    15384659U,	// LD2Twov16b_POST
    204883U,	// LD2Twov2d
    15417427U,	// LD2Twov2d_POST
    221267U,	// LD2Twov2s
    15958099U,	// LD2Twov2s_POST
    237651U,	// LD2Twov4h
    15974483U,	// LD2Twov4h_POST
    254035U,	// LD2Twov4s
    15466579U,	// LD2Twov4s_POST
    270419U,	// LD2Twov8b
    16007251U,	// LD2Twov8b_POST
    286803U,	// LD2Twov8h
    15499347U,	// LD2Twov8h_POST
    214053042U,	// LD2W
    214053042U,	// LD2W_IMM
    19701843U,	// LD2i16
    20758611U,	// LD2i16_POST
    19718227U,	// LD2i32
    21299283U,	// LD2i32_POST
    19734611U,	// LD2i64
    22364243U,	// LD2i64_POST
    19750995U,	// LD2i8
    20283475U,	// LD2i8_POST
    214065943U,	// LD3B
    214065943U,	// LD3B_IMM
    214042199U,	// LD3D
    214042199U,	// LD3D_IMM
    214075322U,	// LD3H
    214075322U,	// LD3H_IMM
    175629U,	// LD3Rv16b
    22728205U,	// LD3Rv16b_POST
    192013U,	// LD3Rv1d
    19074573U,	// LD3Rv1d_POST
    208397U,	// LD3Rv2d
    19090957U,	// LD3Rv2d_POST
    224781U,	// LD3Rv2s
    23301645U,	// LD3Rv2s_POST
    241165U,	// LD3Rv4h
    23842317U,	// LD3Rv4h_POST
    257549U,	// LD3Rv4s
    23334413U,	// LD3Rv4s_POST
    273933U,	// LD3Rv8b
    22826509U,	// LD3Rv8b_POST
    290317U,	// LD3Rv8h
    23891469U,	// LD3Rv8h_POST
    172485U,	// LD3Threev16b
    18530757U,	// LD3Threev16b_POST
    205253U,	// LD3Threev2d
    18563525U,	// LD3Threev2d_POST
    221637U,	// LD3Threev2s
    19104197U,	// LD3Threev2s_POST
    238021U,	// LD3Threev4h
    19120581U,	// LD3Threev4h_POST
    254405U,	// LD3Threev4s
    18612677U,	// LD3Threev4s_POST
    270789U,	// LD3Threev8b
    19153349U,	// LD3Threev8b_POST
    287173U,	// LD3Threev8h
    18645445U,	// LD3Threev8h_POST
    214053054U,	// LD3W
    214053054U,	// LD3W_IMM
    19702213U,	// LD3i16
    24428997U,	// LD3i16_POST
    19718597U,	// LD3i32
    24969669U,	// LD3i32_POST
    19734981U,	// LD3i64
    25510341U,	// LD3i64_POST
    19751365U,	// LD3i8
    26051013U,	// LD3i8_POST
    214065955U,	// LD4B
    214065955U,	// LD4B_IMM
    214042211U,	// LD4D
    214042211U,	// LD4D_IMM
    172509U,	// LD4Fourv16b
    14860765U,	// LD4Fourv16b_POST
    205277U,	// LD4Fourv2d
    14893533U,	// LD4Fourv2d_POST
    221661U,	// LD4Fourv2s
    15434205U,	// LD4Fourv2s_POST
    238045U,	// LD4Fourv4h
    15450589U,	// LD4Fourv4h_POST
    254429U,	// LD4Fourv4s
    14942685U,	// LD4Fourv4s_POST
    270813U,	// LD4Fourv8b
    15483357U,	// LD4Fourv8b_POST
    287197U,	// LD4Fourv8h
    14975453U,	// LD4Fourv8h_POST
    214075334U,	// LD4H
    214075334U,	// LD4H_IMM
    175635U,	// LD4Rv16b
    17485331U,	// LD4Rv16b_POST
    192019U,	// LD4Rv1d
    15404563U,	// LD4Rv1d_POST
    208403U,	// LD4Rv2d
    15420947U,	// LD4Rv2d_POST
    224787U,	// LD4Rv2s
    15961619U,	// LD4Rv2s_POST
    241171U,	// LD4Rv4h
    16502291U,	// LD4Rv4h_POST
    257555U,	// LD4Rv4s
    15994387U,	// LD4Rv4s_POST
    273939U,	// LD4Rv8b
    17583635U,	// LD4Rv8b_POST
    290323U,	// LD4Rv8h
    16551443U,	// LD4Rv8h_POST
    214053066U,	// LD4W
    214053066U,	// LD4W_IMM
    19702237U,	// LD4i16
    21283293U,	// LD4i16_POST
    19718621U,	// LD4i32
    22348253U,	// LD4i32_POST
    19735005U,	// LD4i64
    26558941U,	// LD4i64_POST
    19751389U,	// LD4i8
    20808157U,	// LD4i8_POST
    738812719U,	// LDADDAB
    738813915U,	// LDADDAH
    738812880U,	// LDADDALB
    738814038U,	// LDADDALH
    738814590U,	// LDADDALW
    738814590U,	// LDADDALX
    738812437U,	// LDADDAW
    738812437U,	// LDADDAX
    738812845U,	// LDADDB
    738814024U,	// LDADDH
    738812980U,	// LDADDLB
    738814138U,	// LDADDLH
    738814760U,	// LDADDLW
    738814760U,	// LDADDLX
    738813583U,	// LDADDW
    738813583U,	// LDADDX
    60310766U,	// LDAPRB
    60311952U,	// LDAPRH
    60313203U,	// LDAPRW
    60313203U,	// LDAPRX
    60310714U,	// LDARB
    60311900U,	// LDARH
    60313113U,	// LDARW
    60313113U,	// LDARX
    34098635U,	// LDAXPW
    34098635U,	// LDAXPX
    60310808U,	// LDAXRB
    60311994U,	// LDAXRH
    60313265U,	// LDAXRW
    60313265U,	// LDAXRX
    738812775U,	// LDCLRAB
    738813961U,	// LDCLRAH
    738812920U,	// LDCLRALB
    738814078U,	// LDCLRALH
    738814657U,	// LDCLRALW
    738814657U,	// LDCLRALX
    738812517U,	// LDCLRAW
    738812517U,	// LDCLRAX
    738813135U,	// LDCLRB
    738814321U,	// LDCLRH
    738813016U,	// LDCLRLB
    738814174U,	// LDCLRLH
    738814943U,	// LDCLRLW
    738814943U,	// LDCLRLX
    738815571U,	// LDCLRW
    738815571U,	// LDCLRX
    738812784U,	// LDEORAB
    738813970U,	// LDEORAH
    738812930U,	// LDEORALB
    738814088U,	// LDEORALH
    738814666U,	// LDEORALW
    738814666U,	// LDEORALX
    738812525U,	// LDEORAW
    738812525U,	// LDEORAX
    738813158U,	// LDEORB
    738814344U,	// LDEORH
    738813025U,	// LDEORLB
    738814183U,	// LDEORLH
    738814951U,	// LDEORLW
    738814951U,	// LDEORLX
    738815591U,	// LDEORW
    738815591U,	// LDEORX
    214041309U,	// LDFF1B_D_REAL
    214074077U,	// LDFF1B_H_REAL
    214065885U,	// LDFF1B_REAL
    214049501U,	// LDFF1B_S_REAL
    214042149U,	// LDFF1D_REAL
    214042496U,	// LDFF1H_D_REAL
    214075264U,	// LDFF1H_REAL
    214050688U,	// LDFF1H_S_REAL
    214041917U,	// LDFF1SB_D_REAL
    214074685U,	// LDFF1SB_H_REAL
    214050109U,	// LDFF1SB_S_REAL
    214043103U,	// LDFF1SH_D_REAL
    214051295U,	// LDFF1SH_S_REAL
    214044951U,	// LDFF1SW_D_REAL
    214044804U,	// LDFF1W_D_REAL
    214052996U,	// LDFF1W_REAL
    60310721U,	// LDLARB
    60311907U,	// LDLARH
    60313119U,	// LDLARW
    60313119U,	// LDLARX
    214041317U,	// LDNF1B_D_IMM_REAL
    214074085U,	// LDNF1B_H_IMM_REAL
    214065893U,	// LDNF1B_IMM_REAL
    214049509U,	// LDNF1B_S_IMM_REAL
    214042157U,	// LDNF1D_IMM_REAL
    214042504U,	// LDNF1H_D_IMM_REAL
    214075272U,	// LDNF1H_IMM_REAL
    214050696U,	// LDNF1H_S_IMM_REAL
    214041926U,	// LDNF1SB_D_IMM_REAL
    214074694U,	// LDNF1SB_H_IMM_REAL
    214050118U,	// LDNF1SB_S_IMM_REAL
    214043112U,	// LDNF1SH_D_IMM_REAL
    214051304U,	// LDNF1SH_S_IMM_REAL
    214044960U,	// LDNF1SW_D_IMM_REAL
    214044812U,	// LDNF1W_D_IMM_REAL
    214053004U,	// LDNF1W_IMM_REAL
    34098566U,	// LDNPDi
    34098566U,	// LDNPQi
    34098566U,	// LDNPSi
    34098566U,	// LDNPWi
    34098566U,	// LDNPXi
    214065901U,	// LDNT1B_ZRI
    214065901U,	// LDNT1B_ZRR
    214042165U,	// LDNT1D_ZRI
    214042165U,	// LDNT1D_ZRR
    214075280U,	// LDNT1H_ZRI
    214075280U,	// LDNT1H_ZRR
    214053012U,	// LDNT1W_ZRI
    214053012U,	// LDNT1W_ZRR
    34098498U,	// LDPDi
    201944386U,	// LDPDpost
    201944386U,	// LDPDpre
    34098498U,	// LDPQi
    201944386U,	// LDPQpost
    201944386U,	// LDPQpre
    34099497U,	// LDPSWi
    201945385U,	// LDPSWpost
    201945385U,	// LDPSWpre
    34098498U,	// LDPSi
    201944386U,	// LDPSpost
    201944386U,	// LDPSpre
    34098498U,	// LDPWi
    201944386U,	// LDPWpost
    201944386U,	// LDPWpre
    34098498U,	// LDPXi
    201944386U,	// LDPXpost
    201944386U,	// LDPXpre
    60310004U,	// LDRAAindexed
    228155892U,	// LDRAAwriteback
    60310361U,	// LDRABindexed
    228156249U,	// LDRABwriteback
    228156617U,	// LDRBBpost
    228156617U,	// LDRBBpre
    60310729U,	// LDRBBroW
    60310729U,	// LDRBBroX
    60310729U,	// LDRBBui
    228159023U,	// LDRBpost
    228159023U,	// LDRBpre
    60313135U,	// LDRBroW
    60313135U,	// LDRBroX
    60313135U,	// LDRBui
    268979759U,	// LDRDl
    228159023U,	// LDRDpost
    228159023U,	// LDRDpre
    60313135U,	// LDRDroW
    60313135U,	// LDRDroX
    60313135U,	// LDRDui
    228157803U,	// LDRHHpost
    228157803U,	// LDRHHpre
    60311915U,	// LDRHHroW
    60311915U,	// LDRHHroX
    60311915U,	// LDRHHui
    228159023U,	// LDRHpost
    228159023U,	// LDRHpre
    60313135U,	// LDRHroW
    60313135U,	// LDRHroX
    60313135U,	// LDRHui
    268979759U,	// LDRQl
    228159023U,	// LDRQpost
    228159023U,	// LDRQpre
    60313135U,	// LDRQroW
    60313135U,	// LDRQroX
    60313135U,	// LDRQui
    228156775U,	// LDRSBWpost
    228156775U,	// LDRSBWpre
    60310887U,	// LDRSBWroW
    60310887U,	// LDRSBWroX
    60310887U,	// LDRSBWui
    228156775U,	// LDRSBXpost
    228156775U,	// LDRSBXpre
    60310887U,	// LDRSBXroW
    60310887U,	// LDRSBXroX
    60310887U,	// LDRSBXui
    228157961U,	// LDRSHWpost
    228157961U,	// LDRSHWpre
    60312073U,	// LDRSHWroW
    60312073U,	// LDRSHWroX
    60312073U,	// LDRSHWui
    228157961U,	// LDRSHXpost
    228157961U,	// LDRSHXpre
    60312073U,	// LDRSHXroW
    60312073U,	// LDRSHXroX
    60312073U,	// LDRSHXui
    268980536U,	// LDRSWl
    228159800U,	// LDRSWpost
    228159800U,	// LDRSWpre
    60313912U,	// LDRSWroW
    60313912U,	// LDRSWroX
    60313912U,	// LDRSWui
    268979759U,	// LDRSl
    228159023U,	// LDRSpost
    228159023U,	// LDRSpre
    60313135U,	// LDRSroW
    60313135U,	// LDRSroX
    60313135U,	// LDRSui
    268979759U,	// LDRWl
    228159023U,	// LDRWpost
    228159023U,	// LDRWpre
    60313135U,	// LDRWroW
    60313135U,	// LDRWroX
    60313135U,	// LDRWui
    268979759U,	// LDRXl
    228159023U,	// LDRXpost
    228159023U,	// LDRXpre
    60313135U,	// LDRXroW
    60313135U,	// LDRXroX
    60313135U,	// LDRXui
    372271U,	// LDR_PXI
    372271U,	// LDR_ZXI
    738812800U,	// LDSETAB
    738813986U,	// LDSETAH
    738812948U,	// LDSETALB
    738814106U,	// LDSETALH
    738814682U,	// LDSETALW
    738814682U,	// LDSETALX
    738812565U,	// LDSETAW
    738812565U,	// LDSETAX
    738813310U,	// LDSETB
    738814496U,	// LDSETH
    738813041U,	// LDSETLB
    738814199U,	// LDSETLH
    738814999U,	// LDSETLW
    738814999U,	// LDSETLX
    738815856U,	// LDSETW
    738815856U,	// LDSETX
    738812809U,	// LDSMAXAB
    738813995U,	// LDSMAXAH
    738812958U,	// LDSMAXALB
    738814116U,	// LDSMAXALH
    738814691U,	// LDSMAXALW
    738814691U,	// LDSMAXALX
    738812581U,	// LDSMAXAW
    738812581U,	// LDSMAXAX
    738813367U,	// LDSMAXB
    738814504U,	// LDSMAXH
    738813050U,	// LDSMAXLB
    738814241U,	// LDSMAXLH
    738815046U,	// LDSMAXLW
    738815046U,	// LDSMAXLX
    738816349U,	// LDSMAXW
    738816349U,	// LDSMAXX
    738812728U,	// LDSMINAB
    738813934U,	// LDSMINAH
    738812890U,	// LDSMINALB
    738814048U,	// LDSMINALH
    738814622U,	// LDSMINALW
    738814622U,	// LDSMINALX
    738812486U,	// LDSMINAW
    738812486U,	// LDSMINAX
    738813075U,	// LDSMINB
    738814261U,	// LDSMINH
    738812989U,	// LDSMINLB
    738814147U,	// LDSMINLH
    738814905U,	// LDSMINLW
    738814905U,	// LDSMINLX
    738815148U,	// LDSMINW
    738815148U,	// LDSMINX
    60310774U,	// LDTRBi
    60311960U,	// LDTRHi
    60310894U,	// LDTRSBWi
    60310894U,	// LDTRSBXi
    60312080U,	// LDTRSHWi
    60312080U,	// LDTRSHXi
    60313919U,	// LDTRSWi
    60313230U,	// LDTRWi
    60313230U,	// LDTRXi
    738812819U,	// LDUMAXAB
    738814005U,	// LDUMAXAH
    738812969U,	// LDUMAXALB
    738814127U,	// LDUMAXALH
    738814701U,	// LDUMAXALW
    738814701U,	// LDUMAXALX
    738812590U,	// LDUMAXAW
    738812590U,	// LDUMAXAX
    738813376U,	// LDUMAXB
    738814513U,	// LDUMAXH
    738813060U,	// LDUMAXLB
    738814251U,	// LDUMAXLH
    738815055U,	// LDUMAXLW
    738815055U,	// LDUMAXLX
    738816357U,	// LDUMAXW
    738816357U,	// LDUMAXX
    738812738U,	// LDUMINAB
    738813944U,	// LDUMINAH
    738812901U,	// LDUMINALB
    738814059U,	// LDUMINALH
    738814632U,	// LDUMINALW
    738814632U,	// LDUMINALX
    738812495U,	// LDUMINAW
    738812495U,	// LDUMINAX
    738813084U,	// LDUMINB
    738814270U,	// LDUMINH
    738812999U,	// LDUMINLB
    738814157U,	// LDUMINLH
    738814914U,	// LDUMINLW
    738814914U,	// LDUMINLX
    738815156U,	// LDUMINW
    738815156U,	// LDUMINX
    60310794U,	// LDURBBi
    60313253U,	// LDURBi
    60313253U,	// LDURDi
    60311980U,	// LDURHHi
    60313253U,	// LDURHi
    60313253U,	// LDURQi
    60310902U,	// LDURSBWi
    60310902U,	// LDURSBXi
    60312088U,	// LDURSHWi
    60312088U,	// LDURSHXi
    60313927U,	// LDURSWi
    60313253U,	// LDURSi
    60313253U,	// LDURWi
    60313253U,	// LDURXi
    34098663U,	// LDXPW
    34098663U,	// LDXPX
    60310816U,	// LDXRB
    60312002U,	// LDXRH
    60313272U,	// LDXRW
    60313272U,	// LDXRX
    0U,	// LOADgot
    34098174U,	// LSLVWr
    34098174U,	// LSLVXr
    140545022U,	// LSL_ZPmZ_B
    140553214U,	// LSL_ZPmZ_D
    140561406U,	// LSL_ZPmZ_H
    140569598U,	// LSL_ZPmZ_S
    104893438U,	// LSL_ZZI_B
    105425918U,	// LSL_ZZI_D
    105958398U,	// LSL_ZZI_H
    106490878U,	// LSL_ZZI_S
    34098820U,	// LSRVWr
    34098820U,	// LSRVXr
    140545668U,	// LSR_ZPmZ_B
    140553860U,	// LSR_ZPmZ_D
    140562052U,	// LSR_ZPmZ_H
    140570244U,	// LSR_ZPmZ_S
    104894084U,	// LSR_ZZI_B
    105426564U,	// LSR_ZZI_D
    105959044U,	// LSR_ZZI_H
    106491524U,	// LSR_ZZI_S
    34096827U,	// MADDWrrr
    34096827U,	// MADDXrrr
    67134011U,	// MLAv16i8
    68182587U,	// MLAv2i32
    68182587U,	// MLAv2i32_indexed
    69231163U,	// MLAv4i16
    69231163U,	// MLAv4i16_indexed
    69755451U,	// MLAv4i32
    69755451U,	// MLAv4i32_indexed
    70279739U,	// MLAv8i16
    70279739U,	// MLAv8i16_indexed
    70804027U,	// MLAv8i8
    67137309U,	// MLSv16i8
    68185885U,	// MLSv2i32
    68185885U,	// MLSv2i32_indexed
    69234461U,	// MLSv4i16
    69234461U,	// MLSv4i16_indexed
    69758749U,	// MLSv4i32
    69758749U,	// MLSv4i32_indexed
    70283037U,	// MLSv8i16
    70283037U,	// MLSv8i16_indexed
    70807325U,	// MLSv8i8
    772295263U,	// MOVID
    805317215U,	// MOVIv16b_ns
    773335647U,	// MOVIv2d_ns
    806365791U,	// MOVIv2i32
    806365791U,	// MOVIv2s_msl
    807414367U,	// MOVIv4i16
    807938655U,	// MOVIv4i32
    807938655U,	// MOVIv4s_msl
    808987231U,	// MOVIv8b_ns
    808462943U,	// MOVIv8i16
    235424362U,	// MOVKWi
    235424362U,	// MOVKXi
    805850406U,	// MOVNWi
    805850406U,	// MOVNXi
    805851623U,	// MOVZWi
    805851623U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    839405383U,	// MRS
    380553U,	// MSR
    388745U,	// MSRpstateImm1
    388745U,	// MSRpstateImm4
    34096539U,	// MSUBWrrr
    34096539U,	// MSUBXrrr
    11303U,	// MULv16i8
    1059879U,	// MULv2i32
    1059879U,	// MULv2i32_indexed
    2108455U,	// MULv4i16
    2108455U,	// MULv4i16_indexed
    2632743U,	// MULv4i32
    2632743U,	// MULv4i32_indexed
    3157031U,	// MULv8i16
    3157031U,	// MULv8i16_indexed
    3681319U,	// MULv8i8
    806365772U,	// MVNIv2i32
    806365772U,	// MVNIv2s_msl
    807414348U,	// MVNIv4i16
    807938636U,	// MVNIv4i32
    807938636U,	// MVNIv4s_msl
    808462924U,	// MVNIv8i16
    10080U,	// NEGv16i8
    34096992U,	// NEGv1i64
    1058656U,	// NEGv2i32
    1582944U,	// NEGv2i64
    2107232U,	// NEGv4i16
    2631520U,	// NEGv4i32
    3155808U,	// NEGv8i16
    3680096U,	// NEGv8i8
    12206U,	// NOTv16i8
    3682222U,	// NOTv8i8
    0U,	// ORNWrr
    34098409U,	// ORNWrs
    0U,	// ORNXrr
    34098409U,	// ORNXrs
    11497U,	// ORNv16i8
    3681513U,	// ORNv8i8
    34098810U,	// ORRWri
    0U,	// ORRWrr
    34098810U,	// ORRWrs
    34098810U,	// ORRXri
    0U,	// ORRXrr
    34098810U,	// ORRXrs
    105426554U,	// ORR_ZI
    140545658U,	// ORR_ZPmZ_B
    140553850U,	// ORR_ZPmZ_D
    140562042U,	// ORR_ZPmZ_H
    140570234U,	// ORR_ZPmZ_S
    105426554U,	// ORR_ZZZ
    11898U,	// ORRv16i8
    235957882U,	// ORRv2i32
    237006458U,	// ORRv4i16
    237530746U,	// ORRv4i32
    238055034U,	// ORRv8i16
    3681914U,	// ORRv8i8
    34095630U,	// PACDA
    34096038U,	// PACDB
    6832823U,	// PACDZA
    6833609U,	// PACDZB
    34095652U,	// PACGA
    34095659U,	// PACIA
    4754U,	// PACIA1716
    4885U,	// PACIASP
    4927U,	// PACIAZ
    34096066U,	// PACIB
    4774U,	// PACIB1716
    4901U,	// PACIBSP
    4941U,	// PACIBZ
    6832839U,	// PACIZA
    6833625U,	// PACIZB
    3154134U,	// PMULLv16i8
    899689380U,	// PMULLv1i64
    933241046U,	// PMULLv2i64
    3156900U,	// PMULLv8i8
    11315U,	// PMULv16i8
    3681331U,	// PMULv8i8
    699270076U,	// PRFB_D_PZI
    968229820U,	// PRFB_D_SCALED
    1001784252U,	// PRFB_D_SXTW_SCALED
    1035338684U,	// PRFB_D_UXTW_SCALED
    699794364U,	// PRFB_PRI
    1068893116U,	// PRFB_PRR
    700318652U,	// PRFB_S_PZI
    1102447548U,	// PRFB_S_SXTW_SCALED
    1136001980U,	// PRFB_S_UXTW_SCALED
    1169032921U,	// PRFD_D_PZI
    1203111641U,	// PRFD_D_SCALED
    1236666073U,	// PRFD_D_SXTW_SCALED
    1270220505U,	// PRFD_D_UXTW_SCALED
    699795161U,	// PRFD_PRI
    1303774937U,	// PRFD_PRR
    1170081497U,	// PRFD_S_PZI
    1337329369U,	// PRFD_S_SXTW_SCALED
    1370883801U,	// PRFD_S_UXTW_SCALED
    1403914320U,	// PRFH_D_PZI
    1437993040U,	// PRFH_D_SCALED
    1471547472U,	// PRFH_D_SXTW_SCALED
    1505101904U,	// PRFH_D_UXTW_SCALED
    699795536U,	// PRFH_PRI
    1538656336U,	// PRFH_PRR
    1404962896U,	// PRFH_S_PZI
    1572210768U,	// PRFH_S_SXTW_SCALED
    1605765200U,	// PRFH_S_UXTW_SCALED
    269364331U,	// PRFMl
    60697707U,	// PRFMroW
    60697707U,	// PRFMroX
    60697707U,	// PRFMui
    1639321851U,	// PRFS_PRR
    60697743U,	// PRFUMi
    1672351995U,	// PRFW_D_PZI
    1706430715U,	// PRFW_D_SCALED
    1739985147U,	// PRFW_D_SXTW_SCALED
    1773539579U,	// PRFW_D_UXTW_SCALED
    699797755U,	// PRFW_PRI
    1673400571U,	// PRFW_S_PZI
    1807094011U,	// PRFW_S_SXTW_SCALED
    1840648443U,	// PRFW_S_UXTW_SCALED
    29396745U,	// PTRUES_B
    29404937U,	// PTRUES_D
    29413129U,	// PTRUES_H
    29421321U,	// PTRUES_S
    29394757U,	// PTRUE_B
    29402949U,	// PTRUE_D
    29411141U,	// PTRUE_H
    29419333U,	// PTRUE_S
    1059998U,	// RADDHNv2i64_v2i32
    69755161U,	// RADDHNv2i64_v4i32
    2108574U,	// RADDHNv4i32_v4i16
    70279449U,	// RADDHNv4i32_v8i16
    67133721U,	// RADDHNv8i16_v16i8
    3681438U,	// RADDHNv8i16_v8i8
    34099077U,	// RBITWr
    34099077U,	// RBITXr
    12165U,	// RBITv16i8
    3682181U,	// RBITv8i8
    34098240U,	// RDVLI_XI
    6836075U,	// RET
    4850U,	// RETAA
    4857U,	// RETAB
    0U,	// RET_ReallyLR
    34095591U,	// REV16Wr
    34095591U,	// REV16Xr
    8679U,	// REV16v16i8
    3678695U,	// REV16v8i8
    34095180U,	// REV32Xr
    8268U,	// REV32v16i8
    2105420U,	// REV32v4i16
    3153996U,	// REV32v8i16
    3678284U,	// REV32v8i8
    8662U,	// REV64v16i8
    1057238U,	// REV64v2i32
    2105814U,	// REV64v4i16
    2630102U,	// REV64v4i32
    3154390U,	// REV64v8i16
    3678678U,	// REV64v8i8
    34099202U,	// REVWr
    34099202U,	// REVXr
    34098798U,	// RORVWr
    34098798U,	// RORVXr
    67133750U,	// RSHRNv16i8_shift
    1060057U,	// RSHRNv2i32_shift
    2108633U,	// RSHRNv4i16_shift
    69755190U,	// RSHRNv4i32_shift
    70279478U,	// RSHRNv8i16_shift
    3681497U,	// RSHRNv8i8_shift
    1059990U,	// RSUBHNv2i64_v2i32
    69755152U,	// RSUBHNv2i64_v4i32
    2108566U,	// RSUBHNv4i32_v4i16
    70279440U,	// RSUBHNv4i32_v8i16
    67133712U,	// RSUBHNv8i16_v16i8
    3681430U,	// RSUBHNv8i16_v8i8
    70279266U,	// SABALv16i8_v8i16
    68708976U,	// SABALv2i32_v2i64
    69757552U,	// SABALv4i16_v4i32
    68706402U,	// SABALv4i32_v2i64
    69754978U,	// SABALv8i16_v4i32
    70281840U,	// SABALv8i8_v8i16
    67133954U,	// SABAv16i8
    68182530U,	// SABAv2i32
    69231106U,	// SABAv4i16
    69755394U,	// SABAv4i32
    70279682U,	// SABAv8i16
    70803970U,	// SABAv8i8
    3154076U,	// SABDLv16i8_v8i16
    1583898U,	// SABDLv2i32_v2i64
    2632474U,	// SABDLv4i16_v4i32
    1581212U,	// SABDLv4i32_v2i64
    2629788U,	// SABDLv8i16_v4i32
    3156762U,	// SABDLv8i8_v8i16
    9845U,	// SABDv16i8
    1058421U,	// SABDv2i32
    2106997U,	// SABDv4i16
    2631285U,	// SABDv4i32
    3155573U,	// SABDv8i16
    3679861U,	// SABDv8i8
    70282567U,	// SADALPv16i8_v8i16
    97021255U,	// SADALPv2i32_v1i64
    68185415U,	// SADALPv4i16_v2i32
    68709703U,	// SADALPv4i32_v2i64
    69758279U,	// SADALPv8i16_v4i32
    69233991U,	// SADALPv8i8_v4i16
    3157335U,	// SADDLPv16i8_v8i16
    29896023U,	// SADDLPv2i32_v1i64
    1060183U,	// SADDLPv4i16_v2i32
    1584471U,	// SADDLPv4i32_v2i64
    2633047U,	// SADDLPv8i16_v4i32
    2108759U,	// SADDLPv8i8_v4i16
    544793U,	// SADDLVv16i8v
    544793U,	// SADDLVv4i16v
    544793U,	// SADDLVv4i32v
    544793U,	// SADDLVv8i16v
    544793U,	// SADDLVv8i8v
    3154092U,	// SADDLv16i8_v8i16
    1583936U,	// SADDLv2i32_v2i64
    2632512U,	// SADDLv4i16_v4i32
    1581228U,	// SADDLv4i32_v2i64
    2629804U,	// SADDLv8i16_v4i32
    3156800U,	// SADDLv8i8_v8i16
    3154357U,	// SADDWv16i8_v8i16
    1585389U,	// SADDWv2i32_v2i64
    2633965U,	// SADDWv4i16_v4i32
    1581493U,	// SADDWv4i32_v2i64
    2630069U,	// SADDWv8i16_v4i32
    3158253U,	// SADDWv8i8_v8i16
    34098923U,	// SBCSWr
    34098923U,	// SBCSXr
    34096624U,	// SBCWr
    34096624U,	// SBCXr
    34098271U,	// SBFMWri
    34098271U,	// SBFMXri
    34096977U,	// SCVTFDHr
    34096977U,	// SCVTFHDr
    34096977U,	// SCVTFHSr
    34096977U,	// SCVTFSHr
    34096977U,	// SCVTFSWDri
    34096977U,	// SCVTFSWHri
    34096977U,	// SCVTFSWSri
    34096977U,	// SCVTFSXDri
    34096977U,	// SCVTFSXHri
    34096977U,	// SCVTFSXSri
    34096977U,	// SCVTFUWDri
    34096977U,	// SCVTFUWHri
    34096977U,	// SCVTFUWSri
    34096977U,	// SCVTFUXDri
    34096977U,	// SCVTFUXHri
    34096977U,	// SCVTFUXSri
    34096977U,	// SCVTFd
    34096977U,	// SCVTFh
    34096977U,	// SCVTFs
    34096977U,	// SCVTFv1i16
    34096977U,	// SCVTFv1i32
    34096977U,	// SCVTFv1i64
    1058641U,	// SCVTFv2f32
    1582929U,	// SCVTFv2f64
    1058641U,	// SCVTFv2i32_shift
    1582929U,	// SCVTFv2i64_shift
    2107217U,	// SCVTFv4f16
    2631505U,	// SCVTFv4f32
    2107217U,	// SCVTFv4i16_shift
    2631505U,	// SCVTFv4i32_shift
    3155793U,	// SCVTFv8f16
    3155793U,	// SCVTFv8i16_shift
    34099213U,	// SDIVWr
    34099213U,	// SDIVXr
    69758882U,	// SDOTlanev16i8
    68186018U,	// SDOTlanev8i8
    69758882U,	// SDOTv16i8
    68186018U,	// SDOTv8i8
    201942505U,	// SHA1Crrr
    34097011U,	// SHA1Hrr
    201944152U,	// SHA1Mrrr
    201944372U,	// SHA1Prrr
    69754881U,	// SHA1SU0rrr
    69754936U,	// SHA1SU1rr
    201941080U,	// SHA256H2rrr
    201942994U,	// SHA256Hrrr
    69754890U,	// SHA256SU0rr
    69754945U,	// SHA256SU1rrr
    9900U,	// SHADDv16i8
    1058476U,	// SHADDv2i32
    2107052U,	// SHADDv4i16
    2631340U,	// SHADDv4i32
    3155628U,	// SHADDv8i16
    3679916U,	// SHADDv8i8
    3154109U,	// SHLLv16i8
    1584014U,	// SHLLv2i32
    2632590U,	// SHLLv4i16
    1581245U,	// SHLLv4i32
    2629821U,	// SHLLv8i16
    3156878U,	// SHLLv8i8
    34098007U,	// SHLd
    11095U,	// SHLv16i8_shift
    1059671U,	// SHLv2i32_shift
    1583959U,	// SHLv2i64_shift
    2108247U,	// SHLv4i16_shift
    2632535U,	// SHLv4i32_shift
    3156823U,	// SHLv8i16_shift
    3681111U,	// SHLv8i8_shift
    67133732U,	// SHRNv16i8_shift
    1060041U,	// SHRNv2i32_shift
    2108617U,	// SHRNv4i16_shift
    69755172U,	// SHRNv4i32_shift
    70279460U,	// SHRNv8i16_shift
    3681481U,	// SHRNv8i8_shift
    9612U,	// SHSUBv16i8
    1058188U,	// SHSUBv2i32
    2106764U,	// SHSUBv4i16
    2631052U,	// SHSUBv4i32
    3155340U,	// SHSUBv8i16
    3679628U,	// SHSUBv8i8
    201943623U,	// SLId
    67136071U,	// SLIv16i8_shift
    68184647U,	// SLIv2i32_shift
    68708935U,	// SLIv2i64_shift
    69233223U,	// SLIv4i16_shift
    69757511U,	// SLIv4i32_shift
    70281799U,	// SLIv8i16_shift
    70806087U,	// SLIv8i8_shift
    34097968U,	// SMADDLrrr
    11737U,	// SMAXPv16i8
    1060313U,	// SMAXPv2i32
    2108889U,	// SMAXPv4i16
    2633177U,	// SMAXPv4i32
    3157465U,	// SMAXPv8i16
    3681753U,	// SMAXPv8i8
    544880U,	// SMAXVv16i8v
    544880U,	// SMAXVv4i16v
    544880U,	// SMAXVv4i32v
    544880U,	// SMAXVv8i16v
    544880U,	// SMAXVv8i8v
    12639U,	// SMAXv16i8
    1061215U,	// SMAXv2i32
    2109791U,	// SMAXv4i16
    2634079U,	// SMAXv4i32
    3158367U,	// SMAXv8i16
    3682655U,	// SMAXv8i8
    75273U,	// SMC
    11667U,	// SMINPv16i8
    1060243U,	// SMINPv2i32
    2108819U,	// SMINPv4i16
    2633107U,	// SMINPv4i32
    3157395U,	// SMINPv8i16
    3681683U,	// SMINPv8i8
    544834U,	// SMINVv16i8v
    544834U,	// SMINVv4i16v
    544834U,	// SMINVv4i32v
    544834U,	// SMINVv8i16v
    544834U,	// SMINVv8i8v
    11438U,	// SMINv16i8
    1060014U,	// SMINv2i32
    2108590U,	// SMINv4i16
    2632878U,	// SMINv4i32
    3157166U,	// SMINv8i16
    3681454U,	// SMINv8i8
    70279292U,	// SMLALv16i8_v8i16
    68709008U,	// SMLALv2i32_indexed
    68709008U,	// SMLALv2i32_v2i64
    69757584U,	// SMLALv4i16_indexed
    69757584U,	// SMLALv4i16_v4i32
    68706428U,	// SMLALv4i32_indexed
    68706428U,	// SMLALv4i32_v2i64
    69755004U,	// SMLALv8i16_indexed
    69755004U,	// SMLALv8i16_v4i32
    70281872U,	// SMLALv8i8_v8i16
    70279416U,	// SMLSLv16i8_v8i16
    68709379U,	// SMLSLv2i32_indexed
    68709379U,	// SMLSLv2i32_v2i64
    69757955U,	// SMLSLv4i16_indexed
    69757955U,	// SMLSLv4i16_v4i32
    68706552U,	// SMLSLv4i32_indexed
    68706552U,	// SMLSLv4i32_v2i64
    69755128U,	// SMLSLv8i16_indexed
    69755128U,	// SMLSLv8i16_v4i32
    70282243U,	// SMLSLv8i8_v8i16
    544861U,	// SMOVvi16to32
    544861U,	// SMOVvi16to64
    544861U,	// SMOVvi32to64
    544861U,	// SMOVvi8to32
    544861U,	// SMOVvi8to64
    34097916U,	// SMSUBLrrr
    34097427U,	// SMULHrr
    3154142U,	// SMULLv16i8_v8i16
    1584043U,	// SMULLv2i32_indexed
    1584043U,	// SMULLv2i32_v2i64
    2632619U,	// SMULLv4i16_indexed
    2632619U,	// SMULLv4i16_v4i32
    1581278U,	// SMULLv4i32_indexed
    1581278U,	// SMULLv4i32_v2i64
    2629854U,	// SMULLv8i16_indexed
    2629854U,	// SMULLv8i16_v4i32
    3156907U,	// SMULLv8i8_v8i16
    11998U,	// SQABSv16i8
    34098910U,	// SQABSv1i16
    34098910U,	// SQABSv1i32
    34098910U,	// SQABSv1i64
    34098910U,	// SQABSv1i8
    1060574U,	// SQABSv2i32
    1584862U,	// SQABSv2i64
    2109150U,	// SQABSv4i16
    2633438U,	// SQABSv4i32
    3157726U,	// SQABSv8i16
    3682014U,	// SQABSv8i8
    9930U,	// SQADDv16i8
    34096842U,	// SQADDv1i16
    34096842U,	// SQADDv1i32
    34096842U,	// SQADDv1i64
    34096842U,	// SQADDv1i8
    1058506U,	// SQADDv2i32
    1582794U,	// SQADDv2i64
    2107082U,	// SQADDv4i16
    2631370U,	// SQADDv4i32
    3155658U,	// SQADDv8i16
    3679946U,	// SQADDv8i8
    201943687U,	// SQDMLALi16
    201943687U,	// SQDMLALi32
    201943687U,	// SQDMLALv1i32_indexed
    201943687U,	// SQDMLALv1i64_indexed
    68708999U,	// SQDMLALv2i32_indexed
    68708999U,	// SQDMLALv2i32_v2i64
    69757575U,	// SQDMLALv4i16_indexed
    69757575U,	// SQDMLALv4i16_v4i32
    68706418U,	// SQDMLALv4i32_indexed
    68706418U,	// SQDMLALv4i32_v2i64
    69754994U,	// SQDMLALv8i16_indexed
    69754994U,	// SQDMLALv8i16_v4i32
    201944058U,	// SQDMLSLi16
    201944058U,	// SQDMLSLi32
    201944058U,	// SQDMLSLv1i32_indexed
    201944058U,	// SQDMLSLv1i64_indexed
    68709370U,	// SQDMLSLv2i32_indexed
    68709370U,	// SQDMLSLv2i32_v2i64
    69757946U,	// SQDMLSLv4i16_indexed
    69757946U,	// SQDMLSLv4i16_v4i32
    68706542U,	// SQDMLSLv4i32_indexed
    68706542U,	// SQDMLSLv4i32_v2i64
    69755118U,	// SQDMLSLv8i16_indexed
    69755118U,	// SQDMLSLv8i16_v4i32
    34097408U,	// SQDMULHv1i16
    34097408U,	// SQDMULHv1i16_indexed
    34097408U,	// SQDMULHv1i32
    34097408U,	// SQDMULHv1i32_indexed
    1059072U,	// SQDMULHv2i32
    1059072U,	// SQDMULHv2i32_indexed
    2107648U,	// SQDMULHv4i16
    2107648U,	// SQDMULHv4i16_indexed
    2631936U,	// SQDMULHv4i32
    2631936U,	// SQDMULHv4i32_indexed
    3156224U,	// SQDMULHv8i16
    3156224U,	// SQDMULHv8i16_indexed
    34098075U,	// SQDMULLi16
    34098075U,	// SQDMULLi32
    34098075U,	// SQDMULLv1i32_indexed
    34098075U,	// SQDMULLv1i64_indexed
    1584027U,	// SQDMULLv2i32_indexed
    1584027U,	// SQDMULLv2i32_v2i64
    2632603U,	// SQDMULLv4i16_indexed
    2632603U,	// SQDMULLv4i16_v4i32
    1581260U,	// SQDMULLv4i32_indexed
    1581260U,	// SQDMULLv4i32_v2i64
    2629836U,	// SQDMULLv8i16_indexed
    2629836U,	// SQDMULLv8i16_v4i32
    10085U,	// SQNEGv16i8
    34096997U,	// SQNEGv1i16
    34096997U,	// SQNEGv1i32
    34096997U,	// SQNEGv1i64
    34096997U,	// SQNEGv1i8
    1058661U,	// SQNEGv2i32
    1582949U,	// SQNEGv2i64
    2107237U,	// SQNEGv4i16
    2631525U,	// SQNEGv4i32
    3155813U,	// SQNEGv8i16
    3680101U,	// SQNEGv8i8
    201943012U,	// SQRDMLAHi16_indexed
    201943012U,	// SQRDMLAHi32_indexed
    201943012U,	// SQRDMLAHv1i16
    201943012U,	// SQRDMLAHv1i32
    68184036U,	// SQRDMLAHv2i32
    68184036U,	// SQRDMLAHv2i32_indexed
    69232612U,	// SQRDMLAHv4i16
    69232612U,	// SQRDMLAHv4i16_indexed
    69756900U,	// SQRDMLAHv4i32
    69756900U,	// SQRDMLAHv4i32_indexed
    70281188U,	// SQRDMLAHv8i16
    70281188U,	// SQRDMLAHv8i16_indexed
    201943543U,	// SQRDMLSHi16_indexed
    201943543U,	// SQRDMLSHi32_indexed
    201943543U,	// SQRDMLSHv1i16
    201943543U,	// SQRDMLSHv1i32
    68184567U,	// SQRDMLSHv2i32
    68184567U,	// SQRDMLSHv2i32_indexed
    69233143U,	// SQRDMLSHv4i16
    69233143U,	// SQRDMLSHv4i16_indexed
    69757431U,	// SQRDMLSHv4i32
    69757431U,	// SQRDMLSHv4i32_indexed
    70281719U,	// SQRDMLSHv8i16
    70281719U,	// SQRDMLSHv8i16_indexed
    34097417U,	// SQRDMULHv1i16
    34097417U,	// SQRDMULHv1i16_indexed
    34097417U,	// SQRDMULHv1i32
    34097417U,	// SQRDMULHv1i32_indexed
    1059081U,	// SQRDMULHv2i32
    1059081U,	// SQRDMULHv2i32_indexed
    2107657U,	// SQRDMULHv4i16
    2107657U,	// SQRDMULHv4i16_indexed
    2631945U,	// SQRDMULHv4i32
    2631945U,	// SQRDMULHv4i32_indexed
    3156233U,	// SQRDMULHv8i16
    3156233U,	// SQRDMULHv8i16_indexed
    11107U,	// SQRSHLv16i8
    34098019U,	// SQRSHLv1i16
    34098019U,	// SQRSHLv1i32
    34098019U,	// SQRSHLv1i64
    34098019U,	// SQRSHLv1i8
    1059683U,	// SQRSHLv2i32
    1583971U,	// SQRSHLv2i64
    2108259U,	// SQRSHLv4i16
    2632547U,	// SQRSHLv4i32
    3156835U,	// SQRSHLv8i16
    3681123U,	// SQRSHLv8i8
    34098391U,	// SQRSHRNb
    34098391U,	// SQRSHRNh
    34098391U,	// SQRSHRNs
    67133748U,	// SQRSHRNv16i8_shift
    1060055U,	// SQRSHRNv2i32_shift
    2108631U,	// SQRSHRNv4i16_shift
    69755188U,	// SQRSHRNv4i32_shift
    70279476U,	// SQRSHRNv8i16_shift
    3681495U,	// SQRSHRNv8i8_shift
    34098452U,	// SQRSHRUNb
    34098452U,	// SQRSHRUNh
    34098452U,	// SQRSHRUNs
    67133808U,	// SQRSHRUNv16i8_shift
    1060116U,	// SQRSHRUNv2i32_shift
    2108692U,	// SQRSHRUNv4i16_shift
    69755248U,	// SQRSHRUNv4i32_shift
    70279536U,	// SQRSHRUNv8i16_shift
    3681556U,	// SQRSHRUNv8i8_shift
    34099156U,	// SQSHLUb
    34099156U,	// SQSHLUd
    34099156U,	// SQSHLUh
    34099156U,	// SQSHLUs
    12244U,	// SQSHLUv16i8_shift
    1060820U,	// SQSHLUv2i32_shift
    1585108U,	// SQSHLUv2i64_shift
    2109396U,	// SQSHLUv4i16_shift
    2633684U,	// SQSHLUv4i32_shift
    3157972U,	// SQSHLUv8i16_shift
    3682260U,	// SQSHLUv8i8_shift
    34098005U,	// SQSHLb
    34098005U,	// SQSHLd
    34098005U,	// SQSHLh
    34098005U,	// SQSHLs
    11093U,	// SQSHLv16i8
    11093U,	// SQSHLv16i8_shift
    34098005U,	// SQSHLv1i16
    34098005U,	// SQSHLv1i32
    34098005U,	// SQSHLv1i64
    34098005U,	// SQSHLv1i8
    1059669U,	// SQSHLv2i32
    1059669U,	// SQSHLv2i32_shift
    1583957U,	// SQSHLv2i64
    1583957U,	// SQSHLv2i64_shift
    2108245U,	// SQSHLv4i16
    2108245U,	// SQSHLv4i16_shift
    2632533U,	// SQSHLv4i32
    2632533U,	// SQSHLv4i32_shift
    3156821U,	// SQSHLv8i16
    3156821U,	// SQSHLv8i16_shift
    3681109U,	// SQSHLv8i8
    3681109U,	// SQSHLv8i8_shift
    34098375U,	// SQSHRNb
    34098375U,	// SQSHRNh
    34098375U,	// SQSHRNs
    67133730U,	// SQSHRNv16i8_shift
    1060039U,	// SQSHRNv2i32_shift
    2108615U,	// SQSHRNv4i16_shift
    69755170U,	// SQSHRNv4i32_shift
    70279458U,	// SQSHRNv8i16_shift
    3681479U,	// SQSHRNv8i8_shift
    34098443U,	// SQSHRUNb
    34098443U,	// SQSHRUNh
    34098443U,	// SQSHRUNs
    67133798U,	// SQSHRUNv16i8_shift
    1060107U,	// SQSHRUNv2i32_shift
    2108683U,	// SQSHRUNv4i16_shift
    69755238U,	// SQSHRUNv4i32_shift
    70279526U,	// SQSHRUNv8i16_shift
    3681547U,	// SQSHRUNv8i8_shift
    9641U,	// SQSUBv16i8
    34096553U,	// SQSUBv1i16
    34096553U,	// SQSUBv1i32
    34096553U,	// SQSUBv1i64
    34096553U,	// SQSUBv1i8
    1058217U,	// SQSUBv2i32
    1582505U,	// SQSUBv2i64
    2106793U,	// SQSUBv4i16
    2631081U,	// SQSUBv4i32
    3155369U,	// SQSUBv8i16
    3679657U,	// SQSUBv8i8
    67133782U,	// SQXTNv16i8
    34098429U,	// SQXTNv1i16
    34098429U,	// SQXTNv1i32
    34098429U,	// SQXTNv1i8
    1060093U,	// SQXTNv2i32
    2108669U,	// SQXTNv4i16
    69755222U,	// SQXTNv4i32
    70279510U,	// SQXTNv8i16
    3681533U,	// SQXTNv8i8
    67133819U,	// SQXTUNv16i8
    34098462U,	// SQXTUNv1i16
    34098462U,	// SQXTUNv1i32
    34098462U,	// SQXTUNv1i8
    1060126U,	// SQXTUNv2i32
    2108702U,	// SQXTUNv4i16
    69755259U,	// SQXTUNv4i32
    70279547U,	// SQXTUNv8i16
    3681566U,	// SQXTUNv8i8
    9884U,	// SRHADDv16i8
    1058460U,	// SRHADDv2i32
    2107036U,	// SRHADDv4i16
    2631324U,	// SRHADDv4i32
    3155612U,	// SRHADDv8i16
    3679900U,	// SRHADDv8i8
    201943634U,	// SRId
    67136082U,	// SRIv16i8_shift
    68184658U,	// SRIv2i32_shift
    68708946U,	// SRIv2i64_shift
    69233234U,	// SRIv4i16_shift
    69757522U,	// SRIv4i32_shift
    70281810U,	// SRIv8i16_shift
    70806098U,	// SRIv8i8_shift
    11123U,	// SRSHLv16i8
    34098035U,	// SRSHLv1i64
    1059699U,	// SRSHLv2i32
    1583987U,	// SRSHLv2i64
    2108275U,	// SRSHLv4i16
    2632563U,	// SRSHLv4i32
    3156851U,	// SRSHLv8i16
    3681139U,	// SRSHLv8i8
    34098740U,	// SRSHRd
    11828U,	// SRSHRv16i8_shift
    1060404U,	// SRSHRv2i32_shift
    1584692U,	// SRSHRv2i64_shift
    2108980U,	// SRSHRv4i16_shift
    2633268U,	// SRSHRv4i32_shift
    3157556U,	// SRSHRv8i16_shift
    3681844U,	// SRSHRv8i8_shift
    201941621U,	// SRSRAd
    67134069U,	// SRSRAv16i8_shift
    68182645U,	// SRSRAv2i32_shift
    68706933U,	// SRSRAv2i64_shift
    69231221U,	// SRSRAv4i16_shift
    69755509U,	// SRSRAv4i32_shift
    70279797U,	// SRSRAv8i16_shift
    70804085U,	// SRSRAv8i8_shift
    3154108U,	// SSHLLv16i8_shift
    1584013U,	// SSHLLv2i32_shift
    2632589U,	// SSHLLv4i16_shift
    1581244U,	// SSHLLv4i32_shift
    2629820U,	// SSHLLv8i16_shift
    3156877U,	// SSHLLv8i8_shift
    11137U,	// SSHLv16i8
    34098049U,	// SSHLv1i64
    1059713U,	// SSHLv2i32
    1584001U,	// SSHLv2i64
    2108289U,	// SSHLv4i16
    2632577U,	// SSHLv4i32
    3156865U,	// SSHLv8i16
    3681153U,	// SSHLv8i8
    34098754U,	// SSHRd
    11842U,	// SSHRv16i8_shift
    1060418U,	// SSHRv2i32_shift
    1584706U,	// SSHRv2i64_shift
    2108994U,	// SSHRv4i16_shift
    2633282U,	// SSHRv4i32_shift
    3157570U,	// SSHRv8i16_shift
    3681858U,	// SSHRv8i8_shift
    201941635U,	// SSRAd
    67134083U,	// SSRAv16i8_shift
    68182659U,	// SSRAv2i32_shift
    68706947U,	// SSRAv2i64_shift
    69231235U,	// SSRAv4i16_shift
    69755523U,	// SSRAv4i32_shift
    70279811U,	// SSRAv8i16_shift
    70804099U,	// SSRAv8i8_shift
    228197117U,	// SST1B_D
    630850301U,	// SST1B_D_IMM
    228197117U,	// SST1B_D_SXTW
    228197117U,	// SST1B_D_UXTW
    664412925U,	// SST1B_S_IMM
    228205309U,	// SST1B_S_SXTW
    228205309U,	// SST1B_S_UXTW
    228197957U,	// SST1D
    630851141U,	// SST1D_IMM
    228197957U,	// SST1D_SCALED
    228197957U,	// SST1D_SXTW
    228197957U,	// SST1D_SXTW_SCALED
    228197957U,	// SST1D_UXTW
    228197957U,	// SST1D_UXTW_SCALED
    228198304U,	// SST1H_D
    630851488U,	// SST1H_D_IMM
    228198304U,	// SST1H_D_SCALED
    228198304U,	// SST1H_D_SXTW
    228198304U,	// SST1H_D_SXTW_SCALED
    228198304U,	// SST1H_D_UXTW
    228198304U,	// SST1H_D_UXTW_SCALED
    664414112U,	// SST1H_S_IMM
    228206496U,	// SST1H_S_SXTW
    228206496U,	// SST1H_S_SXTW_SCALED
    228206496U,	// SST1H_S_UXTW
    228206496U,	// SST1H_S_UXTW_SCALED
    228200612U,	// SST1W_D
    630853796U,	// SST1W_D_IMM
    228200612U,	// SST1W_D_SCALED
    228200612U,	// SST1W_D_SXTW
    228200612U,	// SST1W_D_SXTW_SCALED
    228200612U,	// SST1W_D_UXTW
    228200612U,	// SST1W_D_UXTW_SCALED
    664416420U,	// SST1W_IMM
    228208804U,	// SST1W_SXTW
    228208804U,	// SST1W_SXTW_SCALED
    228208804U,	// SST1W_UXTW
    228208804U,	// SST1W_UXTW_SCALED
    3154060U,	// SSUBLv16i8_v8i16
    1583884U,	// SSUBLv2i32_v2i64
    2632460U,	// SSUBLv4i16_v4i32
    1581196U,	// SSUBLv4i32_v2i64
    2629772U,	// SSUBLv8i16_v4i32
    3156748U,	// SSUBLv8i8_v8i16
    3154341U,	// SSUBWv16i8_v8i16
    1585366U,	// SSUBWv2i32_v2i64
    2633942U,	// SSUBWv4i16_v4i32
    1581477U,	// SSUBWv4i32_v2i64
    2630053U,	// SSUBWv8i16_v4i32
    3158230U,	// SSUBWv8i8_v8i16
    228221693U,	// ST1B
    228197117U,	// ST1B_D
    228197117U,	// ST1B_D_IMM
    228229885U,	// ST1B_H
    228229885U,	// ST1B_H_IMM
    228221693U,	// ST1B_IMM
    228205309U,	// ST1B_S
    228205309U,	// ST1B_S_IMM
    228197957U,	// ST1D
    228197957U,	// ST1D_IMM
    172083U,	// ST1Fourv16b
    14860339U,	// ST1Fourv16b_POST
    188467U,	// ST1Fourv1d
    15401011U,	// ST1Fourv1d_POST
    204851U,	// ST1Fourv2d
    14893107U,	// ST1Fourv2d_POST
    221235U,	// ST1Fourv2s
    15433779U,	// ST1Fourv2s_POST
    237619U,	// ST1Fourv4h
    15450163U,	// ST1Fourv4h_POST
    254003U,	// ST1Fourv4s
    14942259U,	// ST1Fourv4s_POST
    270387U,	// ST1Fourv8b
    15482931U,	// ST1Fourv8b_POST
    286771U,	// ST1Fourv8h
    14975027U,	// ST1Fourv8h_POST
    228231072U,	// ST1H
    228198304U,	// ST1H_D
    228198304U,	// ST1H_D_IMM
    228231072U,	// ST1H_IMM
    228206496U,	// ST1H_S
    228206496U,	// ST1H_S_IMM
    172083U,	// ST1Onev16b
    15908915U,	// ST1Onev16b_POST
    188467U,	// ST1Onev1d
    16449587U,	// ST1Onev1d_POST
    204851U,	// ST1Onev2d
    15941683U,	// ST1Onev2d_POST
    221235U,	// ST1Onev2s
    16482355U,	// ST1Onev2s_POST
    237619U,	// ST1Onev4h
    16498739U,	// ST1Onev4h_POST
    254003U,	// ST1Onev4s
    15990835U,	// ST1Onev4s_POST
    270387U,	// ST1Onev8b
    16531507U,	// ST1Onev8b_POST
    286771U,	// ST1Onev8h
    16023603U,	// ST1Onev8h_POST
    172083U,	// ST1Threev16b
    18530355U,	// ST1Threev16b_POST
    188467U,	// ST1Threev1d
    19071027U,	// ST1Threev1d_POST
    204851U,	// ST1Threev2d
    18563123U,	// ST1Threev2d_POST
    221235U,	// ST1Threev2s
    19103795U,	// ST1Threev2s_POST
    237619U,	// ST1Threev4h
    19120179U,	// ST1Threev4h_POST
    254003U,	// ST1Threev4s
    18612275U,	// ST1Threev4s_POST
    270387U,	// ST1Threev8b
    19152947U,	// ST1Threev8b_POST
    286771U,	// ST1Threev8h
    18645043U,	// ST1Threev8h_POST
    172083U,	// ST1Twov16b
    15384627U,	// ST1Twov16b_POST
    188467U,	// ST1Twov1d
    15925299U,	// ST1Twov1d_POST
    204851U,	// ST1Twov2d
    15417395U,	// ST1Twov2d_POST
    221235U,	// ST1Twov2s
    15958067U,	// ST1Twov2s_POST
    237619U,	// ST1Twov4h
    15974451U,	// ST1Twov4h_POST
    254003U,	// ST1Twov4s
    15466547U,	// ST1Twov4s_POST
    270387U,	// ST1Twov8b
    16007219U,	// ST1Twov8b_POST
    286771U,	// ST1Twov8h
    15499315U,	// ST1Twov8h_POST
    228208804U,	// ST1W
    228200612U,	// ST1W_D
    228200612U,	// ST1W_D_IMM
    228208804U,	// ST1W_IMM
    409651U,	// ST1i16
    1876205619U,	// ST1i16_POST
    417843U,	// ST1i32
    1909776435U,	// ST1i32_POST
    426035U,	// ST1i64
    1943347251U,	// ST1i64_POST
    434227U,	// ST1i8
    1976918067U,	// ST1i8_POST
    228221713U,	// ST2B
    228221713U,	// ST2B_IMM
    228197969U,	// ST2D
    228197969U,	// ST2D_IMM
    228231092U,	// ST2H
    228231092U,	// ST2H_IMM
    172448U,	// ST2Twov16b
    15384992U,	// ST2Twov16b_POST
    205216U,	// ST2Twov2d
    15417760U,	// ST2Twov2d_POST
    221600U,	// ST2Twov2s
    15958432U,	// ST2Twov2s_POST
    237984U,	// ST2Twov4h
    15974816U,	// ST2Twov4h_POST
    254368U,	// ST2Twov4s
    15466912U,	// ST2Twov4s_POST
    270752U,	// ST2Twov8b
    16007584U,	// ST2Twov8b_POST
    287136U,	// ST2Twov8h
    15499680U,	// ST2Twov8h_POST
    228208824U,	// ST2W
    228208824U,	// ST2W_IMM
    410016U,	// ST2i16
    1909760416U,	// ST2i16_POST
    418208U,	// ST2i32
    1943331232U,	// ST2i32_POST
    426400U,	// ST2i64
    2010456480U,	// ST2i64_POST
    434592U,	// ST2i8
    1876255136U,	// ST2i8_POST
    228221725U,	// ST3B
    228221725U,	// ST3B_IMM
    228197981U,	// ST3D
    228197981U,	// ST3D_IMM
    228231104U,	// ST3H
    228231104U,	// ST3H_IMM
    172497U,	// ST3Threev16b
    18530769U,	// ST3Threev16b_POST
    205265U,	// ST3Threev2d
    18563537U,	// ST3Threev2d_POST
    221649U,	// ST3Threev2s
    19104209U,	// ST3Threev2s_POST
    238033U,	// ST3Threev4h
    19120593U,	// ST3Threev4h_POST
    254417U,	// ST3Threev4s
    18612689U,	// ST3Threev4s_POST
    270801U,	// ST3Threev8b
    19153361U,	// ST3Threev8b_POST
    287185U,	// ST3Threev8h
    18645457U,	// ST3Threev8h_POST
    228208836U,	// ST3W
    228208836U,	// ST3W_IMM
    410065U,	// ST3i16
    2043978193U,	// ST3i16_POST
    418257U,	// ST3i32
    2077549009U,	// ST3i32_POST
    426449U,	// ST3i64
    2111119825U,	// ST3i64_POST
    434641U,	// ST3i8
    2144690641U,	// ST3i8_POST
    228221737U,	// ST4B
    228221737U,	// ST4B_IMM
    228197993U,	// ST4D
    228197993U,	// ST4D_IMM
    172514U,	// ST4Fourv16b
    14860770U,	// ST4Fourv16b_POST
    205282U,	// ST4Fourv2d
    14893538U,	// ST4Fourv2d_POST
    221666U,	// ST4Fourv2s
    15434210U,	// ST4Fourv2s_POST
    238050U,	// ST4Fourv4h
    15450594U,	// ST4Fourv4h_POST
    254434U,	// ST4Fourv4s
    14942690U,	// ST4Fourv4s_POST
    270818U,	// ST4Fourv8b
    15483362U,	// ST4Fourv8b_POST
    287202U,	// ST4Fourv8h
    14975458U,	// ST4Fourv8h_POST
    228231116U,	// ST4H
    228231116U,	// ST4H_IMM
    228208848U,	// ST4W
    228208848U,	// ST4W_IMM
    410082U,	// ST4i16
    1943314914U,	// ST4i16_POST
    418274U,	// ST4i32
    2010440162U,	// ST4i32_POST
    426466U,	// ST4i64
    2178228706U,	// ST4i64_POST
    434658U,	// ST4i8
    1909809634U,	// ST4i8_POST
    60310743U,	// STLLRB
    60311929U,	// STLLRH
    60313178U,	// STLLRW
    60313178U,	// STLLRX
    60310751U,	// STLRB
    60311937U,	// STLRH
    60313185U,	// STLRW
    60313185U,	// STLRX
    34098669U,	// STLXPW
    34098669U,	// STLXPX
    34096423U,	// STLXRB
    34097609U,	// STLXRH
    34098878U,	// STLXRW
    34098878U,	// STLXRX
    34098593U,	// STNPDi
    34098593U,	// STNPQi
    34098593U,	// STNPSi
    34098593U,	// STNPWi
    34098593U,	// STNPXi
    228221685U,	// STNT1B_ZRI
    228221685U,	// STNT1B_ZRR
    228197949U,	// STNT1D_ZRI
    228197949U,	// STNT1D_ZRR
    228231064U,	// STNT1H_ZRI
    228231064U,	// STNT1H_ZRR
    228208796U,	// STNT1W_ZRI
    228208796U,	// STNT1W_ZRR
    34098619U,	// STPDi
    201944507U,	// STPDpost
    201944507U,	// STPDpre
    34098619U,	// STPQi
    201944507U,	// STPQpost
    201944507U,	// STPQpre
    34098619U,	// STPSi
    201944507U,	// STPSpost
    201944507U,	// STPSpre
    34098619U,	// STPWi
    201944507U,	// STPWpost
    201944507U,	// STPWpre
    34098619U,	// STPXi
    201944507U,	// STPXpost
    201944507U,	// STPXpre
    228156669U,	// STRBBpost
    228156669U,	// STRBBpre
    60310781U,	// STRBBroW
    60310781U,	// STRBBroX
    60310781U,	// STRBBui
    228159124U,	// STRBpost
    228159124U,	// STRBpre
    60313236U,	// STRBroW
    60313236U,	// STRBroX
    60313236U,	// STRBui
    228159124U,	// STRDpost
    228159124U,	// STRDpre
    60313236U,	// STRDroW
    60313236U,	// STRDroX
    60313236U,	// STRDui
    228157855U,	// STRHHpost
    228157855U,	// STRHHpre
    60311967U,	// STRHHroW
    60311967U,	// STRHHroX
    60311967U,	// STRHHui
    228159124U,	// STRHpost
    228159124U,	// STRHpre
    60313236U,	// STRHroW
    60313236U,	// STRHroX
    60313236U,	// STRHui
    228159124U,	// STRQpost
    228159124U,	// STRQpre
    60313236U,	// STRQroW
    60313236U,	// STRQroX
    60313236U,	// STRQui
    228159124U,	// STRSpost
    228159124U,	// STRSpre
    60313236U,	// STRSroW
    60313236U,	// STRSroX
    60313236U,	// STRSui
    228159124U,	// STRWpost
    228159124U,	// STRWpre
    60313236U,	// STRWroW
    60313236U,	// STRWroX
    60313236U,	// STRWui
    228159124U,	// STRXpost
    228159124U,	// STRXpre
    60313236U,	// STRXroW
    60313236U,	// STRXroX
    60313236U,	// STRXui
    372372U,	// STR_PXI
    372372U,	// STR_ZXI
    60310787U,	// STTRBi
    60311973U,	// STTRHi
    60313241U,	// STTRWi
    60313241U,	// STTRXi
    60310801U,	// STURBBi
    60313259U,	// STURBi
    60313259U,	// STURDi
    60311987U,	// STURHHi
    60313259U,	// STURHi
    60313259U,	// STURQi
    60313259U,	// STURSi
    60313259U,	// STURWi
    60313259U,	// STURXi
    34098676U,	// STXPW
    34098676U,	// STXPX
    34096431U,	// STXRB
    34097617U,	// STXRH
    34098885U,	// STXRW
    34098885U,	// STXRX
    1059991U,	// SUBHNv2i64_v2i32
    69755153U,	// SUBHNv2i64_v4i32
    2108567U,	// SUBHNv4i32_v4i16
    70279441U,	// SUBHNv4i32_v8i16
    67133713U,	// SUBHNv8i16_v16i8
    3681431U,	// SUBHNv8i16_v8i8
    34098917U,	// SUBSWri
    0U,	// SUBSWrr
    34098917U,	// SUBSWrs
    34098917U,	// SUBSWrx
    34098917U,	// SUBSXri
    0U,	// SUBSXrr
    34098917U,	// SUBSXrs
    34098917U,	// SUBSXrx
    34098917U,	// SUBSXrx64
    34096519U,	// SUBWri
    0U,	// SUBWrr
    34096519U,	// SUBWrs
    34096519U,	// SUBWrx
    34096519U,	// SUBXri
    0U,	// SUBXrr
    34096519U,	// SUBXrs
    34096519U,	// SUBXrx
    34096519U,	// SUBXrx64
    104891783U,	// SUB_ZI_B
    105424263U,	// SUB_ZI_D
    105956743U,	// SUB_ZI_H
    106489223U,	// SUB_ZI_S
    140543367U,	// SUB_ZPmZ_B
    140551559U,	// SUB_ZPmZ_D
    140559751U,	// SUB_ZPmZ_H
    140567943U,	// SUB_ZPmZ_S
    104891783U,	// SUB_ZZZ_B
    105424263U,	// SUB_ZZZ_D
    105956743U,	// SUB_ZZZ_H
    106489223U,	// SUB_ZZZ_S
    9607U,	// SUBv16i8
    34096519U,	// SUBv1i64
    1058183U,	// SUBv2i32
    1582471U,	// SUBv2i64
    2106759U,	// SUBv4i16
    2631047U,	// SUBv4i32
    3155335U,	// SUBv8i16
    3679623U,	// SUBv8i8
    67135185U,	// SUQADDv16i8
    201942737U,	// SUQADDv1i16
    201942737U,	// SUQADDv1i32
    201942737U,	// SUQADDv1i64
    201942737U,	// SUQADDv1i8
    68183761U,	// SUQADDv2i32
    68708049U,	// SUQADDv2i64
    69232337U,	// SUQADDv4i16
    69756625U,	// SUQADDv4i32
    70280913U,	// SUQADDv8i16
    70805201U,	// SUQADDv8i8
    75290U,	// SVC
    738812748U,	// SWPAB
    738813954U,	// SWPAH
    738812912U,	// SWPALB
    738814070U,	// SWPALH
    738814650U,	// SWPALW
    738814650U,	// SWPALX
    738812511U,	// SWPAW
    738812511U,	// SWPAX
    738813093U,	// SWPB
    738814279U,	// SWPH
    738813009U,	// SWPLB
    738814167U,	// SWPLH
    738814937U,	// SWPLW
    738814937U,	// SWPLX
    738815430U,	// SWPW
    738815430U,	// SWPX
    34098193U,	// SYSLxt
    2181582677U,	// SYSxt
    2214603511U,	// TBLv16i8Four
    2214603511U,	// TBLv16i8One
    2214603511U,	// TBLv16i8Three
    2214603511U,	// TBLv16i8Two
    2218273527U,	// TBLv8i8Four
    2218273527U,	// TBLv8i8One
    2218273527U,	// TBLv8i8Three
    2218273527U,	// TBLv8i8Two
    34099673U,	// TBNZW
    34099673U,	// TBNZX
    2248175981U,	// TBXv16i8Four
    2248175981U,	// TBXv16i8One
    2248175981U,	// TBXv16i8Three
    2248175981U,	// TBXv16i8Two
    2251845997U,	// TBXv8i8Four
    2251845997U,	// TBXv8i8One
    2251845997U,	// TBXv8i8Three
    2251845997U,	// TBXv8i8Two
    34099657U,	// TBZW
    34099657U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    6836717U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    8218U,	// TRN1v16i8
    1056794U,	// TRN1v2i32
    1581082U,	// TRN1v2i64
    2105370U,	// TRN1v4i16
    2629658U,	// TRN1v4i32
    3153946U,	// TRN1v8i16
    3678234U,	// TRN1v8i8
    8520U,	// TRN2v16i8
    1057096U,	// TRN2v2i32
    1581384U,	// TRN2v2i64
    2105672U,	// TRN2v4i16
    2629960U,	// TRN2v4i32
    3154248U,	// TRN2v8i16
    3678536U,	// TRN2v8i8
    70279274U,	// UABALv16i8_v8i16
    68708983U,	// UABALv2i32_v2i64
    69757559U,	// UABALv4i16_v4i32
    68706410U,	// UABALv4i32_v2i64
    69754986U,	// UABALv8i16_v4i32
    70281847U,	// UABALv8i8_v8i16
    67133960U,	// UABAv16i8
    68182536U,	// UABAv2i32
    69231112U,	// UABAv4i16
    69755400U,	// UABAv4i32
    70279688U,	// UABAv8i16
    70803976U,	// UABAv8i8
    3154084U,	// UABDLv16i8_v8i16
    1583905U,	// UABDLv2i32_v2i64
    2632481U,	// UABDLv4i16_v4i32
    1581220U,	// UABDLv4i32_v2i64
    2629796U,	// UABDLv8i16_v4i32
    3156769U,	// UABDLv8i8_v8i16
    9851U,	// UABDv16i8
    1058427U,	// UABDv2i32
    2107003U,	// UABDv4i16
    2631291U,	// UABDv4i32
    3155579U,	// UABDv8i16
    3679867U,	// UABDv8i8
    70282575U,	// UADALPv16i8_v8i16
    97021263U,	// UADALPv2i32_v1i64
    68185423U,	// UADALPv4i16_v2i32
    68709711U,	// UADALPv4i32_v2i64
    69758287U,	// UADALPv8i16_v4i32
    69233999U,	// UADALPv8i8_v4i16
    3157343U,	// UADDLPv16i8_v8i16
    29896031U,	// UADDLPv2i32_v1i64
    1060191U,	// UADDLPv4i16_v2i32
    1584479U,	// UADDLPv4i32_v2i64
    2633055U,	// UADDLPv8i16_v4i32
    2108767U,	// UADDLPv8i8_v4i16
    544801U,	// UADDLVv16i8v
    544801U,	// UADDLVv4i16v
    544801U,	// UADDLVv4i32v
    544801U,	// UADDLVv8i16v
    544801U,	// UADDLVv8i8v
    3154100U,	// UADDLv16i8_v8i16
    1583943U,	// UADDLv2i32_v2i64
    2632519U,	// UADDLv4i16_v4i32
    1581236U,	// UADDLv4i32_v2i64
    2629812U,	// UADDLv8i16_v4i32
    3156807U,	// UADDLv8i8_v8i16
    3154365U,	// UADDWv16i8_v8i16
    1585396U,	// UADDWv2i32_v2i64
    2633972U,	// UADDWv4i16_v4i32
    1581501U,	// UADDWv4i32_v2i64
    2630077U,	// UADDWv8i16_v4i32
    3158260U,	// UADDWv8i8_v8i16
    34098277U,	// UBFMWri
    34098277U,	// UBFMXri
    34096984U,	// UCVTFDHr
    34096984U,	// UCVTFHDr
    34096984U,	// UCVTFHSr
    34096984U,	// UCVTFSHr
    34096984U,	// UCVTFSWDri
    34096984U,	// UCVTFSWHri
    34096984U,	// UCVTFSWSri
    34096984U,	// UCVTFSXDri
    34096984U,	// UCVTFSXHri
    34096984U,	// UCVTFSXSri
    34096984U,	// UCVTFUWDri
    34096984U,	// UCVTFUWHri
    34096984U,	// UCVTFUWSri
    34096984U,	// UCVTFUXDri
    34096984U,	// UCVTFUXHri
    34096984U,	// UCVTFUXSri
    34096984U,	// UCVTFd
    34096984U,	// UCVTFh
    34096984U,	// UCVTFs
    34096984U,	// UCVTFv1i16
    34096984U,	// UCVTFv1i32
    34096984U,	// UCVTFv1i64
    1058648U,	// UCVTFv2f32
    1582936U,	// UCVTFv2f64
    1058648U,	// UCVTFv2i32_shift
    1582936U,	// UCVTFv2i64_shift
    2107224U,	// UCVTFv4f16
    2631512U,	// UCVTFv4f32
    2107224U,	// UCVTFv4i16_shift
    2631512U,	// UCVTFv4i32_shift
    3155800U,	// UCVTFv8f16
    3155800U,	// UCVTFv8i16_shift
    34099219U,	// UDIVWr
    34099219U,	// UDIVXr
    69758888U,	// UDOTlanev16i8
    68186024U,	// UDOTlanev8i8
    69758888U,	// UDOTv16i8
    68186024U,	// UDOTv8i8
    9907U,	// UHADDv16i8
    1058483U,	// UHADDv2i32
    2107059U,	// UHADDv4i16
    2631347U,	// UHADDv4i32
    3155635U,	// UHADDv8i16
    3679923U,	// UHADDv8i8
    9619U,	// UHSUBv16i8
    1058195U,	// UHSUBv2i32
    2106771U,	// UHSUBv4i16
    2631059U,	// UHSUBv4i32
    3155347U,	// UHSUBv8i16
    3679635U,	// UHSUBv8i8
    34097976U,	// UMADDLrrr
    11744U,	// UMAXPv16i8
    1060320U,	// UMAXPv2i32
    2108896U,	// UMAXPv4i16
    2633184U,	// UMAXPv4i32
    3157472U,	// UMAXPv8i16
    3681760U,	// UMAXPv8i8
    544887U,	// UMAXVv16i8v
    544887U,	// UMAXVv4i16v
    544887U,	// UMAXVv4i32v
    544887U,	// UMAXVv8i16v
    544887U,	// UMAXVv8i8v
    12647U,	// UMAXv16i8
    1061223U,	// UMAXv2i32
    2109799U,	// UMAXv4i16
    2634087U,	// UMAXv4i32
    3158375U,	// UMAXv8i16
    3682663U,	// UMAXv8i8
    11674U,	// UMINPv16i8
    1060250U,	// UMINPv2i32
    2108826U,	// UMINPv4i16
    2633114U,	// UMINPv4i32
    3157402U,	// UMINPv8i16
    3681690U,	// UMINPv8i8
    544841U,	// UMINVv16i8v
    544841U,	// UMINVv4i16v
    544841U,	// UMINVv4i32v
    544841U,	// UMINVv8i16v
    544841U,	// UMINVv8i8v
    11446U,	// UMINv16i8
    1060022U,	// UMINv2i32
    2108598U,	// UMINv4i16
    2632886U,	// UMINv4i32
    3157174U,	// UMINv8i16
    3681462U,	// UMINv8i8
    70279300U,	// UMLALv16i8_v8i16
    68709015U,	// UMLALv2i32_indexed
    68709015U,	// UMLALv2i32_v2i64
    69757591U,	// UMLALv4i16_indexed
    69757591U,	// UMLALv4i16_v4i32
    68706436U,	// UMLALv4i32_indexed
    68706436U,	// UMLALv4i32_v2i64
    69755012U,	// UMLALv8i16_indexed
    69755012U,	// UMLALv8i16_v4i32
    70281879U,	// UMLALv8i8_v8i16
    70279424U,	// UMLSLv16i8_v8i16
    68709386U,	// UMLSLv2i32_indexed
    68709386U,	// UMLSLv2i32_v2i64
    69757962U,	// UMLSLv4i16_indexed
    69757962U,	// UMLSLv4i16_v4i32
    68706560U,	// UMLSLv4i32_indexed
    68706560U,	// UMLSLv4i32_v2i64
    69755136U,	// UMLSLv8i16_indexed
    69755136U,	// UMLSLv8i16_v4i32
    70282250U,	// UMLSLv8i8_v8i16
    544867U,	// UMOVvi16
    544867U,	// UMOVvi32
    544867U,	// UMOVvi64
    544867U,	// UMOVvi8
    34097924U,	// UMSUBLrrr
    34097434U,	// UMULHrr
    3154150U,	// UMULLv16i8_v8i16
    1584050U,	// UMULLv2i32_indexed
    1584050U,	// UMULLv2i32_v2i64
    2632626U,	// UMULLv4i16_indexed
    2632626U,	// UMULLv4i16_v4i32
    1581286U,	// UMULLv4i32_indexed
    1581286U,	// UMULLv4i32_v2i64
    2629862U,	// UMULLv8i16_indexed
    2629862U,	// UMULLv8i16_v4i32
    3156914U,	// UMULLv8i8_v8i16
    9938U,	// UQADDv16i8
    34096850U,	// UQADDv1i16
    34096850U,	// UQADDv1i32
    34096850U,	// UQADDv1i64
    34096850U,	// UQADDv1i8
    1058514U,	// UQADDv2i32
    1582802U,	// UQADDv2i64
    2107090U,	// UQADDv4i16
    2631378U,	// UQADDv4i32
    3155666U,	// UQADDv8i16
    3679954U,	// UQADDv8i8
    11115U,	// UQRSHLv16i8
    34098027U,	// UQRSHLv1i16
    34098027U,	// UQRSHLv1i32
    34098027U,	// UQRSHLv1i64
    34098027U,	// UQRSHLv1i8
    1059691U,	// UQRSHLv2i32
    1583979U,	// UQRSHLv2i64
    2108267U,	// UQRSHLv4i16
    2632555U,	// UQRSHLv4i32
    3156843U,	// UQRSHLv8i16
    3681131U,	// UQRSHLv8i8
    34098400U,	// UQRSHRNb
    34098400U,	// UQRSHRNh
    34098400U,	// UQRSHRNs
    67133758U,	// UQRSHRNv16i8_shift
    1060064U,	// UQRSHRNv2i32_shift
    2108640U,	// UQRSHRNv4i16_shift
    69755198U,	// UQRSHRNv4i32_shift
    70279486U,	// UQRSHRNv8i16_shift
    3681504U,	// UQRSHRNv8i8_shift
    34098012U,	// UQSHLb
    34098012U,	// UQSHLd
    34098012U,	// UQSHLh
    34098012U,	// UQSHLs
    11100U,	// UQSHLv16i8
    11100U,	// UQSHLv16i8_shift
    34098012U,	// UQSHLv1i16
    34098012U,	// UQSHLv1i32
    34098012U,	// UQSHLv1i64
    34098012U,	// UQSHLv1i8
    1059676U,	// UQSHLv2i32
    1059676U,	// UQSHLv2i32_shift
    1583964U,	// UQSHLv2i64
    1583964U,	// UQSHLv2i64_shift
    2108252U,	// UQSHLv4i16
    2108252U,	// UQSHLv4i16_shift
    2632540U,	// UQSHLv4i32
    2632540U,	// UQSHLv4i32_shift
    3156828U,	// UQSHLv8i16
    3156828U,	// UQSHLv8i16_shift
    3681116U,	// UQSHLv8i8
    3681116U,	// UQSHLv8i8_shift
    34098383U,	// UQSHRNb
    34098383U,	// UQSHRNh
    34098383U,	// UQSHRNs
    67133739U,	// UQSHRNv16i8_shift
    1060047U,	// UQSHRNv2i32_shift
    2108623U,	// UQSHRNv4i16_shift
    69755179U,	// UQSHRNv4i32_shift
    70279467U,	// UQSHRNv8i16_shift
    3681487U,	// UQSHRNv8i8_shift
    9648U,	// UQSUBv16i8
    34096560U,	// UQSUBv1i16
    34096560U,	// UQSUBv1i32
    34096560U,	// UQSUBv1i64
    34096560U,	// UQSUBv1i8
    1058224U,	// UQSUBv2i32
    1582512U,	// UQSUBv2i64
    2106800U,	// UQSUBv4i16
    2631088U,	// UQSUBv4i32
    3155376U,	// UQSUBv8i16
    3679664U,	// UQSUBv8i8
    67133790U,	// UQXTNv16i8
    34098436U,	// UQXTNv1i16
    34098436U,	// UQXTNv1i32
    34098436U,	// UQXTNv1i8
    1060100U,	// UQXTNv2i32
    2108676U,	// UQXTNv4i16
    69755230U,	// UQXTNv4i32
    70279518U,	// UQXTNv8i16
    3681540U,	// UQXTNv8i8
    1058582U,	// URECPEv2i32
    2631446U,	// URECPEv4i32
    9892U,	// URHADDv16i8
    1058468U,	// URHADDv2i32
    2107044U,	// URHADDv4i16
    2631332U,	// URHADDv4i32
    3155620U,	// URHADDv8i16
    3679908U,	// URHADDv8i8
    11130U,	// URSHLv16i8
    34098042U,	// URSHLv1i64
    1059706U,	// URSHLv2i32
    1583994U,	// URSHLv2i64
    2108282U,	// URSHLv4i16
    2632570U,	// URSHLv4i32
    3156858U,	// URSHLv8i16
    3681146U,	// URSHLv8i8
    34098747U,	// URSHRd
    11835U,	// URSHRv16i8_shift
    1060411U,	// URSHRv2i32_shift
    1584699U,	// URSHRv2i64_shift
    2108987U,	// URSHRv4i16_shift
    2633275U,	// URSHRv4i32_shift
    3157563U,	// URSHRv8i16_shift
    3681851U,	// URSHRv8i8_shift
    1058620U,	// URSQRTEv2i32
    2631484U,	// URSQRTEv4i32
    201941628U,	// URSRAd
    67134076U,	// URSRAv16i8_shift
    68182652U,	// URSRAv2i32_shift
    68706940U,	// URSRAv2i64_shift
    69231228U,	// URSRAv4i16_shift
    69755516U,	// URSRAv4i32_shift
    70279804U,	// URSRAv8i16_shift
    70804092U,	// URSRAv8i8_shift
    3154116U,	// USHLLv16i8_shift
    1584020U,	// USHLLv2i32_shift
    2632596U,	// USHLLv4i16_shift
    1581252U,	// USHLLv4i32_shift
    2629828U,	// USHLLv8i16_shift
    3156884U,	// USHLLv8i8_shift
    11143U,	// USHLv16i8
    34098055U,	// USHLv1i64
    1059719U,	// USHLv2i32
    1584007U,	// USHLv2i64
    2108295U,	// USHLv4i16
    2632583U,	// USHLv4i32
    3156871U,	// USHLv8i16
    3681159U,	// USHLv8i8
    34098760U,	// USHRd
    11848U,	// USHRv16i8_shift
    1060424U,	// USHRv2i32_shift
    1584712U,	// USHRv2i64_shift
    2109000U,	// USHRv4i16_shift
    2633288U,	// USHRv4i32_shift
    3157576U,	// USHRv8i16_shift
    3681864U,	// USHRv8i8_shift
    67135177U,	// USQADDv16i8
    201942729U,	// USQADDv1i16
    201942729U,	// USQADDv1i32
    201942729U,	// USQADDv1i64
    201942729U,	// USQADDv1i8
    68183753U,	// USQADDv2i32
    68708041U,	// USQADDv2i64
    69232329U,	// USQADDv4i16
    69756617U,	// USQADDv4i32
    70280905U,	// USQADDv8i16
    70805193U,	// USQADDv8i8
    201941641U,	// USRAd
    67134089U,	// USRAv16i8_shift
    68182665U,	// USRAv2i32_shift
    68706953U,	// USRAv2i64_shift
    69231241U,	// USRAv4i16_shift
    69755529U,	// USRAv4i32_shift
    70279817U,	// USRAv8i16_shift
    70804105U,	// USRAv8i8_shift
    3154068U,	// USUBLv16i8_v8i16
    1583891U,	// USUBLv2i32_v2i64
    2632467U,	// USUBLv4i16_v4i32
    1581204U,	// USUBLv4i32_v2i64
    2629780U,	// USUBLv8i16_v4i32
    3156755U,	// USUBLv8i8_v8i16
    3154349U,	// USUBWv16i8_v8i16
    1585373U,	// USUBWv2i32_v2i64
    2633949U,	// USUBWv4i16_v4i32
    1581485U,	// USUBWv4i32_v2i64
    2630061U,	// USUBWv8i16_v4i32
    3158237U,	// USUBWv8i8_v8i16
    8230U,	// UZP1v16i8
    1056806U,	// UZP1v2i32
    1581094U,	// UZP1v2i64
    2105382U,	// UZP1v4i16
    2629670U,	// UZP1v4i32
    3153958U,	// UZP1v8i16
    3678246U,	// UZP1v8i8
    8595U,	// UZP2v16i8
    1057171U,	// UZP2v2i32
    1581459U,	// UZP2v2i64
    2105747U,	// UZP2v4i16
    2630035U,	// UZP2v4i32
    3154323U,	// UZP2v8i16
    3678611U,	// UZP2v8i8
    6833793U,	// XPACD
    6834746U,	// XPACI
    4863U,	// XPACLRI
    67133784U,	// XTNv16i8
    1060095U,	// XTNv2i32
    2108671U,	// XTNv4i16
    69755224U,	// XTNv4i32
    70279512U,	// XTNv8i16
    3681535U,	// XTNv8i8
    104890400U,	// ZIP1_PPP_B
    105422880U,	// ZIP1_PPP_D
    105955360U,	// ZIP1_PPP_H
    106487840U,	// ZIP1_PPP_S
    104890400U,	// ZIP1_ZZZ_B
    105422880U,	// ZIP1_ZZZ_D
    105955360U,	// ZIP1_ZZZ_H
    106487840U,	// ZIP1_ZZZ_S
    8224U,	// ZIP1v16i8
    1056800U,	// ZIP1v2i32
    1581088U,	// ZIP1v2i64
    2105376U,	// ZIP1v4i16
    2629664U,	// ZIP1v4i32
    3153952U,	// ZIP1v8i16
    3678240U,	// ZIP1v8i8
    104890765U,	// ZIP2_PPP_B
    105423245U,	// ZIP2_PPP_D
    105955725U,	// ZIP2_PPP_H
    106488205U,	// ZIP2_PPP_S
    104890765U,	// ZIP2_ZZZ_B
    105423245U,	// ZIP2_ZZZ_D
    105955725U,	// ZIP2_ZZZ_H
    106488205U,	// ZIP2_ZZZ_S
    8589U,	// ZIP2v16i8
    1057165U,	// ZIP2v2i32
    1581453U,	// ZIP2v2i64
    2105741U,	// ZIP2v4i16
    2630029U,	// ZIP2v4i32
    3154317U,	// ZIP2v8i16
    3678605U,	// ZIP2v8i8
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABSv16i8
    1U,	// ABSv1i64
    2U,	// ABSv2i32
    3U,	// ABSv2i64
    4U,	// ABSv4i16
    5U,	// ABSv4i32
    6U,	// ABSv8i16
    7U,	// ABSv8i8
    8U,	// ADCSWr
    8U,	// ADCSXr
    8U,	// ADCWr
    8U,	// ADCXr
    4169U,	// ADDHNv2i64_v2i32
    4233U,	// ADDHNv2i64_v4i32
    8266U,	// ADDHNv4i32_v4i16
    8330U,	// ADDHNv4i32_v8i16
    12427U,	// ADDHNv8i16_v16i8
    12363U,	// ADDHNv8i16_v8i8
    8U,	// ADDPL_XXI
    16460U,	// ADDPv16i8
    20557U,	// ADDPv2i32
    4169U,	// ADDPv2i64
    3U,	// ADDPv2i64p
    24654U,	// ADDPv4i16
    8266U,	// ADDPv4i32
    12363U,	// ADDPv8i16
    28751U,	// ADDPv8i8
    200U,	// ADDSWri
    0U,	// ADDSWrr
    264U,	// ADDSWrs
    328U,	// ADDSWrx
    200U,	// ADDSXri
    0U,	// ADDSXrr
    264U,	// ADDSXrs
    328U,	// ADDSXrx
    32776U,	// ADDSXrx64
    8U,	// ADDVL_XXI
    0U,	// ADDVv16i8v
    4U,	// ADDVv4i16v
    5U,	// ADDVv4i32v
    6U,	// ADDVv8i16v
    7U,	// ADDVv8i8v
    200U,	// ADDWri
    0U,	// ADDWrr
    264U,	// ADDWrs
    328U,	// ADDWrx
    200U,	// ADDXri
    0U,	// ADDXrr
    264U,	// ADDXrs
    328U,	// ADDXrx
    32776U,	// ADDXrx64
    16U,	// ADD_ZI_B
    17U,	// ADD_ZI_D
    18U,	// ADD_ZI_H
    19U,	// ADD_ZI_S
    37268U,	// ADD_ZPmZ_B
    41365U,	// ADD_ZPmZ_D
    45462U,	// ADD_ZPmZ_H
    49559U,	// ADD_ZPmZ_S
    468U,	// ADD_ZZZ_B
    469U,	// ADD_ZZZ_D
    470U,	// ADD_ZZZ_H
    471U,	// ADD_ZZZ_S
    0U,	// ADDlowTLS
    16460U,	// ADDv16i8
    8U,	// ADDv1i64
    20557U,	// ADDv2i32
    4169U,	// ADDv2i64
    24654U,	// ADDv4i16
    8266U,	// ADDv4i32
    12363U,	// ADDv8i16
    28751U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    1U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    520U,	// ANDSWri
    0U,	// ANDSWrr
    264U,	// ANDSWrs
    584U,	// ANDSXri
    0U,	// ANDSXrr
    264U,	// ANDSXrs
    520U,	// ANDWri
    0U,	// ANDWrr
    264U,	// ANDWrs
    584U,	// ANDXri
    0U,	// ANDXrr
    264U,	// ANDXrs
    24U,	// AND_ZI
    37268U,	// AND_ZPmZ_B
    41365U,	// AND_ZPmZ_D
    45462U,	// AND_ZPmZ_H
    49559U,	// AND_ZPmZ_S
    469U,	// AND_ZZZ
    16460U,	// ANDv16i8
    28751U,	// ANDv8i8
    8U,	// ASRVWr
    8U,	// ASRVXr
    1U,	// AUTDA
    1U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    1U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    1U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    53896U,	// BFMWri
    53896U,	// BFMXri
    0U,	// BICSWrr
    264U,	// BICSWrs
    0U,	// BICSXrr
    264U,	// BICSXrs
    0U,	// BICWrr
    264U,	// BICWrs
    0U,	// BICXrr
    264U,	// BICXrs
    37268U,	// BIC_ZPmZ_B
    41365U,	// BIC_ZPmZ_D
    45462U,	// BIC_ZPmZ_H
    49559U,	// BIC_ZPmZ_S
    469U,	// BIC_ZZZ
    16460U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    28751U,	// BICv8i8
    16460U,	// BIFv16i8
    28751U,	// BIFv8i8
    16524U,	// BITv16i8
    28815U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    1U,	// BLRAA
    0U,	// BLRAAZ
    1U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    1U,	// BRAA
    0U,	// BRAAZ
    1U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    16524U,	// BSLv16i8
    28815U,	// BSLv8i8
    0U,	// Bcc
    58009U,	// CASAB
    58009U,	// CASAH
    58009U,	// CASALB
    58009U,	// CASALH
    58009U,	// CASALW
    58009U,	// CASALX
    58009U,	// CASAW
    58009U,	// CASAX
    58009U,	// CASB
    58009U,	// CASH
    58009U,	// CASLB
    58009U,	// CASLH
    58009U,	// CASLW
    58009U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    58009U,	// CASW
    58009U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    53256U,	// CCMNWi
    53256U,	// CCMNWr
    53256U,	// CCMNXi
    53256U,	// CCMNXr
    53256U,	// CCMPWi
    53256U,	// CCMPWr
    53256U,	// CCMPXi
    53256U,	// CCMPXr
    0U,	// CLREX
    1U,	// CLSWr
    1U,	// CLSXr
    0U,	// CLSv16i8
    2U,	// CLSv2i32
    4U,	// CLSv4i16
    5U,	// CLSv4i32
    6U,	// CLSv8i16
    7U,	// CLSv8i8
    1U,	// CLZWr
    1U,	// CLZXr
    0U,	// CLZv16i8
    2U,	// CLZv2i32
    4U,	// CLZv4i16
    5U,	// CLZv4i32
    6U,	// CLZv8i16
    7U,	// CLZv8i8
    16460U,	// CMEQv16i8
    26U,	// CMEQv16i8rz
    8U,	// CMEQv1i64
    27U,	// CMEQv1i64rz
    20557U,	// CMEQv2i32
    28U,	// CMEQv2i32rz
    4169U,	// CMEQv2i64
    29U,	// CMEQv2i64rz
    24654U,	// CMEQv4i16
    30U,	// CMEQv4i16rz
    8266U,	// CMEQv4i32
    31U,	// CMEQv4i32rz
    12363U,	// CMEQv8i16
    32U,	// CMEQv8i16rz
    28751U,	// CMEQv8i8
    33U,	// CMEQv8i8rz
    16460U,	// CMGEv16i8
    26U,	// CMGEv16i8rz
    8U,	// CMGEv1i64
    27U,	// CMGEv1i64rz
    20557U,	// CMGEv2i32
    28U,	// CMGEv2i32rz
    4169U,	// CMGEv2i64
    29U,	// CMGEv2i64rz
    24654U,	// CMGEv4i16
    30U,	// CMGEv4i16rz
    8266U,	// CMGEv4i32
    31U,	// CMGEv4i32rz
    12363U,	// CMGEv8i16
    32U,	// CMGEv8i16rz
    28751U,	// CMGEv8i8
    33U,	// CMGEv8i8rz
    16460U,	// CMGTv16i8
    26U,	// CMGTv16i8rz
    8U,	// CMGTv1i64
    27U,	// CMGTv1i64rz
    20557U,	// CMGTv2i32
    28U,	// CMGTv2i32rz
    4169U,	// CMGTv2i64
    29U,	// CMGTv2i64rz
    24654U,	// CMGTv4i16
    30U,	// CMGTv4i16rz
    8266U,	// CMGTv4i32
    31U,	// CMGTv4i32rz
    12363U,	// CMGTv8i16
    32U,	// CMGTv8i16rz
    28751U,	// CMGTv8i8
    33U,	// CMGTv8i8rz
    16460U,	// CMHIv16i8
    8U,	// CMHIv1i64
    20557U,	// CMHIv2i32
    4169U,	// CMHIv2i64
    24654U,	// CMHIv4i16
    8266U,	// CMHIv4i32
    12363U,	// CMHIv8i16
    28751U,	// CMHIv8i8
    16460U,	// CMHSv16i8
    8U,	// CMHSv1i64
    20557U,	// CMHSv2i32
    4169U,	// CMHSv2i64
    24654U,	// CMHSv4i16
    8266U,	// CMHSv4i32
    12363U,	// CMHSv8i16
    28751U,	// CMHSv8i8
    26U,	// CMLEv16i8rz
    27U,	// CMLEv1i64rz
    28U,	// CMLEv2i32rz
    29U,	// CMLEv2i64rz
    30U,	// CMLEv4i16rz
    31U,	// CMLEv4i32rz
    32U,	// CMLEv8i16rz
    33U,	// CMLEv8i8rz
    26U,	// CMLTv16i8rz
    27U,	// CMLTv1i64rz
    28U,	// CMLTv2i32rz
    29U,	// CMLTv2i64rz
    30U,	// CMLTv4i16rz
    31U,	// CMLTv4i32rz
    32U,	// CMLTv8i16rz
    33U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    16460U,	// CMTSTv16i8
    8U,	// CMTSTv1i64
    20557U,	// CMTSTv2i32
    4169U,	// CMTSTv2i64
    24654U,	// CMTSTv4i16
    8266U,	// CMTSTv4i32
    12363U,	// CMTSTv8i16
    28751U,	// CMTSTv8i8
    0U,	// CNTv16i8
    7U,	// CNTv8i8
    0U,	// CPY_ZPmI_B
    0U,	// CPY_ZPmI_D
    0U,	// CPY_ZPmI_H
    0U,	// CPY_ZPmI_S
    34U,	// CPY_ZPzI_B
    35U,	// CPY_ZPzI_D
    36U,	// CPY_ZPzI_H
    37U,	// CPY_ZPzI_S
    742U,	// CPYi16
    743U,	// CPYi32
    744U,	// CPYi64
    745U,	// CPYi8
    8U,	// CRC32Brr
    8U,	// CRC32CBrr
    8U,	// CRC32CHrr
    8U,	// CRC32CWrr
    8U,	// CRC32CXrr
    8U,	// CRC32Hrr
    8U,	// CRC32Wrr
    8U,	// CRC32Xrr
    53256U,	// CSELWr
    53256U,	// CSELXr
    53256U,	// CSINCWr
    53256U,	// CSINCXr
    53256U,	// CSINVWr
    53256U,	// CSINVXr
    53256U,	// CSNEGWr
    53256U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPM_ZI
    0U,	// DUP_ZI_B
    0U,	// DUP_ZI_D
    0U,	// DUP_ZI_H
    0U,	// DUP_ZI_S
    0U,	// DUP_ZR_B
    0U,	// DUP_ZR_D
    0U,	// DUP_ZR_H
    0U,	// DUP_ZR_S
    0U,	// DUP_ZZI_B
    0U,	// DUP_ZZI_D
    0U,	// DUP_ZZI_H
    0U,	// DUP_ZZI_Q
    0U,	// DUP_ZZI_S
    1U,	// DUPv16i8gpr
    745U,	// DUPv16i8lane
    1U,	// DUPv2i32gpr
    743U,	// DUPv2i32lane
    1U,	// DUPv2i64gpr
    744U,	// DUPv2i64lane
    1U,	// DUPv4i16gpr
    742U,	// DUPv4i16lane
    1U,	// DUPv4i32gpr
    743U,	// DUPv4i32lane
    1U,	// DUPv8i16gpr
    742U,	// DUPv8i16lane
    1U,	// DUPv8i8gpr
    745U,	// DUPv8i8lane
    0U,	// EONWrr
    264U,	// EONWrs
    0U,	// EONXrr
    264U,	// EONXrs
    520U,	// EORWri
    0U,	// EORWrr
    264U,	// EORWrs
    584U,	// EORXri
    0U,	// EORXrr
    264U,	// EORXrs
    24U,	// EOR_ZI
    37268U,	// EOR_ZPmZ_B
    41365U,	// EOR_ZPmZ_D
    45462U,	// EOR_ZPmZ_H
    49559U,	// EOR_ZPmZ_S
    469U,	// EOR_ZZZ
    16460U,	// EORv16i8
    28751U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    53256U,	// EXTRWrri
    53256U,	// EXTRXrri
    61516U,	// EXTv16i8
    79U,	// EXTv8i8
    0U,	// F128CSEL
    8U,	// FABD16
    8U,	// FABD32
    8U,	// FABD64
    20557U,	// FABDv2f32
    4169U,	// FABDv2f64
    24654U,	// FABDv4f16
    8266U,	// FABDv4f32
    12363U,	// FABDv8f16
    1U,	// FABSDr
    1U,	// FABSHr
    1U,	// FABSSr
    2U,	// FABSv2f32
    3U,	// FABSv2f64
    4U,	// FABSv4f16
    5U,	// FABSv4f32
    6U,	// FABSv8f16
    8U,	// FACGE16
    8U,	// FACGE32
    8U,	// FACGE64
    20557U,	// FACGEv2f32
    4169U,	// FACGEv2f64
    24654U,	// FACGEv4f16
    8266U,	// FACGEv4f32
    12363U,	// FACGEv8f16
    8U,	// FACGT16
    8U,	// FACGT32
    8U,	// FACGT64
    20557U,	// FACGTv2f32
    4169U,	// FACGTv2f64
    24654U,	// FACGTv4f16
    8266U,	// FACGTv4f32
    12363U,	// FACGTv8f16
    8U,	// FADDDrr
    8U,	// FADDHrr
    20557U,	// FADDPv2f32
    4169U,	// FADDPv2f64
    42U,	// FADDPv2i16p
    2U,	// FADDPv2i32p
    3U,	// FADDPv2i64p
    24654U,	// FADDPv4f16
    8266U,	// FADDPv4f32
    12363U,	// FADDPv8f16
    8U,	// FADDSrr
    20557U,	// FADDv2f32
    4169U,	// FADDv2f64
    24654U,	// FADDv4f16
    8266U,	// FADDv4f32
    12363U,	// FADDv8f16
    4173U,	// FCADDv2f32
    8265U,	// FCADDv2f64
    12366U,	// FCADDv4f16
    16458U,	// FCADDv4f32
    20555U,	// FCADDv8f16
    53256U,	// FCCMPDrr
    53256U,	// FCCMPEDrr
    53256U,	// FCCMPEHrr
    53256U,	// FCCMPESrr
    53256U,	// FCCMPHrr
    53256U,	// FCCMPSrr
    8U,	// FCMEQ16
    8U,	// FCMEQ32
    8U,	// FCMEQ64
    43U,	// FCMEQv1i16rz
    43U,	// FCMEQv1i32rz
    43U,	// FCMEQv1i64rz
    20557U,	// FCMEQv2f32
    4169U,	// FCMEQv2f64
    44U,	// FCMEQv2i32rz
    45U,	// FCMEQv2i64rz
    24654U,	// FCMEQv4f16
    8266U,	// FCMEQv4f32
    46U,	// FCMEQv4i16rz
    47U,	// FCMEQv4i32rz
    12363U,	// FCMEQv8f16
    48U,	// FCMEQv8i16rz
    8U,	// FCMGE16
    8U,	// FCMGE32
    8U,	// FCMGE64
    43U,	// FCMGEv1i16rz
    43U,	// FCMGEv1i32rz
    43U,	// FCMGEv1i64rz
    20557U,	// FCMGEv2f32
    4169U,	// FCMGEv2f64
    44U,	// FCMGEv2i32rz
    45U,	// FCMGEv2i64rz
    24654U,	// FCMGEv4f16
    8266U,	// FCMGEv4f32
    46U,	// FCMGEv4i16rz
    47U,	// FCMGEv4i32rz
    12363U,	// FCMGEv8f16
    48U,	// FCMGEv8i16rz
    8U,	// FCMGT16
    8U,	// FCMGT32
    8U,	// FCMGT64
    43U,	// FCMGTv1i16rz
    43U,	// FCMGTv1i32rz
    43U,	// FCMGTv1i64rz
    20557U,	// FCMGTv2f32
    4169U,	// FCMGTv2f64
    44U,	// FCMGTv2i32rz
    45U,	// FCMGTv2i64rz
    24654U,	// FCMGTv4f16
    8266U,	// FCMGTv4f32
    46U,	// FCMGTv4i16rz
    47U,	// FCMGTv4i32rz
    12363U,	// FCMGTv8f16
    48U,	// FCMGTv8i16rz
    4237U,	// FCMLAv2f32
    8329U,	// FCMLAv2f64
    12430U,	// FCMLAv4f16
    24718U,	// FCMLAv4f16_indexed
    16522U,	// FCMLAv4f32
    28810U,	// FCMLAv4f32_indexed
    20619U,	// FCMLAv8f16
    24715U,	// FCMLAv8f16_indexed
    43U,	// FCMLEv1i16rz
    43U,	// FCMLEv1i32rz
    43U,	// FCMLEv1i64rz
    44U,	// FCMLEv2i32rz
    45U,	// FCMLEv2i64rz
    46U,	// FCMLEv4i16rz
    47U,	// FCMLEv4i32rz
    48U,	// FCMLEv8i16rz
    43U,	// FCMLTv1i16rz
    43U,	// FCMLTv1i32rz
    43U,	// FCMLTv1i64rz
    44U,	// FCMLTv2i32rz
    45U,	// FCMLTv2i64rz
    46U,	// FCMLTv4i16rz
    47U,	// FCMLTv4i32rz
    48U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    1U,	// FCMPDrr
    0U,	// FCMPEDri
    1U,	// FCMPEDrr
    0U,	// FCMPEHri
    1U,	// FCMPEHrr
    0U,	// FCMPESri
    1U,	// FCMPESrr
    0U,	// FCMPHri
    1U,	// FCMPHrr
    0U,	// FCMPSri
    1U,	// FCMPSrr
    0U,	// FCPY_ZPmI_D
    0U,	// FCPY_ZPmI_H
    0U,	// FCPY_ZPmI_S
    53256U,	// FCSELDrrr
    53256U,	// FCSELHrrr
    53256U,	// FCSELSrrr
    1U,	// FCVTASUWDr
    1U,	// FCVTASUWHr
    1U,	// FCVTASUWSr
    1U,	// FCVTASUXDr
    1U,	// FCVTASUXHr
    1U,	// FCVTASUXSr
    1U,	// FCVTASv1f16
    1U,	// FCVTASv1i32
    1U,	// FCVTASv1i64
    2U,	// FCVTASv2f32
    3U,	// FCVTASv2f64
    4U,	// FCVTASv4f16
    5U,	// FCVTASv4f32
    6U,	// FCVTASv8f16
    1U,	// FCVTAUUWDr
    1U,	// FCVTAUUWHr
    1U,	// FCVTAUUWSr
    1U,	// FCVTAUUXDr
    1U,	// FCVTAUUXHr
    1U,	// FCVTAUUXSr
    1U,	// FCVTAUv1f16
    1U,	// FCVTAUv1i32
    1U,	// FCVTAUv1i64
    2U,	// FCVTAUv2f32
    3U,	// FCVTAUv2f64
    4U,	// FCVTAUv4f16
    5U,	// FCVTAUv4f32
    6U,	// FCVTAUv8f16
    1U,	// FCVTDHr
    1U,	// FCVTDSr
    1U,	// FCVTHDr
    1U,	// FCVTHSr
    2U,	// FCVTLv2i32
    4U,	// FCVTLv4i16
    5U,	// FCVTLv4i32
    6U,	// FCVTLv8i16
    1U,	// FCVTMSUWDr
    1U,	// FCVTMSUWHr
    1U,	// FCVTMSUWSr
    1U,	// FCVTMSUXDr
    1U,	// FCVTMSUXHr
    1U,	// FCVTMSUXSr
    1U,	// FCVTMSv1f16
    1U,	// FCVTMSv1i32
    1U,	// FCVTMSv1i64
    2U,	// FCVTMSv2f32
    3U,	// FCVTMSv2f64
    4U,	// FCVTMSv4f16
    5U,	// FCVTMSv4f32
    6U,	// FCVTMSv8f16
    1U,	// FCVTMUUWDr
    1U,	// FCVTMUUWHr
    1U,	// FCVTMUUWSr
    1U,	// FCVTMUUXDr
    1U,	// FCVTMUUXHr
    1U,	// FCVTMUUXSr
    1U,	// FCVTMUv1f16
    1U,	// FCVTMUv1i32
    1U,	// FCVTMUv1i64
    2U,	// FCVTMUv2f32
    3U,	// FCVTMUv2f64
    4U,	// FCVTMUv4f16
    5U,	// FCVTMUv4f32
    6U,	// FCVTMUv8f16
    1U,	// FCVTNSUWDr
    1U,	// FCVTNSUWHr
    1U,	// FCVTNSUWSr
    1U,	// FCVTNSUXDr
    1U,	// FCVTNSUXHr
    1U,	// FCVTNSUXSr
    1U,	// FCVTNSv1f16
    1U,	// FCVTNSv1i32
    1U,	// FCVTNSv1i64
    2U,	// FCVTNSv2f32
    3U,	// FCVTNSv2f64
    4U,	// FCVTNSv4f16
    5U,	// FCVTNSv4f32
    6U,	// FCVTNSv8f16
    1U,	// FCVTNUUWDr
    1U,	// FCVTNUUWHr
    1U,	// FCVTNUUWSr
    1U,	// FCVTNUUXDr
    1U,	// FCVTNUUXHr
    1U,	// FCVTNUUXSr
    1U,	// FCVTNUv1f16
    1U,	// FCVTNUv1i32
    1U,	// FCVTNUv1i64
    2U,	// FCVTNUv2f32
    3U,	// FCVTNUv2f64
    4U,	// FCVTNUv4f16
    5U,	// FCVTNUv4f32
    6U,	// FCVTNUv8f16
    3U,	// FCVTNv2i32
    5U,	// FCVTNv4i16
    3U,	// FCVTNv4i32
    5U,	// FCVTNv8i16
    1U,	// FCVTPSUWDr
    1U,	// FCVTPSUWHr
    1U,	// FCVTPSUWSr
    1U,	// FCVTPSUXDr
    1U,	// FCVTPSUXHr
    1U,	// FCVTPSUXSr
    1U,	// FCVTPSv1f16
    1U,	// FCVTPSv1i32
    1U,	// FCVTPSv1i64
    2U,	// FCVTPSv2f32
    3U,	// FCVTPSv2f64
    4U,	// FCVTPSv4f16
    5U,	// FCVTPSv4f32
    6U,	// FCVTPSv8f16
    1U,	// FCVTPUUWDr
    1U,	// FCVTPUUWHr
    1U,	// FCVTPUUWSr
    1U,	// FCVTPUUXDr
    1U,	// FCVTPUUXHr
    1U,	// FCVTPUUXSr
    1U,	// FCVTPUv1f16
    1U,	// FCVTPUv1i32
    1U,	// FCVTPUv1i64
    2U,	// FCVTPUv2f32
    3U,	// FCVTPUv2f64
    4U,	// FCVTPUv4f16
    5U,	// FCVTPUv4f32
    6U,	// FCVTPUv8f16
    1U,	// FCVTSDr
    1U,	// FCVTSHr
    1U,	// FCVTXNv1i64
    3U,	// FCVTXNv2f32
    3U,	// FCVTXNv4f32
    8U,	// FCVTZSDHr
    8U,	// FCVTZSHDr
    8U,	// FCVTZSHSr
    8U,	// FCVTZSSHr
    8U,	// FCVTZSSWDri
    8U,	// FCVTZSSWHri
    8U,	// FCVTZSSWSri
    8U,	// FCVTZSSXDri
    8U,	// FCVTZSSXHri
    8U,	// FCVTZSSXSri
    1U,	// FCVTZSUWDr
    1U,	// FCVTZSUWHr
    1U,	// FCVTZSUWSr
    1U,	// FCVTZSUXDr
    1U,	// FCVTZSUXHr
    1U,	// FCVTZSUXSr
    8U,	// FCVTZSd
    8U,	// FCVTZSh
    8U,	// FCVTZSs
    1U,	// FCVTZSv1f16
    1U,	// FCVTZSv1i32
    1U,	// FCVTZSv1i64
    2U,	// FCVTZSv2f32
    3U,	// FCVTZSv2f64
    13U,	// FCVTZSv2i32_shift
    9U,	// FCVTZSv2i64_shift
    4U,	// FCVTZSv4f16
    5U,	// FCVTZSv4f32
    14U,	// FCVTZSv4i16_shift
    10U,	// FCVTZSv4i32_shift
    6U,	// FCVTZSv8f16
    11U,	// FCVTZSv8i16_shift
    8U,	// FCVTZUDHr
    8U,	// FCVTZUHDr
    8U,	// FCVTZUHSr
    8U,	// FCVTZUSHr
    8U,	// FCVTZUSWDri
    8U,	// FCVTZUSWHri
    8U,	// FCVTZUSWSri
    8U,	// FCVTZUSXDri
    8U,	// FCVTZUSXHri
    8U,	// FCVTZUSXSri
    1U,	// FCVTZUUWDr
    1U,	// FCVTZUUWHr
    1U,	// FCVTZUUWSr
    1U,	// FCVTZUUXDr
    1U,	// FCVTZUUXHr
    1U,	// FCVTZUUXSr
    8U,	// FCVTZUd
    8U,	// FCVTZUh
    8U,	// FCVTZUs
    1U,	// FCVTZUv1f16
    1U,	// FCVTZUv1i32
    1U,	// FCVTZUv1i64
    2U,	// FCVTZUv2f32
    3U,	// FCVTZUv2f64
    13U,	// FCVTZUv2i32_shift
    9U,	// FCVTZUv2i64_shift
    4U,	// FCVTZUv4f16
    5U,	// FCVTZUv4f32
    14U,	// FCVTZUv4i16_shift
    10U,	// FCVTZUv4i32_shift
    6U,	// FCVTZUv8f16
    11U,	// FCVTZUv8i16_shift
    8U,	// FDIVDrr
    8U,	// FDIVHrr
    8U,	// FDIVSrr
    20557U,	// FDIVv2f32
    4169U,	// FDIVv2f64
    24654U,	// FDIVv4f16
    8266U,	// FDIVv4f32
    12363U,	// FDIVv8f16
    0U,	// FDUP_ZI_D
    0U,	// FDUP_ZI_H
    0U,	// FDUP_ZI_S
    1U,	// FJCVTZS
    53256U,	// FMADDDrrr
    53256U,	// FMADDHrrr
    53256U,	// FMADDSrrr
    8U,	// FMAXDrr
    8U,	// FMAXHrr
    8U,	// FMAXNMDrr
    8U,	// FMAXNMHrr
    20557U,	// FMAXNMPv2f32
    4169U,	// FMAXNMPv2f64
    42U,	// FMAXNMPv2i16p
    2U,	// FMAXNMPv2i32p
    3U,	// FMAXNMPv2i64p
    24654U,	// FMAXNMPv4f16
    8266U,	// FMAXNMPv4f32
    12363U,	// FMAXNMPv8f16
    8U,	// FMAXNMSrr
    4U,	// FMAXNMVv4i16v
    5U,	// FMAXNMVv4i32v
    6U,	// FMAXNMVv8i16v
    20557U,	// FMAXNMv2f32
    4169U,	// FMAXNMv2f64
    24654U,	// FMAXNMv4f16
    8266U,	// FMAXNMv4f32
    12363U,	// FMAXNMv8f16
    20557U,	// FMAXPv2f32
    4169U,	// FMAXPv2f64
    42U,	// FMAXPv2i16p
    2U,	// FMAXPv2i32p
    3U,	// FMAXPv2i64p
    24654U,	// FMAXPv4f16
    8266U,	// FMAXPv4f32
    12363U,	// FMAXPv8f16
    8U,	// FMAXSrr
    4U,	// FMAXVv4i16v
    5U,	// FMAXVv4i32v
    6U,	// FMAXVv8i16v
    20557U,	// FMAXv2f32
    4169U,	// FMAXv2f64
    24654U,	// FMAXv4f16
    8266U,	// FMAXv4f32
    12363U,	// FMAXv8f16
    8U,	// FMINDrr
    8U,	// FMINHrr
    8U,	// FMINNMDrr
    8U,	// FMINNMHrr
    20557U,	// FMINNMPv2f32
    4169U,	// FMINNMPv2f64
    42U,	// FMINNMPv2i16p
    2U,	// FMINNMPv2i32p
    3U,	// FMINNMPv2i64p
    24654U,	// FMINNMPv4f16
    8266U,	// FMINNMPv4f32
    12363U,	// FMINNMPv8f16
    8U,	// FMINNMSrr
    4U,	// FMINNMVv4i16v
    5U,	// FMINNMVv4i32v
    6U,	// FMINNMVv8i16v
    20557U,	// FMINNMv2f32
    4169U,	// FMINNMv2f64
    24654U,	// FMINNMv4f16
    8266U,	// FMINNMv4f32
    12363U,	// FMINNMv8f16
    20557U,	// FMINPv2f32
    4169U,	// FMINPv2f64
    42U,	// FMINPv2i16p
    2U,	// FMINPv2i32p
    3U,	// FMINPv2i64p
    24654U,	// FMINPv4f16
    8266U,	// FMINPv4f32
    12363U,	// FMINPv8f16
    8U,	// FMINSrr
    4U,	// FMINVv4i16v
    5U,	// FMINVv4i32v
    6U,	// FMINVv8i16v
    20557U,	// FMINv2f32
    4169U,	// FMINv2f64
    24654U,	// FMINv4f16
    8266U,	// FMINv4f32
    12363U,	// FMINv8f16
    24712U,	// FMLAv1i16_indexed
    28808U,	// FMLAv1i32_indexed
    32904U,	// FMLAv1i64_indexed
    20621U,	// FMLAv2f32
    4233U,	// FMLAv2f64
    28813U,	// FMLAv2i32_indexed
    32905U,	// FMLAv2i64_indexed
    24718U,	// FMLAv4f16
    8330U,	// FMLAv4f32
    24718U,	// FMLAv4i16_indexed
    28810U,	// FMLAv4i32_indexed
    12427U,	// FMLAv8f16
    24715U,	// FMLAv8i16_indexed
    24712U,	// FMLSv1i16_indexed
    28808U,	// FMLSv1i32_indexed
    32904U,	// FMLSv1i64_indexed
    20621U,	// FMLSv2f32
    4233U,	// FMLSv2f64
    28813U,	// FMLSv2i32_indexed
    32905U,	// FMLSv2i64_indexed
    24718U,	// FMLSv4f16
    8330U,	// FMLSv4f32
    24718U,	// FMLSv4i16_indexed
    28810U,	// FMLSv4i32_indexed
    12427U,	// FMLSv8f16
    24715U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    744U,	// FMOVDXHighr
    1U,	// FMOVDXr
    0U,	// FMOVDi
    1U,	// FMOVDr
    0U,	// FMOVH0
    1U,	// FMOVHWr
    1U,	// FMOVHXr
    0U,	// FMOVHi
    1U,	// FMOVHr
    0U,	// FMOVS0
    1U,	// FMOVSWr
    0U,	// FMOVSi
    1U,	// FMOVSr
    1U,	// FMOVWHr
    1U,	// FMOVWSr
    1U,	// FMOVXDHighr
    1U,	// FMOVXDr
    1U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    53256U,	// FMSUBDrrr
    53256U,	// FMSUBHrrr
    53256U,	// FMSUBSrrr
    8U,	// FMULDrr
    8U,	// FMULHrr
    8U,	// FMULSrr
    8U,	// FMULX16
    8U,	// FMULX32
    8U,	// FMULX64
    24648U,	// FMULXv1i16_indexed
    28744U,	// FMULXv1i32_indexed
    32840U,	// FMULXv1i64_indexed
    20557U,	// FMULXv2f32
    4169U,	// FMULXv2f64
    28749U,	// FMULXv2i32_indexed
    32841U,	// FMULXv2i64_indexed
    24654U,	// FMULXv4f16
    8266U,	// FMULXv4f32
    24654U,	// FMULXv4i16_indexed
    28746U,	// FMULXv4i32_indexed
    12363U,	// FMULXv8f16
    24651U,	// FMULXv8i16_indexed
    24648U,	// FMULv1i16_indexed
    28744U,	// FMULv1i32_indexed
    32840U,	// FMULv1i64_indexed
    20557U,	// FMULv2f32
    4169U,	// FMULv2f64
    28749U,	// FMULv2i32_indexed
    32841U,	// FMULv2i64_indexed
    24654U,	// FMULv4f16
    8266U,	// FMULv4f32
    24654U,	// FMULv4i16_indexed
    28746U,	// FMULv4i32_indexed
    12363U,	// FMULv8f16
    24651U,	// FMULv8i16_indexed
    1U,	// FNEGDr
    1U,	// FNEGHr
    1U,	// FNEGSr
    2U,	// FNEGv2f32
    3U,	// FNEGv2f64
    4U,	// FNEGv4f16
    5U,	// FNEGv4f32
    6U,	// FNEGv8f16
    53256U,	// FNMADDDrrr
    53256U,	// FNMADDHrrr
    53256U,	// FNMADDSrrr
    53256U,	// FNMSUBDrrr
    53256U,	// FNMSUBHrrr
    53256U,	// FNMSUBSrrr
    8U,	// FNMULDrr
    8U,	// FNMULHrr
    8U,	// FNMULSrr
    1U,	// FRECPEv1f16
    1U,	// FRECPEv1i32
    1U,	// FRECPEv1i64
    2U,	// FRECPEv2f32
    3U,	// FRECPEv2f64
    4U,	// FRECPEv4f16
    5U,	// FRECPEv4f32
    6U,	// FRECPEv8f16
    8U,	// FRECPS16
    8U,	// FRECPS32
    8U,	// FRECPS64
    20557U,	// FRECPSv2f32
    4169U,	// FRECPSv2f64
    24654U,	// FRECPSv4f16
    8266U,	// FRECPSv4f32
    12363U,	// FRECPSv8f16
    1U,	// FRECPXv1f16
    1U,	// FRECPXv1i32
    1U,	// FRECPXv1i64
    1U,	// FRINTADr
    1U,	// FRINTAHr
    1U,	// FRINTASr
    2U,	// FRINTAv2f32
    3U,	// FRINTAv2f64
    4U,	// FRINTAv4f16
    5U,	// FRINTAv4f32
    6U,	// FRINTAv8f16
    1U,	// FRINTIDr
    1U,	// FRINTIHr
    1U,	// FRINTISr
    2U,	// FRINTIv2f32
    3U,	// FRINTIv2f64
    4U,	// FRINTIv4f16
    5U,	// FRINTIv4f32
    6U,	// FRINTIv8f16
    1U,	// FRINTMDr
    1U,	// FRINTMHr
    1U,	// FRINTMSr
    2U,	// FRINTMv2f32
    3U,	// FRINTMv2f64
    4U,	// FRINTMv4f16
    5U,	// FRINTMv4f32
    6U,	// FRINTMv8f16
    1U,	// FRINTNDr
    1U,	// FRINTNHr
    1U,	// FRINTNSr
    2U,	// FRINTNv2f32
    3U,	// FRINTNv2f64
    4U,	// FRINTNv4f16
    5U,	// FRINTNv4f32
    6U,	// FRINTNv8f16
    1U,	// FRINTPDr
    1U,	// FRINTPHr
    1U,	// FRINTPSr
    2U,	// FRINTPv2f32
    3U,	// FRINTPv2f64
    4U,	// FRINTPv4f16
    5U,	// FRINTPv4f32
    6U,	// FRINTPv8f16
    1U,	// FRINTXDr
    1U,	// FRINTXHr
    1U,	// FRINTXSr
    2U,	// FRINTXv2f32
    3U,	// FRINTXv2f64
    4U,	// FRINTXv4f16
    5U,	// FRINTXv4f32
    6U,	// FRINTXv8f16
    1U,	// FRINTZDr
    1U,	// FRINTZHr
    1U,	// FRINTZSr
    2U,	// FRINTZv2f32
    3U,	// FRINTZv2f64
    4U,	// FRINTZv4f16
    5U,	// FRINTZv4f32
    6U,	// FRINTZv8f16
    1U,	// FRSQRTEv1f16
    1U,	// FRSQRTEv1i32
    1U,	// FRSQRTEv1i64
    2U,	// FRSQRTEv2f32
    3U,	// FRSQRTEv2f64
    4U,	// FRSQRTEv4f16
    5U,	// FRSQRTEv4f32
    6U,	// FRSQRTEv8f16
    8U,	// FRSQRTS16
    8U,	// FRSQRTS32
    8U,	// FRSQRTS64
    20557U,	// FRSQRTSv2f32
    4169U,	// FRSQRTSv2f64
    24654U,	// FRSQRTSv4f16
    8266U,	// FRSQRTSv4f32
    12363U,	// FRSQRTSv8f16
    1U,	// FSQRTDr
    1U,	// FSQRTHr
    1U,	// FSQRTSr
    2U,	// FSQRTv2f32
    3U,	// FSQRTv2f64
    4U,	// FSQRTv4f16
    5U,	// FSQRTv4f32
    6U,	// FSQRTv8f16
    8U,	// FSUBDrr
    8U,	// FSUBHrr
    8U,	// FSUBSrr
    20557U,	// FSUBv2f32
    4169U,	// FSUBv2f64
    24654U,	// FSUBv4f16
    8266U,	// FSUBv4f32
    12363U,	// FSUBv8f16
    49U,	// GLD1B_D_IMM_REAL
    776U,	// GLD1B_D_REAL
    840U,	// GLD1B_D_SXTW_REAL
    904U,	// GLD1B_D_UXTW_REAL
    49U,	// GLD1B_S_IMM_REAL
    968U,	// GLD1B_S_SXTW_REAL
    1032U,	// GLD1B_S_UXTW_REAL
    50U,	// GLD1D_IMM_REAL
    776U,	// GLD1D_REAL
    1096U,	// GLD1D_SCALED_REAL
    840U,	// GLD1D_SXTW_REAL
    1160U,	// GLD1D_SXTW_SCALED_REAL
    904U,	// GLD1D_UXTW_REAL
    1224U,	// GLD1D_UXTW_SCALED_REAL
    51U,	// GLD1H_D_IMM_REAL
    776U,	// GLD1H_D_REAL
    1288U,	// GLD1H_D_SCALED_REAL
    840U,	// GLD1H_D_SXTW_REAL
    1352U,	// GLD1H_D_SXTW_SCALED_REAL
    904U,	// GLD1H_D_UXTW_REAL
    1416U,	// GLD1H_D_UXTW_SCALED_REAL
    51U,	// GLD1H_S_IMM_REAL
    968U,	// GLD1H_S_SXTW_REAL
    1480U,	// GLD1H_S_SXTW_SCALED_REAL
    1032U,	// GLD1H_S_UXTW_REAL
    1544U,	// GLD1H_S_UXTW_SCALED_REAL
    49U,	// GLD1SB_D_IMM_REAL
    776U,	// GLD1SB_D_REAL
    840U,	// GLD1SB_D_SXTW_REAL
    904U,	// GLD1SB_D_UXTW_REAL
    49U,	// GLD1SB_S_IMM_REAL
    968U,	// GLD1SB_S_SXTW_REAL
    1032U,	// GLD1SB_S_UXTW_REAL
    51U,	// GLD1SH_D_IMM_REAL
    776U,	// GLD1SH_D_REAL
    1288U,	// GLD1SH_D_SCALED_REAL
    840U,	// GLD1SH_D_SXTW_REAL
    1352U,	// GLD1SH_D_SXTW_SCALED_REAL
    904U,	// GLD1SH_D_UXTW_REAL
    1416U,	// GLD1SH_D_UXTW_SCALED_REAL
    51U,	// GLD1SH_S_IMM_REAL
    968U,	// GLD1SH_S_SXTW_REAL
    1480U,	// GLD1SH_S_SXTW_SCALED_REAL
    1032U,	// GLD1SH_S_UXTW_REAL
    1544U,	// GLD1SH_S_UXTW_SCALED_REAL
    52U,	// GLD1SW_D_IMM_REAL
    776U,	// GLD1SW_D_REAL
    1608U,	// GLD1SW_D_SCALED_REAL
    840U,	// GLD1SW_D_SXTW_REAL
    1672U,	// GLD1SW_D_SXTW_SCALED_REAL
    904U,	// GLD1SW_D_UXTW_REAL
    1736U,	// GLD1SW_D_UXTW_SCALED_REAL
    52U,	// GLD1W_D_IMM_REAL
    776U,	// GLD1W_D_REAL
    1608U,	// GLD1W_D_SCALED_REAL
    840U,	// GLD1W_D_SXTW_REAL
    1672U,	// GLD1W_D_SXTW_SCALED_REAL
    904U,	// GLD1W_D_UXTW_REAL
    1736U,	// GLD1W_D_UXTW_SCALED_REAL
    52U,	// GLD1W_IMM_REAL
    968U,	// GLD1W_SXTW_REAL
    1800U,	// GLD1W_SXTW_SCALED_REAL
    1032U,	// GLD1W_UXTW_REAL
    1864U,	// GLD1W_UXTW_SCALED_REAL
    49U,	// GLDFF1B_D_IMM_REAL
    776U,	// GLDFF1B_D_REAL
    840U,	// GLDFF1B_D_SXTW_REAL
    904U,	// GLDFF1B_D_UXTW_REAL
    49U,	// GLDFF1B_S_IMM_REAL
    968U,	// GLDFF1B_S_SXTW_REAL
    1032U,	// GLDFF1B_S_UXTW_REAL
    50U,	// GLDFF1D_IMM_REAL
    776U,	// GLDFF1D_REAL
    1096U,	// GLDFF1D_SCALED_REAL
    840U,	// GLDFF1D_SXTW_REAL
    1160U,	// GLDFF1D_SXTW_SCALED_REAL
    904U,	// GLDFF1D_UXTW_REAL
    1224U,	// GLDFF1D_UXTW_SCALED_REAL
    51U,	// GLDFF1H_D_IMM_REAL
    776U,	// GLDFF1H_D_REAL
    1288U,	// GLDFF1H_D_SCALED_REAL
    840U,	// GLDFF1H_D_SXTW_REAL
    1352U,	// GLDFF1H_D_SXTW_SCALED_REAL
    904U,	// GLDFF1H_D_UXTW_REAL
    1416U,	// GLDFF1H_D_UXTW_SCALED_REAL
    51U,	// GLDFF1H_S_IMM_REAL
    968U,	// GLDFF1H_S_SXTW_REAL
    1480U,	// GLDFF1H_S_SXTW_SCALED_REAL
    1032U,	// GLDFF1H_S_UXTW_REAL
    1544U,	// GLDFF1H_S_UXTW_SCALED_REAL
    49U,	// GLDFF1SB_D_IMM_REAL
    776U,	// GLDFF1SB_D_REAL
    840U,	// GLDFF1SB_D_SXTW_REAL
    904U,	// GLDFF1SB_D_UXTW_REAL
    49U,	// GLDFF1SB_S_IMM_REAL
    968U,	// GLDFF1SB_S_SXTW_REAL
    1032U,	// GLDFF1SB_S_UXTW_REAL
    51U,	// GLDFF1SH_D_IMM_REAL
    776U,	// GLDFF1SH_D_REAL
    1288U,	// GLDFF1SH_D_SCALED_REAL
    840U,	// GLDFF1SH_D_SXTW_REAL
    1352U,	// GLDFF1SH_D_SXTW_SCALED_REAL
    904U,	// GLDFF1SH_D_UXTW_REAL
    1416U,	// GLDFF1SH_D_UXTW_SCALED_REAL
    51U,	// GLDFF1SH_S_IMM_REAL
    968U,	// GLDFF1SH_S_SXTW_REAL
    1480U,	// GLDFF1SH_S_SXTW_SCALED_REAL
    1032U,	// GLDFF1SH_S_UXTW_REAL
    1544U,	// GLDFF1SH_S_UXTW_SCALED_REAL
    52U,	// GLDFF1SW_D_IMM_REAL
    776U,	// GLDFF1SW_D_REAL
    1608U,	// GLDFF1SW_D_SCALED_REAL
    840U,	// GLDFF1SW_D_SXTW_REAL
    1672U,	// GLDFF1SW_D_SXTW_SCALED_REAL
    904U,	// GLDFF1SW_D_UXTW_REAL
    1736U,	// GLDFF1SW_D_UXTW_SCALED_REAL
    52U,	// GLDFF1W_D_IMM_REAL
    776U,	// GLDFF1W_D_REAL
    1608U,	// GLDFF1W_D_SCALED_REAL
    840U,	// GLDFF1W_D_SXTW_REAL
    1672U,	// GLDFF1W_D_SXTW_SCALED_REAL
    904U,	// GLDFF1W_D_UXTW_REAL
    1736U,	// GLDFF1W_D_UXTW_SCALED_REAL
    52U,	// GLDFF1W_IMM_REAL
    968U,	// GLDFF1W_SXTW_REAL
    1800U,	// GLDFF1W_SXTW_SCALED_REAL
    1032U,	// GLDFF1W_UXTW_REAL
    1864U,	// GLDFF1W_UXTW_SCALED_REAL
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    53U,	// INDEX_II_B
    53U,	// INDEX_II_D
    53U,	// INDEX_II_H
    53U,	// INDEX_II_S
    53U,	// INDEX_IR_B
    53U,	// INDEX_IR_D
    53U,	// INDEX_IR_H
    53U,	// INDEX_IR_S
    53U,	// INDEX_RI_B
    53U,	// INDEX_RI_D
    53U,	// INDEX_RI_H
    53U,	// INDEX_RI_S
    53U,	// INDEX_RR_B
    53U,	// INDEX_RR_D
    53U,	// INDEX_RR_H
    53U,	// INDEX_RR_S
    1U,	// INSvi16gpr
    1958U,	// INSvi16lane
    1U,	// INSvi32gpr
    1959U,	// INSvi32lane
    1U,	// INSvi64gpr
    1960U,	// INSvi64lane
    1U,	// INSvi8gpr
    1961U,	// INSvi8lane
    0U,	// ISB
    1992U,	// LD1B
    1992U,	// LD1B_D
    37512U,	// LD1B_D_IMM_REAL
    1992U,	// LD1B_H
    37512U,	// LD1B_H_IMM_REAL
    37512U,	// LD1B_IMM_REAL
    1992U,	// LD1B_S
    37512U,	// LD1B_S_IMM_REAL
    2056U,	// LD1D
    37512U,	// LD1D_IMM_REAL
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    2120U,	// LD1H
    2120U,	// LD1H_D
    37512U,	// LD1H_D_IMM_REAL
    37512U,	// LD1H_IMM_REAL
    2120U,	// LD1H_S
    37512U,	// LD1H_S_IMM_REAL
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    57992U,	// LD1RB_D_IMM
    57992U,	// LD1RB_H_IMM
    57992U,	// LD1RB_IMM
    57992U,	// LD1RB_S_IMM
    59528U,	// LD1RD_IMM
    59592U,	// LD1RH_D_IMM
    59592U,	// LD1RH_IMM
    59592U,	// LD1RH_S_IMM
    1992U,	// LD1RQ_B
    2312U,	// LD1RQ_B_IMM
    2056U,	// LD1RQ_D
    2312U,	// LD1RQ_D_IMM
    2120U,	// LD1RQ_H
    2312U,	// LD1RQ_H_IMM
    2376U,	// LD1RQ_W
    2312U,	// LD1RQ_W_IMM
    57992U,	// LD1RSB_D_IMM
    57992U,	// LD1RSB_H_IMM
    57992U,	// LD1RSB_S_IMM
    59592U,	// LD1RSH_D_IMM
    59592U,	// LD1RSH_S_IMM
    59784U,	// LD1RSW_IMM
    59784U,	// LD1RW_D_IMM
    59784U,	// LD1RW_IMM
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    1992U,	// LD1SB_D
    37512U,	// LD1SB_D_IMM_REAL
    1992U,	// LD1SB_H
    37512U,	// LD1SB_H_IMM_REAL
    1992U,	// LD1SB_S
    37512U,	// LD1SB_S_IMM_REAL
    2120U,	// LD1SH_D
    37512U,	// LD1SH_D_IMM_REAL
    2120U,	// LD1SH_S
    37512U,	// LD1SH_S_IMM_REAL
    2376U,	// LD1SW_D
    37512U,	// LD1SW_D_IMM_REAL
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    2376U,	// LD1W
    2376U,	// LD1W_D
    37512U,	// LD1W_D_IMM_REAL
    37512U,	// LD1W_IMM_REAL
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    1992U,	// LD2B
    39112U,	// LD2B_IMM
    2056U,	// LD2D
    39112U,	// LD2D_IMM
    2120U,	// LD2H
    39112U,	// LD2H_IMM
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    2376U,	// LD2W
    39112U,	// LD2W_IMM
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    1992U,	// LD3B
    2504U,	// LD3B_IMM
    2056U,	// LD3D
    2504U,	// LD3D_IMM
    2120U,	// LD3H
    2504U,	// LD3H_IMM
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    2376U,	// LD3W
    2504U,	// LD3W_IMM
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    1992U,	// LD4B
    39304U,	// LD4B_IMM
    2056U,	// LD4D
    39304U,	// LD4D_IMM
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    2120U,	// LD4H
    39304U,	// LD4H_IMM
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    2376U,	// LD4W
    39304U,	// LD4W_IMM
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    54U,	// LDAPRB
    54U,	// LDAPRH
    54U,	// LDAPRW
    54U,	// LDAPRX
    54U,	// LDARB
    54U,	// LDARH
    54U,	// LDARW
    54U,	// LDARX
    57369U,	// LDAXPW
    57369U,	// LDAXPX
    54U,	// LDAXRB
    54U,	// LDAXRH
    54U,	// LDAXRW
    54U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    1992U,	// LDFF1B_D_REAL
    1992U,	// LDFF1B_H_REAL
    1992U,	// LDFF1B_REAL
    1992U,	// LDFF1B_S_REAL
    2056U,	// LDFF1D_REAL
    2120U,	// LDFF1H_D_REAL
    2120U,	// LDFF1H_REAL
    2120U,	// LDFF1H_S_REAL
    1992U,	// LDFF1SB_D_REAL
    1992U,	// LDFF1SB_H_REAL
    1992U,	// LDFF1SB_S_REAL
    2120U,	// LDFF1SH_D_REAL
    2120U,	// LDFF1SH_S_REAL
    2376U,	// LDFF1SW_D_REAL
    2376U,	// LDFF1W_D_REAL
    2376U,	// LDFF1W_REAL
    54U,	// LDLARB
    54U,	// LDLARH
    54U,	// LDLARW
    54U,	// LDLARX
    37512U,	// LDNF1B_D_IMM_REAL
    37512U,	// LDNF1B_H_IMM_REAL
    37512U,	// LDNF1B_IMM_REAL
    37512U,	// LDNF1B_S_IMM_REAL
    37512U,	// LDNF1D_IMM_REAL
    37512U,	// LDNF1H_D_IMM_REAL
    37512U,	// LDNF1H_IMM_REAL
    37512U,	// LDNF1H_S_IMM_REAL
    37512U,	// LDNF1SB_D_IMM_REAL
    37512U,	// LDNF1SB_H_IMM_REAL
    37512U,	// LDNF1SB_S_IMM_REAL
    37512U,	// LDNF1SH_D_IMM_REAL
    37512U,	// LDNF1SH_S_IMM_REAL
    37512U,	// LDNF1SW_D_IMM_REAL
    37512U,	// LDNF1W_D_IMM_REAL
    37512U,	// LDNF1W_IMM_REAL
    53273U,	// LDNPDi
    53273U,	// LDNPQi
    53273U,	// LDNPSi
    53273U,	// LDNPWi
    53273U,	// LDNPXi
    37512U,	// LDNT1B_ZRI
    1992U,	// LDNT1B_ZRR
    37512U,	// LDNT1D_ZRI
    2056U,	// LDNT1D_ZRR
    37512U,	// LDNT1H_ZRI
    2120U,	// LDNT1H_ZRR
    37512U,	// LDNT1W_ZRI
    2376U,	// LDNT1W_ZRR
    53273U,	// LDPDi
    41625U,	// LDPDpost
    53913U,	// LDPDpre
    53273U,	// LDPQi
    41625U,	// LDPQpost
    53913U,	// LDPQpre
    53273U,	// LDPSWi
    41625U,	// LDPSWpost
    53913U,	// LDPSWpre
    53273U,	// LDPSi
    41625U,	// LDPSpost
    53913U,	// LDPSpre
    53273U,	// LDPWi
    41625U,	// LDPWpost
    53913U,	// LDPWpre
    53273U,	// LDPXi
    41625U,	// LDPXpost
    53913U,	// LDPXpre
    2568U,	// LDRAAindexed
    47240U,	// LDRAAwriteback
    2568U,	// LDRABindexed
    47240U,	// LDRABwriteback
    55U,	// LDRBBpost
    45704U,	// LDRBBpre
    53256U,	// LDRBBroW
    53256U,	// LDRBBroX
    2632U,	// LDRBBui
    55U,	// LDRBpost
    45704U,	// LDRBpre
    53256U,	// LDRBroW
    53256U,	// LDRBroX
    2632U,	// LDRBui
    0U,	// LDRDl
    55U,	// LDRDpost
    45704U,	// LDRDpre
    53256U,	// LDRDroW
    53256U,	// LDRDroX
    2696U,	// LDRDui
    55U,	// LDRHHpost
    45704U,	// LDRHHpre
    53256U,	// LDRHHroW
    53256U,	// LDRHHroX
    2760U,	// LDRHHui
    55U,	// LDRHpost
    45704U,	// LDRHpre
    53256U,	// LDRHroW
    53256U,	// LDRHroX
    2760U,	// LDRHui
    0U,	// LDRQl
    55U,	// LDRQpost
    45704U,	// LDRQpre
    53256U,	// LDRQroW
    53256U,	// LDRQroX
    2824U,	// LDRQui
    55U,	// LDRSBWpost
    45704U,	// LDRSBWpre
    53256U,	// LDRSBWroW
    53256U,	// LDRSBWroX
    2632U,	// LDRSBWui
    55U,	// LDRSBXpost
    45704U,	// LDRSBXpre
    53256U,	// LDRSBXroW
    53256U,	// LDRSBXroX
    2632U,	// LDRSBXui
    55U,	// LDRSHWpost
    45704U,	// LDRSHWpre
    53256U,	// LDRSHWroW
    53256U,	// LDRSHWroX
    2760U,	// LDRSHWui
    55U,	// LDRSHXpost
    45704U,	// LDRSHXpre
    53256U,	// LDRSHXroW
    53256U,	// LDRSHXroX
    2760U,	// LDRSHXui
    0U,	// LDRSWl
    55U,	// LDRSWpost
    45704U,	// LDRSWpre
    53256U,	// LDRSWroW
    53256U,	// LDRSWroX
    2888U,	// LDRSWui
    0U,	// LDRSl
    55U,	// LDRSpost
    45704U,	// LDRSpre
    53256U,	// LDRSroW
    53256U,	// LDRSroX
    2888U,	// LDRSui
    0U,	// LDRWl
    55U,	// LDRWpost
    45704U,	// LDRWpre
    53256U,	// LDRWroW
    53256U,	// LDRWroX
    2888U,	// LDRWui
    0U,	// LDRXl
    55U,	// LDRXpost
    45704U,	// LDRXpre
    53256U,	// LDRXroW
    53256U,	// LDRXroX
    2696U,	// LDRXui
    0U,	// LDR_PXI
    0U,	// LDR_ZXI
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    57352U,	// LDTRBi
    57352U,	// LDTRHi
    57352U,	// LDTRSBWi
    57352U,	// LDTRSBXi
    57352U,	// LDTRSHWi
    57352U,	// LDTRSHXi
    57352U,	// LDTRSWi
    57352U,	// LDTRWi
    57352U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    57352U,	// LDURBBi
    57352U,	// LDURBi
    57352U,	// LDURDi
    57352U,	// LDURHHi
    57352U,	// LDURHi
    57352U,	// LDURQi
    57352U,	// LDURSBWi
    57352U,	// LDURSBXi
    57352U,	// LDURSHWi
    57352U,	// LDURSHXi
    57352U,	// LDURSWi
    57352U,	// LDURSi
    57352U,	// LDURWi
    57352U,	// LDURXi
    57369U,	// LDXPW
    57369U,	// LDXPX
    54U,	// LDXRB
    54U,	// LDXRH
    54U,	// LDXRW
    54U,	// LDXRX
    0U,	// LOADgot
    8U,	// LSLVWr
    8U,	// LSLVXr
    37268U,	// LSL_ZPmZ_B
    41365U,	// LSL_ZPmZ_D
    45462U,	// LSL_ZPmZ_H
    49559U,	// LSL_ZPmZ_S
    53U,	// LSL_ZZI_B
    53U,	// LSL_ZZI_D
    53U,	// LSL_ZZI_H
    53U,	// LSL_ZZI_S
    8U,	// LSRVWr
    8U,	// LSRVXr
    37268U,	// LSR_ZPmZ_B
    41365U,	// LSR_ZPmZ_D
    45462U,	// LSR_ZPmZ_H
    49559U,	// LSR_ZPmZ_S
    53U,	// LSR_ZZI_B
    53U,	// LSR_ZZI_D
    53U,	// LSR_ZZI_H
    53U,	// LSR_ZZI_S
    53256U,	// MADDWrrr
    53256U,	// MADDXrrr
    16524U,	// MLAv16i8
    20621U,	// MLAv2i32
    28813U,	// MLAv2i32_indexed
    24718U,	// MLAv4i16
    24718U,	// MLAv4i16_indexed
    8330U,	// MLAv4i32
    28810U,	// MLAv4i32_indexed
    12427U,	// MLAv8i16
    24715U,	// MLAv8i16_indexed
    28815U,	// MLAv8i8
    16524U,	// MLSv16i8
    20621U,	// MLSv2i32
    28813U,	// MLSv2i32_indexed
    24718U,	// MLSv4i16
    24718U,	// MLSv4i16_indexed
    8330U,	// MLSv4i32
    28810U,	// MLSv4i32_indexed
    12427U,	// MLSv8i16
    24715U,	// MLSv8i16_indexed
    28815U,	// MLSv8i8
    0U,	// MOVID
    1U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    56U,	// MOVIv2i32
    56U,	// MOVIv2s_msl
    56U,	// MOVIv4i16
    56U,	// MOVIv4i32
    56U,	// MOVIv4s_msl
    1U,	// MOVIv8b_ns
    56U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    56U,	// MOVNWi
    56U,	// MOVNXi
    56U,	// MOVZWi
    56U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    53256U,	// MSUBWrrr
    53256U,	// MSUBXrrr
    16460U,	// MULv16i8
    20557U,	// MULv2i32
    28749U,	// MULv2i32_indexed
    24654U,	// MULv4i16
    24654U,	// MULv4i16_indexed
    8266U,	// MULv4i32
    28746U,	// MULv4i32_indexed
    12363U,	// MULv8i16
    24651U,	// MULv8i16_indexed
    28751U,	// MULv8i8
    56U,	// MVNIv2i32
    56U,	// MVNIv2s_msl
    56U,	// MVNIv4i16
    56U,	// MVNIv4i32
    56U,	// MVNIv4s_msl
    56U,	// MVNIv8i16
    0U,	// NEGv16i8
    1U,	// NEGv1i64
    2U,	// NEGv2i32
    3U,	// NEGv2i64
    4U,	// NEGv4i16
    5U,	// NEGv4i32
    6U,	// NEGv8i16
    7U,	// NEGv8i8
    0U,	// NOTv16i8
    7U,	// NOTv8i8
    0U,	// ORNWrr
    264U,	// ORNWrs
    0U,	// ORNXrr
    264U,	// ORNXrs
    16460U,	// ORNv16i8
    28751U,	// ORNv8i8
    520U,	// ORRWri
    0U,	// ORRWrr
    264U,	// ORRWrs
    584U,	// ORRXri
    0U,	// ORRXrr
    264U,	// ORRXrs
    24U,	// ORR_ZI
    37268U,	// ORR_ZPmZ_B
    41365U,	// ORR_ZPmZ_D
    45462U,	// ORR_ZPmZ_H
    49559U,	// ORR_ZPmZ_S
    469U,	// ORR_ZZZ
    16460U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    28751U,	// ORRv8i8
    1U,	// PACDA
    1U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    8U,	// PACGA
    1U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    1U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    16460U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    28751U,	// PMULLv8i8
    16460U,	// PMULv16i8
    28751U,	// PMULv8i8
    54U,	// PRFB_D_PZI
    0U,	// PRFB_D_SCALED
    0U,	// PRFB_D_SXTW_SCALED
    0U,	// PRFB_D_UXTW_SCALED
    57U,	// PRFB_PRI
    0U,	// PRFB_PRR
    54U,	// PRFB_S_PZI
    0U,	// PRFB_S_SXTW_SCALED
    0U,	// PRFB_S_UXTW_SCALED
    0U,	// PRFD_D_PZI
    0U,	// PRFD_D_SCALED
    0U,	// PRFD_D_SXTW_SCALED
    0U,	// PRFD_D_UXTW_SCALED
    57U,	// PRFD_PRI
    0U,	// PRFD_PRR
    0U,	// PRFD_S_PZI
    0U,	// PRFD_S_SXTW_SCALED
    0U,	// PRFD_S_UXTW_SCALED
    0U,	// PRFH_D_PZI
    0U,	// PRFH_D_SCALED
    0U,	// PRFH_D_SXTW_SCALED
    0U,	// PRFH_D_UXTW_SCALED
    57U,	// PRFH_PRI
    0U,	// PRFH_PRR
    0U,	// PRFH_S_PZI
    0U,	// PRFH_S_SXTW_SCALED
    0U,	// PRFH_S_UXTW_SCALED
    0U,	// PRFMl
    53256U,	// PRFMroW
    53256U,	// PRFMroX
    2696U,	// PRFMui
    0U,	// PRFS_PRR
    57352U,	// PRFUMi
    0U,	// PRFW_D_PZI
    0U,	// PRFW_D_SCALED
    0U,	// PRFW_D_SXTW_SCALED
    0U,	// PRFW_D_UXTW_SCALED
    57U,	// PRFW_PRI
    0U,	// PRFW_S_PZI
    0U,	// PRFW_S_SXTW_SCALED
    0U,	// PRFW_S_UXTW_SCALED
    0U,	// PTRUES_B
    0U,	// PTRUES_D
    0U,	// PTRUES_H
    0U,	// PTRUES_S
    0U,	// PTRUE_B
    0U,	// PTRUE_D
    0U,	// PTRUE_H
    0U,	// PTRUE_S
    4169U,	// RADDHNv2i64_v2i32
    4233U,	// RADDHNv2i64_v4i32
    8266U,	// RADDHNv4i32_v4i16
    8330U,	// RADDHNv4i32_v8i16
    12427U,	// RADDHNv8i16_v16i8
    12363U,	// RADDHNv8i16_v8i8
    1U,	// RBITWr
    1U,	// RBITXr
    0U,	// RBITv16i8
    7U,	// RBITv8i8
    1U,	// RDVLI_XI
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    1U,	// REV16Wr
    1U,	// REV16Xr
    0U,	// REV16v16i8
    7U,	// REV16v8i8
    1U,	// REV32Xr
    0U,	// REV32v16i8
    4U,	// REV32v4i16
    6U,	// REV32v8i16
    7U,	// REV32v8i8
    0U,	// REV64v16i8
    2U,	// REV64v2i32
    4U,	// REV64v4i16
    5U,	// REV64v4i32
    6U,	// REV64v8i16
    7U,	// REV64v8i8
    1U,	// REVWr
    1U,	// REVXr
    8U,	// RORVWr
    8U,	// RORVXr
    651U,	// RSHRNv16i8_shift
    9U,	// RSHRNv2i32_shift
    10U,	// RSHRNv4i16_shift
    649U,	// RSHRNv4i32_shift
    650U,	// RSHRNv8i16_shift
    11U,	// RSHRNv8i8_shift
    4169U,	// RSUBHNv2i64_v2i32
    4233U,	// RSUBHNv2i64_v4i32
    8266U,	// RSUBHNv4i32_v4i16
    8330U,	// RSUBHNv4i32_v8i16
    12427U,	// RSUBHNv8i16_v16i8
    12363U,	// RSUBHNv8i16_v8i8
    16524U,	// SABALv16i8_v8i16
    20621U,	// SABALv2i32_v2i64
    24718U,	// SABALv4i16_v4i32
    8330U,	// SABALv4i32_v2i64
    12427U,	// SABALv8i16_v4i32
    28815U,	// SABALv8i8_v8i16
    16524U,	// SABAv16i8
    20621U,	// SABAv2i32
    24718U,	// SABAv4i16
    8330U,	// SABAv4i32
    12427U,	// SABAv8i16
    28815U,	// SABAv8i8
    16460U,	// SABDLv16i8_v8i16
    20557U,	// SABDLv2i32_v2i64
    24654U,	// SABDLv4i16_v4i32
    8266U,	// SABDLv4i32_v2i64
    12363U,	// SABDLv8i16_v4i32
    28751U,	// SABDLv8i8_v8i16
    16460U,	// SABDv16i8
    20557U,	// SABDv2i32
    24654U,	// SABDv4i16
    8266U,	// SABDv4i32
    12363U,	// SABDv8i16
    28751U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    2U,	// SADALPv2i32_v1i64
    4U,	// SADALPv4i16_v2i32
    5U,	// SADALPv4i32_v2i64
    6U,	// SADALPv8i16_v4i32
    7U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    2U,	// SADDLPv2i32_v1i64
    4U,	// SADDLPv4i16_v2i32
    5U,	// SADDLPv4i32_v2i64
    6U,	// SADDLPv8i16_v4i32
    7U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    4U,	// SADDLVv4i16v
    5U,	// SADDLVv4i32v
    6U,	// SADDLVv8i16v
    7U,	// SADDLVv8i8v
    16460U,	// SADDLv16i8_v8i16
    20557U,	// SADDLv2i32_v2i64
    24654U,	// SADDLv4i16_v4i32
    8266U,	// SADDLv4i32_v2i64
    12363U,	// SADDLv8i16_v4i32
    28751U,	// SADDLv8i8_v8i16
    16459U,	// SADDWv16i8_v8i16
    20553U,	// SADDWv2i32_v2i64
    24650U,	// SADDWv4i16_v4i32
    8265U,	// SADDWv4i32_v2i64
    12362U,	// SADDWv8i16_v4i32
    28747U,	// SADDWv8i8_v8i16
    8U,	// SBCSWr
    8U,	// SBCSXr
    8U,	// SBCWr
    8U,	// SBCXr
    53256U,	// SBFMWri
    53256U,	// SBFMXri
    8U,	// SCVTFDHr
    8U,	// SCVTFHDr
    8U,	// SCVTFHSr
    8U,	// SCVTFSHr
    8U,	// SCVTFSWDri
    8U,	// SCVTFSWHri
    8U,	// SCVTFSWSri
    8U,	// SCVTFSXDri
    8U,	// SCVTFSXHri
    8U,	// SCVTFSXSri
    1U,	// SCVTFUWDri
    1U,	// SCVTFUWHri
    1U,	// SCVTFUWSri
    1U,	// SCVTFUXDri
    1U,	// SCVTFUXHri
    1U,	// SCVTFUXSri
    8U,	// SCVTFd
    8U,	// SCVTFh
    8U,	// SCVTFs
    1U,	// SCVTFv1i16
    1U,	// SCVTFv1i32
    1U,	// SCVTFv1i64
    2U,	// SCVTFv2f32
    3U,	// SCVTFv2f64
    13U,	// SCVTFv2i32_shift
    9U,	// SCVTFv2i64_shift
    4U,	// SCVTFv4f16
    5U,	// SCVTFv4f32
    14U,	// SCVTFv4i16_shift
    10U,	// SCVTFv4i32_shift
    6U,	// SCVTFv8f16
    11U,	// SCVTFv8i16_shift
    8U,	// SDIVWr
    8U,	// SDIVXr
    49292U,	// SDOTlanev16i8
    49295U,	// SDOTlanev8i8
    16524U,	// SDOTv16i8
    28815U,	// SDOTv8i8
    8328U,	// SHA1Crrr
    1U,	// SHA1Hrr
    8328U,	// SHA1Mrrr
    8328U,	// SHA1Prrr
    8330U,	// SHA1SU0rrr
    5U,	// SHA1SU1rr
    8328U,	// SHA256H2rrr
    8328U,	// SHA256Hrrr
    5U,	// SHA256SU0rr
    8330U,	// SHA256SU1rrr
    16460U,	// SHADDv16i8
    20557U,	// SHADDv2i32
    24654U,	// SHADDv4i16
    8266U,	// SHADDv4i32
    12363U,	// SHADDv8i16
    28751U,	// SHADDv8i8
    58U,	// SHLLv16i8
    59U,	// SHLLv2i32
    60U,	// SHLLv4i16
    61U,	// SHLLv4i32
    62U,	// SHLLv8i16
    63U,	// SHLLv8i8
    8U,	// SHLd
    12U,	// SHLv16i8_shift
    13U,	// SHLv2i32_shift
    9U,	// SHLv2i64_shift
    14U,	// SHLv4i16_shift
    10U,	// SHLv4i32_shift
    11U,	// SHLv8i16_shift
    15U,	// SHLv8i8_shift
    651U,	// SHRNv16i8_shift
    9U,	// SHRNv2i32_shift
    10U,	// SHRNv4i16_shift
    649U,	// SHRNv4i32_shift
    650U,	// SHRNv8i16_shift
    11U,	// SHRNv8i8_shift
    16460U,	// SHSUBv16i8
    20557U,	// SHSUBv2i32
    24654U,	// SHSUBv4i16
    8266U,	// SHSUBv4i32
    12363U,	// SHSUBv8i16
    28751U,	// SHSUBv8i8
    648U,	// SLId
    652U,	// SLIv16i8_shift
    653U,	// SLIv2i32_shift
    649U,	// SLIv2i64_shift
    654U,	// SLIv4i16_shift
    650U,	// SLIv4i32_shift
    651U,	// SLIv8i16_shift
    655U,	// SLIv8i8_shift
    53256U,	// SMADDLrrr
    16460U,	// SMAXPv16i8
    20557U,	// SMAXPv2i32
    24654U,	// SMAXPv4i16
    8266U,	// SMAXPv4i32
    12363U,	// SMAXPv8i16
    28751U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    4U,	// SMAXVv4i16v
    5U,	// SMAXVv4i32v
    6U,	// SMAXVv8i16v
    7U,	// SMAXVv8i8v
    16460U,	// SMAXv16i8
    20557U,	// SMAXv2i32
    24654U,	// SMAXv4i16
    8266U,	// SMAXv4i32
    12363U,	// SMAXv8i16
    28751U,	// SMAXv8i8
    0U,	// SMC
    16460U,	// SMINPv16i8
    20557U,	// SMINPv2i32
    24654U,	// SMINPv4i16
    8266U,	// SMINPv4i32
    12363U,	// SMINPv8i16
    28751U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    4U,	// SMINVv4i16v
    5U,	// SMINVv4i32v
    6U,	// SMINVv8i16v
    7U,	// SMINVv8i8v
    16460U,	// SMINv16i8
    20557U,	// SMINv2i32
    24654U,	// SMINv4i16
    8266U,	// SMINv4i32
    12363U,	// SMINv8i16
    28751U,	// SMINv8i8
    16524U,	// SMLALv16i8_v8i16
    28813U,	// SMLALv2i32_indexed
    20621U,	// SMLALv2i32_v2i64
    24718U,	// SMLALv4i16_indexed
    24718U,	// SMLALv4i16_v4i32
    28810U,	// SMLALv4i32_indexed
    8330U,	// SMLALv4i32_v2i64
    24715U,	// SMLALv8i16_indexed
    12427U,	// SMLALv8i16_v4i32
    28815U,	// SMLALv8i8_v8i16
    16524U,	// SMLSLv16i8_v8i16
    28813U,	// SMLSLv2i32_indexed
    20621U,	// SMLSLv2i32_v2i64
    24718U,	// SMLSLv4i16_indexed
    24718U,	// SMLSLv4i16_v4i32
    28810U,	// SMLSLv4i32_indexed
    8330U,	// SMLSLv4i32_v2i64
    24715U,	// SMLSLv8i16_indexed
    12427U,	// SMLSLv8i16_v4i32
    28815U,	// SMLSLv8i8_v8i16
    742U,	// SMOVvi16to32
    742U,	// SMOVvi16to64
    743U,	// SMOVvi32to64
    745U,	// SMOVvi8to32
    745U,	// SMOVvi8to64
    53256U,	// SMSUBLrrr
    8U,	// SMULHrr
    16460U,	// SMULLv16i8_v8i16
    28749U,	// SMULLv2i32_indexed
    20557U,	// SMULLv2i32_v2i64
    24654U,	// SMULLv4i16_indexed
    24654U,	// SMULLv4i16_v4i32
    28746U,	// SMULLv4i32_indexed
    8266U,	// SMULLv4i32_v2i64
    24651U,	// SMULLv8i16_indexed
    12363U,	// SMULLv8i16_v4i32
    28751U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    1U,	// SQABSv1i16
    1U,	// SQABSv1i32
    1U,	// SQABSv1i64
    1U,	// SQABSv1i8
    2U,	// SQABSv2i32
    3U,	// SQABSv2i64
    4U,	// SQABSv4i16
    5U,	// SQABSv4i32
    6U,	// SQABSv8i16
    7U,	// SQABSv8i8
    16460U,	// SQADDv16i8
    8U,	// SQADDv1i16
    8U,	// SQADDv1i32
    8U,	// SQADDv1i64
    8U,	// SQADDv1i8
    20557U,	// SQADDv2i32
    4169U,	// SQADDv2i64
    24654U,	// SQADDv4i16
    8266U,	// SQADDv4i32
    12363U,	// SQADDv8i16
    28751U,	// SQADDv8i8
    648U,	// SQDMLALi16
    648U,	// SQDMLALi32
    24712U,	// SQDMLALv1i32_indexed
    28808U,	// SQDMLALv1i64_indexed
    28813U,	// SQDMLALv2i32_indexed
    20621U,	// SQDMLALv2i32_v2i64
    24718U,	// SQDMLALv4i16_indexed
    24718U,	// SQDMLALv4i16_v4i32
    28810U,	// SQDMLALv4i32_indexed
    8330U,	// SQDMLALv4i32_v2i64
    24715U,	// SQDMLALv8i16_indexed
    12427U,	// SQDMLALv8i16_v4i32
    648U,	// SQDMLSLi16
    648U,	// SQDMLSLi32
    24712U,	// SQDMLSLv1i32_indexed
    28808U,	// SQDMLSLv1i64_indexed
    28813U,	// SQDMLSLv2i32_indexed
    20621U,	// SQDMLSLv2i32_v2i64
    24718U,	// SQDMLSLv4i16_indexed
    24718U,	// SQDMLSLv4i16_v4i32
    28810U,	// SQDMLSLv4i32_indexed
    8330U,	// SQDMLSLv4i32_v2i64
    24715U,	// SQDMLSLv8i16_indexed
    12427U,	// SQDMLSLv8i16_v4i32
    8U,	// SQDMULHv1i16
    24648U,	// SQDMULHv1i16_indexed
    8U,	// SQDMULHv1i32
    28744U,	// SQDMULHv1i32_indexed
    20557U,	// SQDMULHv2i32
    28749U,	// SQDMULHv2i32_indexed
    24654U,	// SQDMULHv4i16
    24654U,	// SQDMULHv4i16_indexed
    8266U,	// SQDMULHv4i32
    28746U,	// SQDMULHv4i32_indexed
    12363U,	// SQDMULHv8i16
    24651U,	// SQDMULHv8i16_indexed
    8U,	// SQDMULLi16
    8U,	// SQDMULLi32
    24648U,	// SQDMULLv1i32_indexed
    28744U,	// SQDMULLv1i64_indexed
    28749U,	// SQDMULLv2i32_indexed
    20557U,	// SQDMULLv2i32_v2i64
    24654U,	// SQDMULLv4i16_indexed
    24654U,	// SQDMULLv4i16_v4i32
    28746U,	// SQDMULLv4i32_indexed
    8266U,	// SQDMULLv4i32_v2i64
    24651U,	// SQDMULLv8i16_indexed
    12363U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    1U,	// SQNEGv1i16
    1U,	// SQNEGv1i32
    1U,	// SQNEGv1i64
    1U,	// SQNEGv1i8
    2U,	// SQNEGv2i32
    3U,	// SQNEGv2i64
    4U,	// SQNEGv4i16
    5U,	// SQNEGv4i32
    6U,	// SQNEGv8i16
    7U,	// SQNEGv8i8
    24712U,	// SQRDMLAHi16_indexed
    28808U,	// SQRDMLAHi32_indexed
    648U,	// SQRDMLAHv1i16
    648U,	// SQRDMLAHv1i32
    20621U,	// SQRDMLAHv2i32
    28813U,	// SQRDMLAHv2i32_indexed
    24718U,	// SQRDMLAHv4i16
    24718U,	// SQRDMLAHv4i16_indexed
    8330U,	// SQRDMLAHv4i32
    28810U,	// SQRDMLAHv4i32_indexed
    12427U,	// SQRDMLAHv8i16
    24715U,	// SQRDMLAHv8i16_indexed
    24712U,	// SQRDMLSHi16_indexed
    28808U,	// SQRDMLSHi32_indexed
    648U,	// SQRDMLSHv1i16
    648U,	// SQRDMLSHv1i32
    20621U,	// SQRDMLSHv2i32
    28813U,	// SQRDMLSHv2i32_indexed
    24718U,	// SQRDMLSHv4i16
    24718U,	// SQRDMLSHv4i16_indexed
    8330U,	// SQRDMLSHv4i32
    28810U,	// SQRDMLSHv4i32_indexed
    12427U,	// SQRDMLSHv8i16
    24715U,	// SQRDMLSHv8i16_indexed
    8U,	// SQRDMULHv1i16
    24648U,	// SQRDMULHv1i16_indexed
    8U,	// SQRDMULHv1i32
    28744U,	// SQRDMULHv1i32_indexed
    20557U,	// SQRDMULHv2i32
    28749U,	// SQRDMULHv2i32_indexed
    24654U,	// SQRDMULHv4i16
    24654U,	// SQRDMULHv4i16_indexed
    8266U,	// SQRDMULHv4i32
    28746U,	// SQRDMULHv4i32_indexed
    12363U,	// SQRDMULHv8i16
    24651U,	// SQRDMULHv8i16_indexed
    16460U,	// SQRSHLv16i8
    8U,	// SQRSHLv1i16
    8U,	// SQRSHLv1i32
    8U,	// SQRSHLv1i64
    8U,	// SQRSHLv1i8
    20557U,	// SQRSHLv2i32
    4169U,	// SQRSHLv2i64
    24654U,	// SQRSHLv4i16
    8266U,	// SQRSHLv4i32
    12363U,	// SQRSHLv8i16
    28751U,	// SQRSHLv8i8
    8U,	// SQRSHRNb
    8U,	// SQRSHRNh
    8U,	// SQRSHRNs
    651U,	// SQRSHRNv16i8_shift
    9U,	// SQRSHRNv2i32_shift
    10U,	// SQRSHRNv4i16_shift
    649U,	// SQRSHRNv4i32_shift
    650U,	// SQRSHRNv8i16_shift
    11U,	// SQRSHRNv8i8_shift
    8U,	// SQRSHRUNb
    8U,	// SQRSHRUNh
    8U,	// SQRSHRUNs
    651U,	// SQRSHRUNv16i8_shift
    9U,	// SQRSHRUNv2i32_shift
    10U,	// SQRSHRUNv4i16_shift
    649U,	// SQRSHRUNv4i32_shift
    650U,	// SQRSHRUNv8i16_shift
    11U,	// SQRSHRUNv8i8_shift
    8U,	// SQSHLUb
    8U,	// SQSHLUd
    8U,	// SQSHLUh
    8U,	// SQSHLUs
    12U,	// SQSHLUv16i8_shift
    13U,	// SQSHLUv2i32_shift
    9U,	// SQSHLUv2i64_shift
    14U,	// SQSHLUv4i16_shift
    10U,	// SQSHLUv4i32_shift
    11U,	// SQSHLUv8i16_shift
    15U,	// SQSHLUv8i8_shift
    8U,	// SQSHLb
    8U,	// SQSHLd
    8U,	// SQSHLh
    8U,	// SQSHLs
    16460U,	// SQSHLv16i8
    12U,	// SQSHLv16i8_shift
    8U,	// SQSHLv1i16
    8U,	// SQSHLv1i32
    8U,	// SQSHLv1i64
    8U,	// SQSHLv1i8
    20557U,	// SQSHLv2i32
    13U,	// SQSHLv2i32_shift
    4169U,	// SQSHLv2i64
    9U,	// SQSHLv2i64_shift
    24654U,	// SQSHLv4i16
    14U,	// SQSHLv4i16_shift
    8266U,	// SQSHLv4i32
    10U,	// SQSHLv4i32_shift
    12363U,	// SQSHLv8i16
    11U,	// SQSHLv8i16_shift
    28751U,	// SQSHLv8i8
    15U,	// SQSHLv8i8_shift
    8U,	// SQSHRNb
    8U,	// SQSHRNh
    8U,	// SQSHRNs
    651U,	// SQSHRNv16i8_shift
    9U,	// SQSHRNv2i32_shift
    10U,	// SQSHRNv4i16_shift
    649U,	// SQSHRNv4i32_shift
    650U,	// SQSHRNv8i16_shift
    11U,	// SQSHRNv8i8_shift
    8U,	// SQSHRUNb
    8U,	// SQSHRUNh
    8U,	// SQSHRUNs
    651U,	// SQSHRUNv16i8_shift
    9U,	// SQSHRUNv2i32_shift
    10U,	// SQSHRUNv4i16_shift
    649U,	// SQSHRUNv4i32_shift
    650U,	// SQSHRUNv8i16_shift
    11U,	// SQSHRUNv8i8_shift
    16460U,	// SQSUBv16i8
    8U,	// SQSUBv1i16
    8U,	// SQSUBv1i32
    8U,	// SQSUBv1i64
    8U,	// SQSUBv1i8
    20557U,	// SQSUBv2i32
    4169U,	// SQSUBv2i64
    24654U,	// SQSUBv4i16
    8266U,	// SQSUBv4i32
    12363U,	// SQSUBv8i16
    28751U,	// SQSUBv8i8
    6U,	// SQXTNv16i8
    1U,	// SQXTNv1i16
    1U,	// SQXTNv1i32
    1U,	// SQXTNv1i8
    3U,	// SQXTNv2i32
    5U,	// SQXTNv4i16
    3U,	// SQXTNv4i32
    5U,	// SQXTNv8i16
    6U,	// SQXTNv8i8
    6U,	// SQXTUNv16i8
    1U,	// SQXTUNv1i16
    1U,	// SQXTUNv1i32
    1U,	// SQXTUNv1i8
    3U,	// SQXTUNv2i32
    5U,	// SQXTUNv4i16
    3U,	// SQXTUNv4i32
    5U,	// SQXTUNv8i16
    6U,	// SQXTUNv8i8
    16460U,	// SRHADDv16i8
    20557U,	// SRHADDv2i32
    24654U,	// SRHADDv4i16
    8266U,	// SRHADDv4i32
    12363U,	// SRHADDv8i16
    28751U,	// SRHADDv8i8
    648U,	// SRId
    652U,	// SRIv16i8_shift
    653U,	// SRIv2i32_shift
    649U,	// SRIv2i64_shift
    654U,	// SRIv4i16_shift
    650U,	// SRIv4i32_shift
    651U,	// SRIv8i16_shift
    655U,	// SRIv8i8_shift
    16460U,	// SRSHLv16i8
    8U,	// SRSHLv1i64
    20557U,	// SRSHLv2i32
    4169U,	// SRSHLv2i64
    24654U,	// SRSHLv4i16
    8266U,	// SRSHLv4i32
    12363U,	// SRSHLv8i16
    28751U,	// SRSHLv8i8
    8U,	// SRSHRd
    12U,	// SRSHRv16i8_shift
    13U,	// SRSHRv2i32_shift
    9U,	// SRSHRv2i64_shift
    14U,	// SRSHRv4i16_shift
    10U,	// SRSHRv4i32_shift
    11U,	// SRSHRv8i16_shift
    15U,	// SRSHRv8i8_shift
    648U,	// SRSRAd
    652U,	// SRSRAv16i8_shift
    653U,	// SRSRAv2i32_shift
    649U,	// SRSRAv2i64_shift
    654U,	// SRSRAv4i16_shift
    650U,	// SRSRAv4i32_shift
    651U,	// SRSRAv8i16_shift
    655U,	// SRSRAv8i8_shift
    12U,	// SSHLLv16i8_shift
    13U,	// SSHLLv2i32_shift
    14U,	// SSHLLv4i16_shift
    10U,	// SSHLLv4i32_shift
    11U,	// SSHLLv8i16_shift
    15U,	// SSHLLv8i8_shift
    16460U,	// SSHLv16i8
    8U,	// SSHLv1i64
    20557U,	// SSHLv2i32
    4169U,	// SSHLv2i64
    24654U,	// SSHLv4i16
    8266U,	// SSHLv4i32
    12363U,	// SSHLv8i16
    28751U,	// SSHLv8i8
    8U,	// SSHRd
    12U,	// SSHRv16i8_shift
    13U,	// SSHRv2i32_shift
    9U,	// SSHRv2i64_shift
    14U,	// SSHRv4i16_shift
    10U,	// SSHRv4i32_shift
    11U,	// SSHRv8i16_shift
    15U,	// SSHRv8i8_shift
    648U,	// SSRAd
    652U,	// SSRAv16i8_shift
    653U,	// SSRAv2i32_shift
    649U,	// SSRAv2i64_shift
    654U,	// SSRAv4i16_shift
    650U,	// SSRAv4i32_shift
    651U,	// SSRAv8i16_shift
    655U,	// SSRAv8i8_shift
    776U,	// SST1B_D
    49U,	// SST1B_D_IMM
    840U,	// SST1B_D_SXTW
    904U,	// SST1B_D_UXTW
    49U,	// SST1B_S_IMM
    968U,	// SST1B_S_SXTW
    1032U,	// SST1B_S_UXTW
    776U,	// SST1D
    50U,	// SST1D_IMM
    1096U,	// SST1D_SCALED
    840U,	// SST1D_SXTW
    1160U,	// SST1D_SXTW_SCALED
    904U,	// SST1D_UXTW
    1224U,	// SST1D_UXTW_SCALED
    776U,	// SST1H_D
    51U,	// SST1H_D_IMM
    1288U,	// SST1H_D_SCALED
    840U,	// SST1H_D_SXTW
    1352U,	// SST1H_D_SXTW_SCALED
    904U,	// SST1H_D_UXTW
    1416U,	// SST1H_D_UXTW_SCALED
    51U,	// SST1H_S_IMM
    968U,	// SST1H_S_SXTW
    1480U,	// SST1H_S_SXTW_SCALED
    1032U,	// SST1H_S_UXTW
    1544U,	// SST1H_S_UXTW_SCALED
    776U,	// SST1W_D
    52U,	// SST1W_D_IMM
    1608U,	// SST1W_D_SCALED
    840U,	// SST1W_D_SXTW
    1672U,	// SST1W_D_SXTW_SCALED
    904U,	// SST1W_D_UXTW
    1736U,	// SST1W_D_UXTW_SCALED
    52U,	// SST1W_IMM
    968U,	// SST1W_SXTW
    1800U,	// SST1W_SXTW_SCALED
    1032U,	// SST1W_UXTW
    1864U,	// SST1W_UXTW_SCALED
    16460U,	// SSUBLv16i8_v8i16
    20557U,	// SSUBLv2i32_v2i64
    24654U,	// SSUBLv4i16_v4i32
    8266U,	// SSUBLv4i32_v2i64
    12363U,	// SSUBLv8i16_v4i32
    28751U,	// SSUBLv8i8_v8i16
    16459U,	// SSUBWv16i8_v8i16
    20553U,	// SSUBWv2i32_v2i64
    24650U,	// SSUBWv4i16_v4i32
    8265U,	// SSUBWv4i32_v2i64
    12362U,	// SSUBWv8i16_v4i32
    28747U,	// SSUBWv8i8_v8i16
    1992U,	// ST1B
    1992U,	// ST1B_D
    37512U,	// ST1B_D_IMM
    1992U,	// ST1B_H
    37512U,	// ST1B_H_IMM
    37512U,	// ST1B_IMM
    1992U,	// ST1B_S
    37512U,	// ST1B_S_IMM
    2056U,	// ST1D
    37512U,	// ST1D_IMM
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    2120U,	// ST1H
    2120U,	// ST1H_D
    37512U,	// ST1H_D_IMM
    37512U,	// ST1H_IMM
    2120U,	// ST1H_S
    37512U,	// ST1H_S_IMM
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    2376U,	// ST1W
    2376U,	// ST1W_D
    37512U,	// ST1W_D_IMM
    37512U,	// ST1W_IMM
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    1992U,	// ST2B
    39112U,	// ST2B_IMM
    2056U,	// ST2D
    39112U,	// ST2D_IMM
    2120U,	// ST2H
    39112U,	// ST2H_IMM
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    2376U,	// ST2W
    39112U,	// ST2W_IMM
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    1992U,	// ST3B
    2504U,	// ST3B_IMM
    2056U,	// ST3D
    2504U,	// ST3D_IMM
    2120U,	// ST3H
    2504U,	// ST3H_IMM
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    2376U,	// ST3W
    2504U,	// ST3W_IMM
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    1992U,	// ST4B
    39304U,	// ST4B_IMM
    2056U,	// ST4D
    39304U,	// ST4D_IMM
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    2120U,	// ST4H
    39304U,	// ST4H_IMM
    2376U,	// ST4W
    39304U,	// ST4W_IMM
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    54U,	// STLLRB
    54U,	// STLLRH
    54U,	// STLLRW
    54U,	// STLLRX
    54U,	// STLRB
    54U,	// STLRH
    54U,	// STLRW
    54U,	// STLRX
    53256U,	// STLXPW
    53256U,	// STLXPX
    57369U,	// STLXRB
    57369U,	// STLXRH
    57369U,	// STLXRW
    57369U,	// STLXRX
    53273U,	// STNPDi
    53273U,	// STNPQi
    53273U,	// STNPSi
    53273U,	// STNPWi
    53273U,	// STNPXi
    37512U,	// STNT1B_ZRI
    1992U,	// STNT1B_ZRR
    37512U,	// STNT1D_ZRI
    2056U,	// STNT1D_ZRR
    37512U,	// STNT1H_ZRI
    2120U,	// STNT1H_ZRR
    37512U,	// STNT1W_ZRI
    2376U,	// STNT1W_ZRR
    53273U,	// STPDi
    41625U,	// STPDpost
    53913U,	// STPDpre
    53273U,	// STPQi
    41625U,	// STPQpost
    53913U,	// STPQpre
    53273U,	// STPSi
    41625U,	// STPSpost
    53913U,	// STPSpre
    53273U,	// STPWi
    41625U,	// STPWpost
    53913U,	// STPWpre
    53273U,	// STPXi
    41625U,	// STPXpost
    53913U,	// STPXpre
    55U,	// STRBBpost
    45704U,	// STRBBpre
    53256U,	// STRBBroW
    53256U,	// STRBBroX
    2632U,	// STRBBui
    55U,	// STRBpost
    45704U,	// STRBpre
    53256U,	// STRBroW
    53256U,	// STRBroX
    2632U,	// STRBui
    55U,	// STRDpost
    45704U,	// STRDpre
    53256U,	// STRDroW
    53256U,	// STRDroX
    2696U,	// STRDui
    55U,	// STRHHpost
    45704U,	// STRHHpre
    53256U,	// STRHHroW
    53256U,	// STRHHroX
    2760U,	// STRHHui
    55U,	// STRHpost
    45704U,	// STRHpre
    53256U,	// STRHroW
    53256U,	// STRHroX
    2760U,	// STRHui
    55U,	// STRQpost
    45704U,	// STRQpre
    53256U,	// STRQroW
    53256U,	// STRQroX
    2824U,	// STRQui
    55U,	// STRSpost
    45704U,	// STRSpre
    53256U,	// STRSroW
    53256U,	// STRSroX
    2888U,	// STRSui
    55U,	// STRWpost
    45704U,	// STRWpre
    53256U,	// STRWroW
    53256U,	// STRWroX
    2888U,	// STRWui
    55U,	// STRXpost
    45704U,	// STRXpre
    53256U,	// STRXroW
    53256U,	// STRXroX
    2696U,	// STRXui
    0U,	// STR_PXI
    0U,	// STR_ZXI
    57352U,	// STTRBi
    57352U,	// STTRHi
    57352U,	// STTRWi
    57352U,	// STTRXi
    57352U,	// STURBBi
    57352U,	// STURBi
    57352U,	// STURDi
    57352U,	// STURHHi
    57352U,	// STURHi
    57352U,	// STURQi
    57352U,	// STURSi
    57352U,	// STURWi
    57352U,	// STURXi
    53256U,	// STXPW
    53256U,	// STXPX
    57369U,	// STXRB
    57369U,	// STXRH
    57369U,	// STXRW
    57369U,	// STXRX
    4169U,	// SUBHNv2i64_v2i32
    4233U,	// SUBHNv2i64_v4i32
    8266U,	// SUBHNv4i32_v4i16
    8330U,	// SUBHNv4i32_v8i16
    12427U,	// SUBHNv8i16_v16i8
    12363U,	// SUBHNv8i16_v8i8
    200U,	// SUBSWri
    0U,	// SUBSWrr
    264U,	// SUBSWrs
    328U,	// SUBSWrx
    200U,	// SUBSXri
    0U,	// SUBSXrr
    264U,	// SUBSXrs
    328U,	// SUBSXrx
    32776U,	// SUBSXrx64
    200U,	// SUBWri
    0U,	// SUBWrr
    264U,	// SUBWrs
    328U,	// SUBWrx
    200U,	// SUBXri
    0U,	// SUBXrr
    264U,	// SUBXrs
    328U,	// SUBXrx
    32776U,	// SUBXrx64
    16U,	// SUB_ZI_B
    17U,	// SUB_ZI_D
    18U,	// SUB_ZI_H
    19U,	// SUB_ZI_S
    37268U,	// SUB_ZPmZ_B
    41365U,	// SUB_ZPmZ_D
    45462U,	// SUB_ZPmZ_H
    49559U,	// SUB_ZPmZ_S
    468U,	// SUB_ZZZ_B
    469U,	// SUB_ZZZ_D
    470U,	// SUB_ZZZ_H
    471U,	// SUB_ZZZ_S
    16460U,	// SUBv16i8
    8U,	// SUBv1i64
    20557U,	// SUBv2i32
    4169U,	// SUBv2i64
    24654U,	// SUBv4i16
    8266U,	// SUBv4i32
    12363U,	// SUBv8i16
    28751U,	// SUBv8i8
    0U,	// SUQADDv16i8
    1U,	// SUQADDv1i16
    1U,	// SUQADDv1i32
    1U,	// SUQADDv1i64
    1U,	// SUQADDv1i8
    2U,	// SUQADDv2i32
    3U,	// SUQADDv2i64
    4U,	// SUQADDv4i16
    5U,	// SUQADDv4i32
    6U,	// SUQADDv8i16
    7U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    2952U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    7U,	// TBLv8i8Four
    7U,	// TBLv8i8One
    7U,	// TBLv8i8Three
    7U,	// TBLv8i8Two
    3016U,	// TBNZW
    3016U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    7U,	// TBXv8i8Four
    7U,	// TBXv8i8One
    7U,	// TBXv8i8Three
    7U,	// TBXv8i8Two
    3016U,	// TBZW
    3016U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    16460U,	// TRN1v16i8
    20557U,	// TRN1v2i32
    4169U,	// TRN1v2i64
    24654U,	// TRN1v4i16
    8266U,	// TRN1v4i32
    12363U,	// TRN1v8i16
    28751U,	// TRN1v8i8
    16460U,	// TRN2v16i8
    20557U,	// TRN2v2i32
    4169U,	// TRN2v2i64
    24654U,	// TRN2v4i16
    8266U,	// TRN2v4i32
    12363U,	// TRN2v8i16
    28751U,	// TRN2v8i8
    16524U,	// UABALv16i8_v8i16
    20621U,	// UABALv2i32_v2i64
    24718U,	// UABALv4i16_v4i32
    8330U,	// UABALv4i32_v2i64
    12427U,	// UABALv8i16_v4i32
    28815U,	// UABALv8i8_v8i16
    16524U,	// UABAv16i8
    20621U,	// UABAv2i32
    24718U,	// UABAv4i16
    8330U,	// UABAv4i32
    12427U,	// UABAv8i16
    28815U,	// UABAv8i8
    16460U,	// UABDLv16i8_v8i16
    20557U,	// UABDLv2i32_v2i64
    24654U,	// UABDLv4i16_v4i32
    8266U,	// UABDLv4i32_v2i64
    12363U,	// UABDLv8i16_v4i32
    28751U,	// UABDLv8i8_v8i16
    16460U,	// UABDv16i8
    20557U,	// UABDv2i32
    24654U,	// UABDv4i16
    8266U,	// UABDv4i32
    12363U,	// UABDv8i16
    28751U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    2U,	// UADALPv2i32_v1i64
    4U,	// UADALPv4i16_v2i32
    5U,	// UADALPv4i32_v2i64
    6U,	// UADALPv8i16_v4i32
    7U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    2U,	// UADDLPv2i32_v1i64
    4U,	// UADDLPv4i16_v2i32
    5U,	// UADDLPv4i32_v2i64
    6U,	// UADDLPv8i16_v4i32
    7U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    4U,	// UADDLVv4i16v
    5U,	// UADDLVv4i32v
    6U,	// UADDLVv8i16v
    7U,	// UADDLVv8i8v
    16460U,	// UADDLv16i8_v8i16
    20557U,	// UADDLv2i32_v2i64
    24654U,	// UADDLv4i16_v4i32
    8266U,	// UADDLv4i32_v2i64
    12363U,	// UADDLv8i16_v4i32
    28751U,	// UADDLv8i8_v8i16
    16459U,	// UADDWv16i8_v8i16
    20553U,	// UADDWv2i32_v2i64
    24650U,	// UADDWv4i16_v4i32
    8265U,	// UADDWv4i32_v2i64
    12362U,	// UADDWv8i16_v4i32
    28747U,	// UADDWv8i8_v8i16
    53256U,	// UBFMWri
    53256U,	// UBFMXri
    8U,	// UCVTFDHr
    8U,	// UCVTFHDr
    8U,	// UCVTFHSr
    8U,	// UCVTFSHr
    8U,	// UCVTFSWDri
    8U,	// UCVTFSWHri
    8U,	// UCVTFSWSri
    8U,	// UCVTFSXDri
    8U,	// UCVTFSXHri
    8U,	// UCVTFSXSri
    1U,	// UCVTFUWDri
    1U,	// UCVTFUWHri
    1U,	// UCVTFUWSri
    1U,	// UCVTFUXDri
    1U,	// UCVTFUXHri
    1U,	// UCVTFUXSri
    8U,	// UCVTFd
    8U,	// UCVTFh
    8U,	// UCVTFs
    1U,	// UCVTFv1i16
    1U,	// UCVTFv1i32
    1U,	// UCVTFv1i64
    2U,	// UCVTFv2f32
    3U,	// UCVTFv2f64
    13U,	// UCVTFv2i32_shift
    9U,	// UCVTFv2i64_shift
    4U,	// UCVTFv4f16
    5U,	// UCVTFv4f32
    14U,	// UCVTFv4i16_shift
    10U,	// UCVTFv4i32_shift
    6U,	// UCVTFv8f16
    11U,	// UCVTFv8i16_shift
    8U,	// UDIVWr
    8U,	// UDIVXr
    49292U,	// UDOTlanev16i8
    49295U,	// UDOTlanev8i8
    16524U,	// UDOTv16i8
    28815U,	// UDOTv8i8
    16460U,	// UHADDv16i8
    20557U,	// UHADDv2i32
    24654U,	// UHADDv4i16
    8266U,	// UHADDv4i32
    12363U,	// UHADDv8i16
    28751U,	// UHADDv8i8
    16460U,	// UHSUBv16i8
    20557U,	// UHSUBv2i32
    24654U,	// UHSUBv4i16
    8266U,	// UHSUBv4i32
    12363U,	// UHSUBv8i16
    28751U,	// UHSUBv8i8
    53256U,	// UMADDLrrr
    16460U,	// UMAXPv16i8
    20557U,	// UMAXPv2i32
    24654U,	// UMAXPv4i16
    8266U,	// UMAXPv4i32
    12363U,	// UMAXPv8i16
    28751U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    4U,	// UMAXVv4i16v
    5U,	// UMAXVv4i32v
    6U,	// UMAXVv8i16v
    7U,	// UMAXVv8i8v
    16460U,	// UMAXv16i8
    20557U,	// UMAXv2i32
    24654U,	// UMAXv4i16
    8266U,	// UMAXv4i32
    12363U,	// UMAXv8i16
    28751U,	// UMAXv8i8
    16460U,	// UMINPv16i8
    20557U,	// UMINPv2i32
    24654U,	// UMINPv4i16
    8266U,	// UMINPv4i32
    12363U,	// UMINPv8i16
    28751U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    4U,	// UMINVv4i16v
    5U,	// UMINVv4i32v
    6U,	// UMINVv8i16v
    7U,	// UMINVv8i8v
    16460U,	// UMINv16i8
    20557U,	// UMINv2i32
    24654U,	// UMINv4i16
    8266U,	// UMINv4i32
    12363U,	// UMINv8i16
    28751U,	// UMINv8i8
    16524U,	// UMLALv16i8_v8i16
    28813U,	// UMLALv2i32_indexed
    20621U,	// UMLALv2i32_v2i64
    24718U,	// UMLALv4i16_indexed
    24718U,	// UMLALv4i16_v4i32
    28810U,	// UMLALv4i32_indexed
    8330U,	// UMLALv4i32_v2i64
    24715U,	// UMLALv8i16_indexed
    12427U,	// UMLALv8i16_v4i32
    28815U,	// UMLALv8i8_v8i16
    16524U,	// UMLSLv16i8_v8i16
    28813U,	// UMLSLv2i32_indexed
    20621U,	// UMLSLv2i32_v2i64
    24718U,	// UMLSLv4i16_indexed
    24718U,	// UMLSLv4i16_v4i32
    28810U,	// UMLSLv4i32_indexed
    8330U,	// UMLSLv4i32_v2i64
    24715U,	// UMLSLv8i16_indexed
    12427U,	// UMLSLv8i16_v4i32
    28815U,	// UMLSLv8i8_v8i16
    742U,	// UMOVvi16
    743U,	// UMOVvi32
    744U,	// UMOVvi64
    745U,	// UMOVvi8
    53256U,	// UMSUBLrrr
    8U,	// UMULHrr
    16460U,	// UMULLv16i8_v8i16
    28749U,	// UMULLv2i32_indexed
    20557U,	// UMULLv2i32_v2i64
    24654U,	// UMULLv4i16_indexed
    24654U,	// UMULLv4i16_v4i32
    28746U,	// UMULLv4i32_indexed
    8266U,	// UMULLv4i32_v2i64
    24651U,	// UMULLv8i16_indexed
    12363U,	// UMULLv8i16_v4i32
    28751U,	// UMULLv8i8_v8i16
    16460U,	// UQADDv16i8
    8U,	// UQADDv1i16
    8U,	// UQADDv1i32
    8U,	// UQADDv1i64
    8U,	// UQADDv1i8
    20557U,	// UQADDv2i32
    4169U,	// UQADDv2i64
    24654U,	// UQADDv4i16
    8266U,	// UQADDv4i32
    12363U,	// UQADDv8i16
    28751U,	// UQADDv8i8
    16460U,	// UQRSHLv16i8
    8U,	// UQRSHLv1i16
    8U,	// UQRSHLv1i32
    8U,	// UQRSHLv1i64
    8U,	// UQRSHLv1i8
    20557U,	// UQRSHLv2i32
    4169U,	// UQRSHLv2i64
    24654U,	// UQRSHLv4i16
    8266U,	// UQRSHLv4i32
    12363U,	// UQRSHLv8i16
    28751U,	// UQRSHLv8i8
    8U,	// UQRSHRNb
    8U,	// UQRSHRNh
    8U,	// UQRSHRNs
    651U,	// UQRSHRNv16i8_shift
    9U,	// UQRSHRNv2i32_shift
    10U,	// UQRSHRNv4i16_shift
    649U,	// UQRSHRNv4i32_shift
    650U,	// UQRSHRNv8i16_shift
    11U,	// UQRSHRNv8i8_shift
    8U,	// UQSHLb
    8U,	// UQSHLd
    8U,	// UQSHLh
    8U,	// UQSHLs
    16460U,	// UQSHLv16i8
    12U,	// UQSHLv16i8_shift
    8U,	// UQSHLv1i16
    8U,	// UQSHLv1i32
    8U,	// UQSHLv1i64
    8U,	// UQSHLv1i8
    20557U,	// UQSHLv2i32
    13U,	// UQSHLv2i32_shift
    4169U,	// UQSHLv2i64
    9U,	// UQSHLv2i64_shift
    24654U,	// UQSHLv4i16
    14U,	// UQSHLv4i16_shift
    8266U,	// UQSHLv4i32
    10U,	// UQSHLv4i32_shift
    12363U,	// UQSHLv8i16
    11U,	// UQSHLv8i16_shift
    28751U,	// UQSHLv8i8
    15U,	// UQSHLv8i8_shift
    8U,	// UQSHRNb
    8U,	// UQSHRNh
    8U,	// UQSHRNs
    651U,	// UQSHRNv16i8_shift
    9U,	// UQSHRNv2i32_shift
    10U,	// UQSHRNv4i16_shift
    649U,	// UQSHRNv4i32_shift
    650U,	// UQSHRNv8i16_shift
    11U,	// UQSHRNv8i8_shift
    16460U,	// UQSUBv16i8
    8U,	// UQSUBv1i16
    8U,	// UQSUBv1i32
    8U,	// UQSUBv1i64
    8U,	// UQSUBv1i8
    20557U,	// UQSUBv2i32
    4169U,	// UQSUBv2i64
    24654U,	// UQSUBv4i16
    8266U,	// UQSUBv4i32
    12363U,	// UQSUBv8i16
    28751U,	// UQSUBv8i8
    6U,	// UQXTNv16i8
    1U,	// UQXTNv1i16
    1U,	// UQXTNv1i32
    1U,	// UQXTNv1i8
    3U,	// UQXTNv2i32
    5U,	// UQXTNv4i16
    3U,	// UQXTNv4i32
    5U,	// UQXTNv8i16
    6U,	// UQXTNv8i8
    2U,	// URECPEv2i32
    5U,	// URECPEv4i32
    16460U,	// URHADDv16i8
    20557U,	// URHADDv2i32
    24654U,	// URHADDv4i16
    8266U,	// URHADDv4i32
    12363U,	// URHADDv8i16
    28751U,	// URHADDv8i8
    16460U,	// URSHLv16i8
    8U,	// URSHLv1i64
    20557U,	// URSHLv2i32
    4169U,	// URSHLv2i64
    24654U,	// URSHLv4i16
    8266U,	// URSHLv4i32
    12363U,	// URSHLv8i16
    28751U,	// URSHLv8i8
    8U,	// URSHRd
    12U,	// URSHRv16i8_shift
    13U,	// URSHRv2i32_shift
    9U,	// URSHRv2i64_shift
    14U,	// URSHRv4i16_shift
    10U,	// URSHRv4i32_shift
    11U,	// URSHRv8i16_shift
    15U,	// URSHRv8i8_shift
    2U,	// URSQRTEv2i32
    5U,	// URSQRTEv4i32
    648U,	// URSRAd
    652U,	// URSRAv16i8_shift
    653U,	// URSRAv2i32_shift
    649U,	// URSRAv2i64_shift
    654U,	// URSRAv4i16_shift
    650U,	// URSRAv4i32_shift
    651U,	// URSRAv8i16_shift
    655U,	// URSRAv8i8_shift
    12U,	// USHLLv16i8_shift
    13U,	// USHLLv2i32_shift
    14U,	// USHLLv4i16_shift
    10U,	// USHLLv4i32_shift
    11U,	// USHLLv8i16_shift
    15U,	// USHLLv8i8_shift
    16460U,	// USHLv16i8
    8U,	// USHLv1i64
    20557U,	// USHLv2i32
    4169U,	// USHLv2i64
    24654U,	// USHLv4i16
    8266U,	// USHLv4i32
    12363U,	// USHLv8i16
    28751U,	// USHLv8i8
    8U,	// USHRd
    12U,	// USHRv16i8_shift
    13U,	// USHRv2i32_shift
    9U,	// USHRv2i64_shift
    14U,	// USHRv4i16_shift
    10U,	// USHRv4i32_shift
    11U,	// USHRv8i16_shift
    15U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    1U,	// USQADDv1i16
    1U,	// USQADDv1i32
    1U,	// USQADDv1i64
    1U,	// USQADDv1i8
    2U,	// USQADDv2i32
    3U,	// USQADDv2i64
    4U,	// USQADDv4i16
    5U,	// USQADDv4i32
    6U,	// USQADDv8i16
    7U,	// USQADDv8i8
    648U,	// USRAd
    652U,	// USRAv16i8_shift
    653U,	// USRAv2i32_shift
    649U,	// USRAv2i64_shift
    654U,	// USRAv4i16_shift
    650U,	// USRAv4i32_shift
    651U,	// USRAv8i16_shift
    655U,	// USRAv8i8_shift
    16460U,	// USUBLv16i8_v8i16
    20557U,	// USUBLv2i32_v2i64
    24654U,	// USUBLv4i16_v4i32
    8266U,	// USUBLv4i32_v2i64
    12363U,	// USUBLv8i16_v4i32
    28751U,	// USUBLv8i8_v8i16
    16459U,	// USUBWv16i8_v8i16
    20553U,	// USUBWv2i32_v2i64
    24650U,	// USUBWv4i16_v4i32
    8265U,	// USUBWv4i32_v2i64
    12362U,	// USUBWv8i16_v4i32
    28747U,	// USUBWv8i8_v8i16
    16460U,	// UZP1v16i8
    20557U,	// UZP1v2i32
    4169U,	// UZP1v2i64
    24654U,	// UZP1v4i16
    8266U,	// UZP1v4i32
    12363U,	// UZP1v8i16
    28751U,	// UZP1v8i8
    16460U,	// UZP2v16i8
    20557U,	// UZP2v2i32
    4169U,	// UZP2v2i64
    24654U,	// UZP2v4i16
    8266U,	// UZP2v4i32
    12363U,	// UZP2v8i16
    28751U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    6U,	// XTNv16i8
    3U,	// XTNv2i32
    5U,	// XTNv4i16
    3U,	// XTNv4i32
    5U,	// XTNv8i16
    6U,	// XTNv8i8
    468U,	// ZIP1_PPP_B
    469U,	// ZIP1_PPP_D
    470U,	// ZIP1_PPP_H
    471U,	// ZIP1_PPP_S
    468U,	// ZIP1_ZZZ_B
    469U,	// ZIP1_ZZZ_D
    470U,	// ZIP1_ZZZ_H
    471U,	// ZIP1_ZZZ_S
    16460U,	// ZIP1v16i8
    20557U,	// ZIP1v2i32
    4169U,	// ZIP1v2i64
    24654U,	// ZIP1v4i16
    8266U,	// ZIP1v4i32
    12363U,	// ZIP1v8i16
    28751U,	// ZIP1v8i8
    468U,	// ZIP2_PPP_B
    469U,	// ZIP2_PPP_D
    470U,	// ZIP2_PPP_H
    471U,	// ZIP2_PPP_S
    468U,	// ZIP2_ZZZ_B
    469U,	// ZIP2_ZZZ_D
    470U,	// ZIP2_ZZZ_H
    471U,	// ZIP2_ZZZ_S
    16460U,	// ZIP2v16i8
    20557U,	// ZIP2v2i32
    4169U,	// ZIP2v2i64
    24654U,	// ZIP2v4i16
    8266U,	// ZIP2v4i32
    12363U,	// ZIP2v8i16
    28751U,	// ZIP2v8i8
  };

  static const uint8_t OpInfo2[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// ABSv16i8
    0U,	// ABSv1i64
    0U,	// ABSv2i32
    0U,	// ABSv2i64
    0U,	// ABSv4i16
    0U,	// ABSv4i32
    0U,	// ABSv8i16
    0U,	// ABSv8i8
    0U,	// ADCSWr
    0U,	// ADCSXr
    0U,	// ADCWr
    0U,	// ADCXr
    0U,	// ADDHNv2i64_v2i32
    0U,	// ADDHNv2i64_v4i32
    0U,	// ADDHNv4i32_v4i16
    0U,	// ADDHNv4i32_v8i16
    0U,	// ADDHNv8i16_v16i8
    0U,	// ADDHNv8i16_v8i8
    0U,	// ADDPL_XXI
    0U,	// ADDPv16i8
    0U,	// ADDPv2i32
    0U,	// ADDPv2i64
    0U,	// ADDPv2i64p
    0U,	// ADDPv4i16
    0U,	// ADDPv4i32
    0U,	// ADDPv8i16
    0U,	// ADDPv8i8
    0U,	// ADDSWri
    0U,	// ADDSWrr
    0U,	// ADDSWrs
    0U,	// ADDSWrx
    0U,	// ADDSXri
    0U,	// ADDSXrr
    0U,	// ADDSXrs
    0U,	// ADDSXrx
    0U,	// ADDSXrx64
    0U,	// ADDVL_XXI
    0U,	// ADDVv16i8v
    0U,	// ADDVv4i16v
    0U,	// ADDVv4i32v
    0U,	// ADDVv8i16v
    0U,	// ADDVv8i8v
    0U,	// ADDWri
    0U,	// ADDWrr
    0U,	// ADDWrs
    0U,	// ADDWrx
    0U,	// ADDXri
    0U,	// ADDXrr
    0U,	// ADDXrs
    0U,	// ADDXrx
    0U,	// ADDXrx64
    0U,	// ADD_ZI_B
    0U,	// ADD_ZI_D
    0U,	// ADD_ZI_H
    0U,	// ADD_ZI_S
    0U,	// ADD_ZPmZ_B
    0U,	// ADD_ZPmZ_D
    0U,	// ADD_ZPmZ_H
    0U,	// ADD_ZPmZ_S
    0U,	// ADD_ZZZ_B
    0U,	// ADD_ZZZ_D
    0U,	// ADD_ZZZ_H
    0U,	// ADD_ZZZ_S
    0U,	// ADDlowTLS
    0U,	// ADDv16i8
    0U,	// ADDv1i64
    0U,	// ADDv2i32
    0U,	// ADDv2i64
    0U,	// ADDv4i16
    0U,	// ADDv4i32
    0U,	// ADDv8i16
    0U,	// ADDv8i8
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ADR
    0U,	// ADRP
    0U,	// AESDrr
    0U,	// AESErr
    0U,	// AESIMCrr
    0U,	// AESIMCrrTied
    0U,	// AESMCrr
    0U,	// AESMCrrTied
    0U,	// ANDSWri
    0U,	// ANDSWrr
    0U,	// ANDSWrs
    0U,	// ANDSXri
    0U,	// ANDSXrr
    0U,	// ANDSXrs
    0U,	// ANDWri
    0U,	// ANDWrr
    0U,	// ANDWrs
    0U,	// ANDXri
    0U,	// ANDXrr
    0U,	// ANDXrs
    0U,	// AND_ZI
    0U,	// AND_ZPmZ_B
    0U,	// AND_ZPmZ_D
    0U,	// AND_ZPmZ_H
    0U,	// AND_ZPmZ_S
    0U,	// AND_ZZZ
    0U,	// ANDv16i8
    0U,	// ANDv8i8
    0U,	// ASRVWr
    0U,	// ASRVXr
    0U,	// AUTDA
    0U,	// AUTDB
    0U,	// AUTDZA
    0U,	// AUTDZB
    0U,	// AUTIA
    0U,	// AUTIA1716
    0U,	// AUTIASP
    0U,	// AUTIAZ
    0U,	// AUTIB
    0U,	// AUTIB1716
    0U,	// AUTIBSP
    0U,	// AUTIBZ
    0U,	// AUTIZA
    0U,	// AUTIZB
    0U,	// B
    0U,	// BFMWri
    0U,	// BFMXri
    0U,	// BICSWrr
    0U,	// BICSWrs
    0U,	// BICSXrr
    0U,	// BICSXrs
    0U,	// BICWrr
    0U,	// BICWrs
    0U,	// BICXrr
    0U,	// BICXrs
    0U,	// BIC_ZPmZ_B
    0U,	// BIC_ZPmZ_D
    0U,	// BIC_ZPmZ_H
    0U,	// BIC_ZPmZ_S
    0U,	// BIC_ZZZ
    0U,	// BICv16i8
    0U,	// BICv2i32
    0U,	// BICv4i16
    0U,	// BICv4i32
    0U,	// BICv8i16
    0U,	// BICv8i8
    0U,	// BIFv16i8
    0U,	// BIFv8i8
    0U,	// BITv16i8
    0U,	// BITv8i8
    0U,	// BL
    0U,	// BLR
    0U,	// BLRAA
    0U,	// BLRAAZ
    0U,	// BLRAB
    0U,	// BLRABZ
    0U,	// BR
    0U,	// BRAA
    0U,	// BRAAZ
    0U,	// BRAB
    0U,	// BRABZ
    0U,	// BRK
    0U,	// BSLv16i8
    0U,	// BSLv8i8
    0U,	// Bcc
    0U,	// CASAB
    0U,	// CASAH
    0U,	// CASALB
    0U,	// CASALH
    0U,	// CASALW
    0U,	// CASALX
    0U,	// CASAW
    0U,	// CASAX
    0U,	// CASB
    0U,	// CASH
    0U,	// CASLB
    0U,	// CASLH
    0U,	// CASLW
    0U,	// CASLX
    0U,	// CASPALW
    0U,	// CASPALX
    0U,	// CASPAW
    0U,	// CASPAX
    0U,	// CASPLW
    0U,	// CASPLX
    0U,	// CASPW
    0U,	// CASPX
    0U,	// CASW
    0U,	// CASX
    0U,	// CBNZW
    0U,	// CBNZX
    0U,	// CBZW
    0U,	// CBZX
    2U,	// CCMNWi
    2U,	// CCMNWr
    2U,	// CCMNXi
    2U,	// CCMNXr
    2U,	// CCMPWi
    2U,	// CCMPWr
    2U,	// CCMPXi
    2U,	// CCMPXr
    0U,	// CLREX
    0U,	// CLSWr
    0U,	// CLSXr
    0U,	// CLSv16i8
    0U,	// CLSv2i32
    0U,	// CLSv4i16
    0U,	// CLSv4i32
    0U,	// CLSv8i16
    0U,	// CLSv8i8
    0U,	// CLZWr
    0U,	// CLZXr
    0U,	// CLZv16i8
    0U,	// CLZv2i32
    0U,	// CLZv4i16
    0U,	// CLZv4i32
    0U,	// CLZv8i16
    0U,	// CLZv8i8
    0U,	// CMEQv16i8
    0U,	// CMEQv16i8rz
    0U,	// CMEQv1i64
    0U,	// CMEQv1i64rz
    0U,	// CMEQv2i32
    0U,	// CMEQv2i32rz
    0U,	// CMEQv2i64
    0U,	// CMEQv2i64rz
    0U,	// CMEQv4i16
    0U,	// CMEQv4i16rz
    0U,	// CMEQv4i32
    0U,	// CMEQv4i32rz
    0U,	// CMEQv8i16
    0U,	// CMEQv8i16rz
    0U,	// CMEQv8i8
    0U,	// CMEQv8i8rz
    0U,	// CMGEv16i8
    0U,	// CMGEv16i8rz
    0U,	// CMGEv1i64
    0U,	// CMGEv1i64rz
    0U,	// CMGEv2i32
    0U,	// CMGEv2i32rz
    0U,	// CMGEv2i64
    0U,	// CMGEv2i64rz
    0U,	// CMGEv4i16
    0U,	// CMGEv4i16rz
    0U,	// CMGEv4i32
    0U,	// CMGEv4i32rz
    0U,	// CMGEv8i16
    0U,	// CMGEv8i16rz
    0U,	// CMGEv8i8
    0U,	// CMGEv8i8rz
    0U,	// CMGTv16i8
    0U,	// CMGTv16i8rz
    0U,	// CMGTv1i64
    0U,	// CMGTv1i64rz
    0U,	// CMGTv2i32
    0U,	// CMGTv2i32rz
    0U,	// CMGTv2i64
    0U,	// CMGTv2i64rz
    0U,	// CMGTv4i16
    0U,	// CMGTv4i16rz
    0U,	// CMGTv4i32
    0U,	// CMGTv4i32rz
    0U,	// CMGTv8i16
    0U,	// CMGTv8i16rz
    0U,	// CMGTv8i8
    0U,	// CMGTv8i8rz
    0U,	// CMHIv16i8
    0U,	// CMHIv1i64
    0U,	// CMHIv2i32
    0U,	// CMHIv2i64
    0U,	// CMHIv4i16
    0U,	// CMHIv4i32
    0U,	// CMHIv8i16
    0U,	// CMHIv8i8
    0U,	// CMHSv16i8
    0U,	// CMHSv1i64
    0U,	// CMHSv2i32
    0U,	// CMHSv2i64
    0U,	// CMHSv4i16
    0U,	// CMHSv4i32
    0U,	// CMHSv8i16
    0U,	// CMHSv8i8
    0U,	// CMLEv16i8rz
    0U,	// CMLEv1i64rz
    0U,	// CMLEv2i32rz
    0U,	// CMLEv2i64rz
    0U,	// CMLEv4i16rz
    0U,	// CMLEv4i32rz
    0U,	// CMLEv8i16rz
    0U,	// CMLEv8i8rz
    0U,	// CMLTv16i8rz
    0U,	// CMLTv1i64rz
    0U,	// CMLTv2i32rz
    0U,	// CMLTv2i64rz
    0U,	// CMLTv4i16rz
    0U,	// CMLTv4i32rz
    0U,	// CMLTv8i16rz
    0U,	// CMLTv8i8rz
    0U,	// CMP_SWAP_128
    0U,	// CMP_SWAP_16
    0U,	// CMP_SWAP_32
    0U,	// CMP_SWAP_64
    0U,	// CMP_SWAP_8
    0U,	// CMTSTv16i8
    0U,	// CMTSTv1i64
    0U,	// CMTSTv2i32
    0U,	// CMTSTv2i64
    0U,	// CMTSTv4i16
    0U,	// CMTSTv4i32
    0U,	// CMTSTv8i16
    0U,	// CMTSTv8i8
    0U,	// CNTv16i8
    0U,	// CNTv8i8
    0U,	// CPY_ZPmI_B
    0U,	// CPY_ZPmI_D
    0U,	// CPY_ZPmI_H
    0U,	// CPY_ZPmI_S
    0U,	// CPY_ZPzI_B
    0U,	// CPY_ZPzI_D
    0U,	// CPY_ZPzI_H
    0U,	// CPY_ZPzI_S
    0U,	// CPYi16
    0U,	// CPYi32
    0U,	// CPYi64
    0U,	// CPYi8
    0U,	// CRC32Brr
    0U,	// CRC32CBrr
    0U,	// CRC32CHrr
    0U,	// CRC32CWrr
    0U,	// CRC32CXrr
    0U,	// CRC32Hrr
    0U,	// CRC32Wrr
    0U,	// CRC32Xrr
    2U,	// CSELWr
    2U,	// CSELXr
    2U,	// CSINCWr
    2U,	// CSINCXr
    2U,	// CSINVWr
    2U,	// CSINVXr
    2U,	// CSNEGWr
    2U,	// CSNEGXr
    0U,	// CompilerBarrier
    0U,	// DCPS1
    0U,	// DCPS2
    0U,	// DCPS3
    0U,	// DMB
    0U,	// DRPS
    0U,	// DSB
    0U,	// DUPM_ZI
    0U,	// DUP_ZI_B
    0U,	// DUP_ZI_D
    0U,	// DUP_ZI_H
    0U,	// DUP_ZI_S
    0U,	// DUP_ZR_B
    0U,	// DUP_ZR_D
    0U,	// DUP_ZR_H
    0U,	// DUP_ZR_S
    0U,	// DUP_ZZI_B
    0U,	// DUP_ZZI_D
    0U,	// DUP_ZZI_H
    0U,	// DUP_ZZI_Q
    0U,	// DUP_ZZI_S
    0U,	// DUPv16i8gpr
    0U,	// DUPv16i8lane
    0U,	// DUPv2i32gpr
    0U,	// DUPv2i32lane
    0U,	// DUPv2i64gpr
    0U,	// DUPv2i64lane
    0U,	// DUPv4i16gpr
    0U,	// DUPv4i16lane
    0U,	// DUPv4i32gpr
    0U,	// DUPv4i32lane
    0U,	// DUPv8i16gpr
    0U,	// DUPv8i16lane
    0U,	// DUPv8i8gpr
    0U,	// DUPv8i8lane
    0U,	// EONWrr
    0U,	// EONWrs
    0U,	// EONXrr
    0U,	// EONXrs
    0U,	// EORWri
    0U,	// EORWrr
    0U,	// EORWrs
    0U,	// EORXri
    0U,	// EORXrr
    0U,	// EORXrs
    0U,	// EOR_ZI
    0U,	// EOR_ZPmZ_B
    0U,	// EOR_ZPmZ_D
    0U,	// EOR_ZPmZ_H
    0U,	// EOR_ZPmZ_S
    0U,	// EOR_ZZZ
    0U,	// EORv16i8
    0U,	// EORv8i8
    0U,	// ERET
    0U,	// ERETAA
    0U,	// ERETAB
    4U,	// EXTRWrri
    4U,	// EXTRXrri
    0U,	// EXTv16i8
    1U,	// EXTv8i8
    0U,	// F128CSEL
    0U,	// FABD16
    0U,	// FABD32
    0U,	// FABD64
    0U,	// FABDv2f32
    0U,	// FABDv2f64
    0U,	// FABDv4f16
    0U,	// FABDv4f32
    0U,	// FABDv8f16
    0U,	// FABSDr
    0U,	// FABSHr
    0U,	// FABSSr
    0U,	// FABSv2f32
    0U,	// FABSv2f64
    0U,	// FABSv4f16
    0U,	// FABSv4f32
    0U,	// FABSv8f16
    0U,	// FACGE16
    0U,	// FACGE32
    0U,	// FACGE64
    0U,	// FACGEv2f32
    0U,	// FACGEv2f64
    0U,	// FACGEv4f16
    0U,	// FACGEv4f32
    0U,	// FACGEv8f16
    0U,	// FACGT16
    0U,	// FACGT32
    0U,	// FACGT64
    0U,	// FACGTv2f32
    0U,	// FACGTv2f64
    0U,	// FACGTv4f16
    0U,	// FACGTv4f32
    0U,	// FACGTv8f16
    0U,	// FADDDrr
    0U,	// FADDHrr
    0U,	// FADDPv2f32
    0U,	// FADDPv2f64
    0U,	// FADDPv2i16p
    0U,	// FADDPv2i32p
    0U,	// FADDPv2i64p
    0U,	// FADDPv4f16
    0U,	// FADDPv4f32
    0U,	// FADDPv8f16
    0U,	// FADDSrr
    0U,	// FADDv2f32
    0U,	// FADDv2f64
    0U,	// FADDv4f16
    0U,	// FADDv4f32
    0U,	// FADDv8f16
    7U,	// FCADDv2f32
    7U,	// FCADDv2f64
    7U,	// FCADDv4f16
    7U,	// FCADDv4f32
    7U,	// FCADDv8f16
    2U,	// FCCMPDrr
    2U,	// FCCMPEDrr
    2U,	// FCCMPEHrr
    2U,	// FCCMPESrr
    2U,	// FCCMPHrr
    2U,	// FCCMPSrr
    0U,	// FCMEQ16
    0U,	// FCMEQ32
    0U,	// FCMEQ64
    0U,	// FCMEQv1i16rz
    0U,	// FCMEQv1i32rz
    0U,	// FCMEQv1i64rz
    0U,	// FCMEQv2f32
    0U,	// FCMEQv2f64
    0U,	// FCMEQv2i32rz
    0U,	// FCMEQv2i64rz
    0U,	// FCMEQv4f16
    0U,	// FCMEQv4f32
    0U,	// FCMEQv4i16rz
    0U,	// FCMEQv4i32rz
    0U,	// FCMEQv8f16
    0U,	// FCMEQv8i16rz
    0U,	// FCMGE16
    0U,	// FCMGE32
    0U,	// FCMGE64
    0U,	// FCMGEv1i16rz
    0U,	// FCMGEv1i32rz
    0U,	// FCMGEv1i64rz
    0U,	// FCMGEv2f32
    0U,	// FCMGEv2f64
    0U,	// FCMGEv2i32rz
    0U,	// FCMGEv2i64rz
    0U,	// FCMGEv4f16
    0U,	// FCMGEv4f32
    0U,	// FCMGEv4i16rz
    0U,	// FCMGEv4i32rz
    0U,	// FCMGEv8f16
    0U,	// FCMGEv8i16rz
    0U,	// FCMGT16
    0U,	// FCMGT32
    0U,	// FCMGT64
    0U,	// FCMGTv1i16rz
    0U,	// FCMGTv1i32rz
    0U,	// FCMGTv1i64rz
    0U,	// FCMGTv2f32
    0U,	// FCMGTv2f64
    0U,	// FCMGTv2i32rz
    0U,	// FCMGTv2i64rz
    0U,	// FCMGTv4f16
    0U,	// FCMGTv4f32
    0U,	// FCMGTv4i16rz
    0U,	// FCMGTv4i32rz
    0U,	// FCMGTv8f16
    0U,	// FCMGTv8i16rz
    9U,	// FCMLAv2f32
    9U,	// FCMLAv2f64
    9U,	// FCMLAv4f16
    11U,	// FCMLAv4f16_indexed
    9U,	// FCMLAv4f32
    11U,	// FCMLAv4f32_indexed
    9U,	// FCMLAv8f16
    11U,	// FCMLAv8f16_indexed
    0U,	// FCMLEv1i16rz
    0U,	// FCMLEv1i32rz
    0U,	// FCMLEv1i64rz
    0U,	// FCMLEv2i32rz
    0U,	// FCMLEv2i64rz
    0U,	// FCMLEv4i16rz
    0U,	// FCMLEv4i32rz
    0U,	// FCMLEv8i16rz
    0U,	// FCMLTv1i16rz
    0U,	// FCMLTv1i32rz
    0U,	// FCMLTv1i64rz
    0U,	// FCMLTv2i32rz
    0U,	// FCMLTv2i64rz
    0U,	// FCMLTv4i16rz
    0U,	// FCMLTv4i32rz
    0U,	// FCMLTv8i16rz
    0U,	// FCMPDri
    0U,	// FCMPDrr
    0U,	// FCMPEDri
    0U,	// FCMPEDrr
    0U,	// FCMPEHri
    0U,	// FCMPEHrr
    0U,	// FCMPESri
    0U,	// FCMPESrr
    0U,	// FCMPHri
    0U,	// FCMPHrr
    0U,	// FCMPSri
    0U,	// FCMPSrr
    0U,	// FCPY_ZPmI_D
    0U,	// FCPY_ZPmI_H
    0U,	// FCPY_ZPmI_S
    2U,	// FCSELDrrr
    2U,	// FCSELHrrr
    2U,	// FCSELSrrr
    0U,	// FCVTASUWDr
    0U,	// FCVTASUWHr
    0U,	// FCVTASUWSr
    0U,	// FCVTASUXDr
    0U,	// FCVTASUXHr
    0U,	// FCVTASUXSr
    0U,	// FCVTASv1f16
    0U,	// FCVTASv1i32
    0U,	// FCVTASv1i64
    0U,	// FCVTASv2f32
    0U,	// FCVTASv2f64
    0U,	// FCVTASv4f16
    0U,	// FCVTASv4f32
    0U,	// FCVTASv8f16
    0U,	// FCVTAUUWDr
    0U,	// FCVTAUUWHr
    0U,	// FCVTAUUWSr
    0U,	// FCVTAUUXDr
    0U,	// FCVTAUUXHr
    0U,	// FCVTAUUXSr
    0U,	// FCVTAUv1f16
    0U,	// FCVTAUv1i32
    0U,	// FCVTAUv1i64
    0U,	// FCVTAUv2f32
    0U,	// FCVTAUv2f64
    0U,	// FCVTAUv4f16
    0U,	// FCVTAUv4f32
    0U,	// FCVTAUv8f16
    0U,	// FCVTDHr
    0U,	// FCVTDSr
    0U,	// FCVTHDr
    0U,	// FCVTHSr
    0U,	// FCVTLv2i32
    0U,	// FCVTLv4i16
    0U,	// FCVTLv4i32
    0U,	// FCVTLv8i16
    0U,	// FCVTMSUWDr
    0U,	// FCVTMSUWHr
    0U,	// FCVTMSUWSr
    0U,	// FCVTMSUXDr
    0U,	// FCVTMSUXHr
    0U,	// FCVTMSUXSr
    0U,	// FCVTMSv1f16
    0U,	// FCVTMSv1i32
    0U,	// FCVTMSv1i64
    0U,	// FCVTMSv2f32
    0U,	// FCVTMSv2f64
    0U,	// FCVTMSv4f16
    0U,	// FCVTMSv4f32
    0U,	// FCVTMSv8f16
    0U,	// FCVTMUUWDr
    0U,	// FCVTMUUWHr
    0U,	// FCVTMUUWSr
    0U,	// FCVTMUUXDr
    0U,	// FCVTMUUXHr
    0U,	// FCVTMUUXSr
    0U,	// FCVTMUv1f16
    0U,	// FCVTMUv1i32
    0U,	// FCVTMUv1i64
    0U,	// FCVTMUv2f32
    0U,	// FCVTMUv2f64
    0U,	// FCVTMUv4f16
    0U,	// FCVTMUv4f32
    0U,	// FCVTMUv8f16
    0U,	// FCVTNSUWDr
    0U,	// FCVTNSUWHr
    0U,	// FCVTNSUWSr
    0U,	// FCVTNSUXDr
    0U,	// FCVTNSUXHr
    0U,	// FCVTNSUXSr
    0U,	// FCVTNSv1f16
    0U,	// FCVTNSv1i32
    0U,	// FCVTNSv1i64
    0U,	// FCVTNSv2f32
    0U,	// FCVTNSv2f64
    0U,	// FCVTNSv4f16
    0U,	// FCVTNSv4f32
    0U,	// FCVTNSv8f16
    0U,	// FCVTNUUWDr
    0U,	// FCVTNUUWHr
    0U,	// FCVTNUUWSr
    0U,	// FCVTNUUXDr
    0U,	// FCVTNUUXHr
    0U,	// FCVTNUUXSr
    0U,	// FCVTNUv1f16
    0U,	// FCVTNUv1i32
    0U,	// FCVTNUv1i64
    0U,	// FCVTNUv2f32
    0U,	// FCVTNUv2f64
    0U,	// FCVTNUv4f16
    0U,	// FCVTNUv4f32
    0U,	// FCVTNUv8f16
    0U,	// FCVTNv2i32
    0U,	// FCVTNv4i16
    0U,	// FCVTNv4i32
    0U,	// FCVTNv8i16
    0U,	// FCVTPSUWDr
    0U,	// FCVTPSUWHr
    0U,	// FCVTPSUWSr
    0U,	// FCVTPSUXDr
    0U,	// FCVTPSUXHr
    0U,	// FCVTPSUXSr
    0U,	// FCVTPSv1f16
    0U,	// FCVTPSv1i32
    0U,	// FCVTPSv1i64
    0U,	// FCVTPSv2f32
    0U,	// FCVTPSv2f64
    0U,	// FCVTPSv4f16
    0U,	// FCVTPSv4f32
    0U,	// FCVTPSv8f16
    0U,	// FCVTPUUWDr
    0U,	// FCVTPUUWHr
    0U,	// FCVTPUUWSr
    0U,	// FCVTPUUXDr
    0U,	// FCVTPUUXHr
    0U,	// FCVTPUUXSr
    0U,	// FCVTPUv1f16
    0U,	// FCVTPUv1i32
    0U,	// FCVTPUv1i64
    0U,	// FCVTPUv2f32
    0U,	// FCVTPUv2f64
    0U,	// FCVTPUv4f16
    0U,	// FCVTPUv4f32
    0U,	// FCVTPUv8f16
    0U,	// FCVTSDr
    0U,	// FCVTSHr
    0U,	// FCVTXNv1i64
    0U,	// FCVTXNv2f32
    0U,	// FCVTXNv4f32
    0U,	// FCVTZSDHr
    0U,	// FCVTZSHDr
    0U,	// FCVTZSHSr
    0U,	// FCVTZSSHr
    0U,	// FCVTZSSWDri
    0U,	// FCVTZSSWHri
    0U,	// FCVTZSSWSri
    0U,	// FCVTZSSXDri
    0U,	// FCVTZSSXHri
    0U,	// FCVTZSSXSri
    0U,	// FCVTZSUWDr
    0U,	// FCVTZSUWHr
    0U,	// FCVTZSUWSr
    0U,	// FCVTZSUXDr
    0U,	// FCVTZSUXHr
    0U,	// FCVTZSUXSr
    0U,	// FCVTZSd
    0U,	// FCVTZSh
    0U,	// FCVTZSs
    0U,	// FCVTZSv1f16
    0U,	// FCVTZSv1i32
    0U,	// FCVTZSv1i64
    0U,	// FCVTZSv2f32
    0U,	// FCVTZSv2f64
    0U,	// FCVTZSv2i32_shift
    0U,	// FCVTZSv2i64_shift
    0U,	// FCVTZSv4f16
    0U,	// FCVTZSv4f32
    0U,	// FCVTZSv4i16_shift
    0U,	// FCVTZSv4i32_shift
    0U,	// FCVTZSv8f16
    0U,	// FCVTZSv8i16_shift
    0U,	// FCVTZUDHr
    0U,	// FCVTZUHDr
    0U,	// FCVTZUHSr
    0U,	// FCVTZUSHr
    0U,	// FCVTZUSWDri
    0U,	// FCVTZUSWHri
    0U,	// FCVTZUSWSri
    0U,	// FCVTZUSXDri
    0U,	// FCVTZUSXHri
    0U,	// FCVTZUSXSri
    0U,	// FCVTZUUWDr
    0U,	// FCVTZUUWHr
    0U,	// FCVTZUUWSr
    0U,	// FCVTZUUXDr
    0U,	// FCVTZUUXHr
    0U,	// FCVTZUUXSr
    0U,	// FCVTZUd
    0U,	// FCVTZUh
    0U,	// FCVTZUs
    0U,	// FCVTZUv1f16
    0U,	// FCVTZUv1i32
    0U,	// FCVTZUv1i64
    0U,	// FCVTZUv2f32
    0U,	// FCVTZUv2f64
    0U,	// FCVTZUv2i32_shift
    0U,	// FCVTZUv2i64_shift
    0U,	// FCVTZUv4f16
    0U,	// FCVTZUv4f32
    0U,	// FCVTZUv4i16_shift
    0U,	// FCVTZUv4i32_shift
    0U,	// FCVTZUv8f16
    0U,	// FCVTZUv8i16_shift
    0U,	// FDIVDrr
    0U,	// FDIVHrr
    0U,	// FDIVSrr
    0U,	// FDIVv2f32
    0U,	// FDIVv2f64
    0U,	// FDIVv4f16
    0U,	// FDIVv4f32
    0U,	// FDIVv8f16
    0U,	// FDUP_ZI_D
    0U,	// FDUP_ZI_H
    0U,	// FDUP_ZI_S
    0U,	// FJCVTZS
    4U,	// FMADDDrrr
    4U,	// FMADDHrrr
    4U,	// FMADDSrrr
    0U,	// FMAXDrr
    0U,	// FMAXHrr
    0U,	// FMAXNMDrr
    0U,	// FMAXNMHrr
    0U,	// FMAXNMPv2f32
    0U,	// FMAXNMPv2f64
    0U,	// FMAXNMPv2i16p
    0U,	// FMAXNMPv2i32p
    0U,	// FMAXNMPv2i64p
    0U,	// FMAXNMPv4f16
    0U,	// FMAXNMPv4f32
    0U,	// FMAXNMPv8f16
    0U,	// FMAXNMSrr
    0U,	// FMAXNMVv4i16v
    0U,	// FMAXNMVv4i32v
    0U,	// FMAXNMVv8i16v
    0U,	// FMAXNMv2f32
    0U,	// FMAXNMv2f64
    0U,	// FMAXNMv4f16
    0U,	// FMAXNMv4f32
    0U,	// FMAXNMv8f16
    0U,	// FMAXPv2f32
    0U,	// FMAXPv2f64
    0U,	// FMAXPv2i16p
    0U,	// FMAXPv2i32p
    0U,	// FMAXPv2i64p
    0U,	// FMAXPv4f16
    0U,	// FMAXPv4f32
    0U,	// FMAXPv8f16
    0U,	// FMAXSrr
    0U,	// FMAXVv4i16v
    0U,	// FMAXVv4i32v
    0U,	// FMAXVv8i16v
    0U,	// FMAXv2f32
    0U,	// FMAXv2f64
    0U,	// FMAXv4f16
    0U,	// FMAXv4f32
    0U,	// FMAXv8f16
    0U,	// FMINDrr
    0U,	// FMINHrr
    0U,	// FMINNMDrr
    0U,	// FMINNMHrr
    0U,	// FMINNMPv2f32
    0U,	// FMINNMPv2f64
    0U,	// FMINNMPv2i16p
    0U,	// FMINNMPv2i32p
    0U,	// FMINNMPv2i64p
    0U,	// FMINNMPv4f16
    0U,	// FMINNMPv4f32
    0U,	// FMINNMPv8f16
    0U,	// FMINNMSrr
    0U,	// FMINNMVv4i16v
    0U,	// FMINNMVv4i32v
    0U,	// FMINNMVv8i16v
    0U,	// FMINNMv2f32
    0U,	// FMINNMv2f64
    0U,	// FMINNMv4f16
    0U,	// FMINNMv4f32
    0U,	// FMINNMv8f16
    0U,	// FMINPv2f32
    0U,	// FMINPv2f64
    0U,	// FMINPv2i16p
    0U,	// FMINPv2i32p
    0U,	// FMINPv2i64p
    0U,	// FMINPv4f16
    0U,	// FMINPv4f32
    0U,	// FMINPv8f16
    0U,	// FMINSrr
    0U,	// FMINVv4i16v
    0U,	// FMINVv4i32v
    0U,	// FMINVv8i16v
    0U,	// FMINv2f32
    0U,	// FMINv2f64
    0U,	// FMINv4f16
    0U,	// FMINv4f32
    0U,	// FMINv8f16
    75U,	// FMLAv1i16_indexed
    75U,	// FMLAv1i32_indexed
    75U,	// FMLAv1i64_indexed
    0U,	// FMLAv2f32
    0U,	// FMLAv2f64
    75U,	// FMLAv2i32_indexed
    75U,	// FMLAv2i64_indexed
    0U,	// FMLAv4f16
    0U,	// FMLAv4f32
    75U,	// FMLAv4i16_indexed
    75U,	// FMLAv4i32_indexed
    0U,	// FMLAv8f16
    75U,	// FMLAv8i16_indexed
    75U,	// FMLSv1i16_indexed
    75U,	// FMLSv1i32_indexed
    75U,	// FMLSv1i64_indexed
    0U,	// FMLSv2f32
    0U,	// FMLSv2f64
    75U,	// FMLSv2i32_indexed
    75U,	// FMLSv2i64_indexed
    0U,	// FMLSv4f16
    0U,	// FMLSv4f32
    75U,	// FMLSv4i16_indexed
    75U,	// FMLSv4i32_indexed
    0U,	// FMLSv8f16
    75U,	// FMLSv8i16_indexed
    0U,	// FMOVD0
    0U,	// FMOVDXHighr
    0U,	// FMOVDXr
    0U,	// FMOVDi
    0U,	// FMOVDr
    0U,	// FMOVH0
    0U,	// FMOVHWr
    0U,	// FMOVHXr
    0U,	// FMOVHi
    0U,	// FMOVHr
    0U,	// FMOVS0
    0U,	// FMOVSWr
    0U,	// FMOVSi
    0U,	// FMOVSr
    0U,	// FMOVWHr
    0U,	// FMOVWSr
    0U,	// FMOVXDHighr
    0U,	// FMOVXDr
    0U,	// FMOVXHr
    0U,	// FMOVv2f32_ns
    0U,	// FMOVv2f64_ns
    0U,	// FMOVv4f16_ns
    0U,	// FMOVv4f32_ns
    0U,	// FMOVv8f16_ns
    4U,	// FMSUBDrrr
    4U,	// FMSUBHrrr
    4U,	// FMSUBSrrr
    0U,	// FMULDrr
    0U,	// FMULHrr
    0U,	// FMULSrr
    0U,	// FMULX16
    0U,	// FMULX32
    0U,	// FMULX64
    13U,	// FMULXv1i16_indexed
    13U,	// FMULXv1i32_indexed
    13U,	// FMULXv1i64_indexed
    0U,	// FMULXv2f32
    0U,	// FMULXv2f64
    13U,	// FMULXv2i32_indexed
    13U,	// FMULXv2i64_indexed
    0U,	// FMULXv4f16
    0U,	// FMULXv4f32
    13U,	// FMULXv4i16_indexed
    13U,	// FMULXv4i32_indexed
    0U,	// FMULXv8f16
    13U,	// FMULXv8i16_indexed
    13U,	// FMULv1i16_indexed
    13U,	// FMULv1i32_indexed
    13U,	// FMULv1i64_indexed
    0U,	// FMULv2f32
    0U,	// FMULv2f64
    13U,	// FMULv2i32_indexed
    13U,	// FMULv2i64_indexed
    0U,	// FMULv4f16
    0U,	// FMULv4f32
    13U,	// FMULv4i16_indexed
    13U,	// FMULv4i32_indexed
    0U,	// FMULv8f16
    13U,	// FMULv8i16_indexed
    0U,	// FNEGDr
    0U,	// FNEGHr
    0U,	// FNEGSr
    0U,	// FNEGv2f32
    0U,	// FNEGv2f64
    0U,	// FNEGv4f16
    0U,	// FNEGv4f32
    0U,	// FNEGv8f16
    4U,	// FNMADDDrrr
    4U,	// FNMADDHrrr
    4U,	// FNMADDSrrr
    4U,	// FNMSUBDrrr
    4U,	// FNMSUBHrrr
    4U,	// FNMSUBSrrr
    0U,	// FNMULDrr
    0U,	// FNMULHrr
    0U,	// FNMULSrr
    0U,	// FRECPEv1f16
    0U,	// FRECPEv1i32
    0U,	// FRECPEv1i64
    0U,	// FRECPEv2f32
    0U,	// FRECPEv2f64
    0U,	// FRECPEv4f16
    0U,	// FRECPEv4f32
    0U,	// FRECPEv8f16
    0U,	// FRECPS16
    0U,	// FRECPS32
    0U,	// FRECPS64
    0U,	// FRECPSv2f32
    0U,	// FRECPSv2f64
    0U,	// FRECPSv4f16
    0U,	// FRECPSv4f32
    0U,	// FRECPSv8f16
    0U,	// FRECPXv1f16
    0U,	// FRECPXv1i32
    0U,	// FRECPXv1i64
    0U,	// FRINTADr
    0U,	// FRINTAHr
    0U,	// FRINTASr
    0U,	// FRINTAv2f32
    0U,	// FRINTAv2f64
    0U,	// FRINTAv4f16
    0U,	// FRINTAv4f32
    0U,	// FRINTAv8f16
    0U,	// FRINTIDr
    0U,	// FRINTIHr
    0U,	// FRINTISr
    0U,	// FRINTIv2f32
    0U,	// FRINTIv2f64
    0U,	// FRINTIv4f16
    0U,	// FRINTIv4f32
    0U,	// FRINTIv8f16
    0U,	// FRINTMDr
    0U,	// FRINTMHr
    0U,	// FRINTMSr
    0U,	// FRINTMv2f32
    0U,	// FRINTMv2f64
    0U,	// FRINTMv4f16
    0U,	// FRINTMv4f32
    0U,	// FRINTMv8f16
    0U,	// FRINTNDr
    0U,	// FRINTNHr
    0U,	// FRINTNSr
    0U,	// FRINTNv2f32
    0U,	// FRINTNv2f64
    0U,	// FRINTNv4f16
    0U,	// FRINTNv4f32
    0U,	// FRINTNv8f16
    0U,	// FRINTPDr
    0U,	// FRINTPHr
    0U,	// FRINTPSr
    0U,	// FRINTPv2f32
    0U,	// FRINTPv2f64
    0U,	// FRINTPv4f16
    0U,	// FRINTPv4f32
    0U,	// FRINTPv8f16
    0U,	// FRINTXDr
    0U,	// FRINTXHr
    0U,	// FRINTXSr
    0U,	// FRINTXv2f32
    0U,	// FRINTXv2f64
    0U,	// FRINTXv4f16
    0U,	// FRINTXv4f32
    0U,	// FRINTXv8f16
    0U,	// FRINTZDr
    0U,	// FRINTZHr
    0U,	// FRINTZSr
    0U,	// FRINTZv2f32
    0U,	// FRINTZv2f64
    0U,	// FRINTZv4f16
    0U,	// FRINTZv4f32
    0U,	// FRINTZv8f16
    0U,	// FRSQRTEv1f16
    0U,	// FRSQRTEv1i32
    0U,	// FRSQRTEv1i64
    0U,	// FRSQRTEv2f32
    0U,	// FRSQRTEv2f64
    0U,	// FRSQRTEv4f16
    0U,	// FRSQRTEv4f32
    0U,	// FRSQRTEv8f16
    0U,	// FRSQRTS16
    0U,	// FRSQRTS32
    0U,	// FRSQRTS64
    0U,	// FRSQRTSv2f32
    0U,	// FRSQRTSv2f64
    0U,	// FRSQRTSv4f16
    0U,	// FRSQRTSv4f32
    0U,	// FRSQRTSv8f16
    0U,	// FSQRTDr
    0U,	// FSQRTHr
    0U,	// FSQRTSr
    0U,	// FSQRTv2f32
    0U,	// FSQRTv2f64
    0U,	// FSQRTv4f16
    0U,	// FSQRTv4f32
    0U,	// FSQRTv8f16
    0U,	// FSUBDrr
    0U,	// FSUBHrr
    0U,	// FSUBSrr
    0U,	// FSUBv2f32
    0U,	// FSUBv2f64
    0U,	// FSUBv4f16
    0U,	// FSUBv4f32
    0U,	// FSUBv8f16
    0U,	// GLD1B_D_IMM_REAL
    0U,	// GLD1B_D_REAL
    0U,	// GLD1B_D_SXTW_REAL
    0U,	// GLD1B_D_UXTW_REAL
    0U,	// GLD1B_S_IMM_REAL
    0U,	// GLD1B_S_SXTW_REAL
    0U,	// GLD1B_S_UXTW_REAL
    0U,	// GLD1D_IMM_REAL
    0U,	// GLD1D_REAL
    0U,	// GLD1D_SCALED_REAL
    0U,	// GLD1D_SXTW_REAL
    0U,	// GLD1D_SXTW_SCALED_REAL
    0U,	// GLD1D_UXTW_REAL
    0U,	// GLD1D_UXTW_SCALED_REAL
    0U,	// GLD1H_D_IMM_REAL
    0U,	// GLD1H_D_REAL
    0U,	// GLD1H_D_SCALED_REAL
    0U,	// GLD1H_D_SXTW_REAL
    0U,	// GLD1H_D_SXTW_SCALED_REAL
    0U,	// GLD1H_D_UXTW_REAL
    0U,	// GLD1H_D_UXTW_SCALED_REAL
    0U,	// GLD1H_S_IMM_REAL
    0U,	// GLD1H_S_SXTW_REAL
    0U,	// GLD1H_S_SXTW_SCALED_REAL
    0U,	// GLD1H_S_UXTW_REAL
    0U,	// GLD1H_S_UXTW_SCALED_REAL
    0U,	// GLD1SB_D_IMM_REAL
    0U,	// GLD1SB_D_REAL
    0U,	// GLD1SB_D_SXTW_REAL
    0U,	// GLD1SB_D_UXTW_REAL
    0U,	// GLD1SB_S_IMM_REAL
    0U,	// GLD1SB_S_SXTW_REAL
    0U,	// GLD1SB_S_UXTW_REAL
    0U,	// GLD1SH_D_IMM_REAL
    0U,	// GLD1SH_D_REAL
    0U,	// GLD1SH_D_SCALED_REAL
    0U,	// GLD1SH_D_SXTW_REAL
    0U,	// GLD1SH_D_SXTW_SCALED_REAL
    0U,	// GLD1SH_D_UXTW_REAL
    0U,	// GLD1SH_D_UXTW_SCALED_REAL
    0U,	// GLD1SH_S_IMM_REAL
    0U,	// GLD1SH_S_SXTW_REAL
    0U,	// GLD1SH_S_SXTW_SCALED_REAL
    0U,	// GLD1SH_S_UXTW_REAL
    0U,	// GLD1SH_S_UXTW_SCALED_REAL
    0U,	// GLD1SW_D_IMM_REAL
    0U,	// GLD1SW_D_REAL
    0U,	// GLD1SW_D_SCALED_REAL
    0U,	// GLD1SW_D_SXTW_REAL
    0U,	// GLD1SW_D_SXTW_SCALED_REAL
    0U,	// GLD1SW_D_UXTW_REAL
    0U,	// GLD1SW_D_UXTW_SCALED_REAL
    0U,	// GLD1W_D_IMM_REAL
    0U,	// GLD1W_D_REAL
    0U,	// GLD1W_D_SCALED_REAL
    0U,	// GLD1W_D_SXTW_REAL
    0U,	// GLD1W_D_SXTW_SCALED_REAL
    0U,	// GLD1W_D_UXTW_REAL
    0U,	// GLD1W_D_UXTW_SCALED_REAL
    0U,	// GLD1W_IMM_REAL
    0U,	// GLD1W_SXTW_REAL
    0U,	// GLD1W_SXTW_SCALED_REAL
    0U,	// GLD1W_UXTW_REAL
    0U,	// GLD1W_UXTW_SCALED_REAL
    0U,	// GLDFF1B_D_IMM_REAL
    0U,	// GLDFF1B_D_REAL
    0U,	// GLDFF1B_D_SXTW_REAL
    0U,	// GLDFF1B_D_UXTW_REAL
    0U,	// GLDFF1B_S_IMM_REAL
    0U,	// GLDFF1B_S_SXTW_REAL
    0U,	// GLDFF1B_S_UXTW_REAL
    0U,	// GLDFF1D_IMM_REAL
    0U,	// GLDFF1D_REAL
    0U,	// GLDFF1D_SCALED_REAL
    0U,	// GLDFF1D_SXTW_REAL
    0U,	// GLDFF1D_SXTW_SCALED_REAL
    0U,	// GLDFF1D_UXTW_REAL
    0U,	// GLDFF1D_UXTW_SCALED_REAL
    0U,	// GLDFF1H_D_IMM_REAL
    0U,	// GLDFF1H_D_REAL
    0U,	// GLDFF1H_D_SCALED_REAL
    0U,	// GLDFF1H_D_SXTW_REAL
    0U,	// GLDFF1H_D_SXTW_SCALED_REAL
    0U,	// GLDFF1H_D_UXTW_REAL
    0U,	// GLDFF1H_D_UXTW_SCALED_REAL
    0U,	// GLDFF1H_S_IMM_REAL
    0U,	// GLDFF1H_S_SXTW_REAL
    0U,	// GLDFF1H_S_SXTW_SCALED_REAL
    0U,	// GLDFF1H_S_UXTW_REAL
    0U,	// GLDFF1H_S_UXTW_SCALED_REAL
    0U,	// GLDFF1SB_D_IMM_REAL
    0U,	// GLDFF1SB_D_REAL
    0U,	// GLDFF1SB_D_SXTW_REAL
    0U,	// GLDFF1SB_D_UXTW_REAL
    0U,	// GLDFF1SB_S_IMM_REAL
    0U,	// GLDFF1SB_S_SXTW_REAL
    0U,	// GLDFF1SB_S_UXTW_REAL
    0U,	// GLDFF1SH_D_IMM_REAL
    0U,	// GLDFF1SH_D_REAL
    0U,	// GLDFF1SH_D_SCALED_REAL
    0U,	// GLDFF1SH_D_SXTW_REAL
    0U,	// GLDFF1SH_D_SXTW_SCALED_REAL
    0U,	// GLDFF1SH_D_UXTW_REAL
    0U,	// GLDFF1SH_D_UXTW_SCALED_REAL
    0U,	// GLDFF1SH_S_IMM_REAL
    0U,	// GLDFF1SH_S_SXTW_REAL
    0U,	// GLDFF1SH_S_SXTW_SCALED_REAL
    0U,	// GLDFF1SH_S_UXTW_REAL
    0U,	// GLDFF1SH_S_UXTW_SCALED_REAL
    0U,	// GLDFF1SW_D_IMM_REAL
    0U,	// GLDFF1SW_D_REAL
    0U,	// GLDFF1SW_D_SCALED_REAL
    0U,	// GLDFF1SW_D_SXTW_REAL
    0U,	// GLDFF1SW_D_SXTW_SCALED_REAL
    0U,	// GLDFF1SW_D_UXTW_REAL
    0U,	// GLDFF1SW_D_UXTW_SCALED_REAL
    0U,	// GLDFF1W_D_IMM_REAL
    0U,	// GLDFF1W_D_REAL
    0U,	// GLDFF1W_D_SCALED_REAL
    0U,	// GLDFF1W_D_SXTW_REAL
    0U,	// GLDFF1W_D_SXTW_SCALED_REAL
    0U,	// GLDFF1W_D_UXTW_REAL
    0U,	// GLDFF1W_D_UXTW_SCALED_REAL
    0U,	// GLDFF1W_IMM_REAL
    0U,	// GLDFF1W_SXTW_REAL
    0U,	// GLDFF1W_SXTW_SCALED_REAL
    0U,	// GLDFF1W_UXTW_REAL
    0U,	// GLDFF1W_UXTW_SCALED_REAL
    0U,	// HINT
    0U,	// HLT
    0U,	// HVC
    0U,	// INDEX_II_B
    0U,	// INDEX_II_D
    0U,	// INDEX_II_H
    0U,	// INDEX_II_S
    0U,	// INDEX_IR_B
    0U,	// INDEX_IR_D
    0U,	// INDEX_IR_H
    0U,	// INDEX_IR_S
    0U,	// INDEX_RI_B
    0U,	// INDEX_RI_D
    0U,	// INDEX_RI_H
    0U,	// INDEX_RI_S
    0U,	// INDEX_RR_B
    0U,	// INDEX_RR_D
    0U,	// INDEX_RR_H
    0U,	// INDEX_RR_S
    0U,	// INSvi16gpr
    0U,	// INSvi16lane
    0U,	// INSvi32gpr
    0U,	// INSvi32lane
    0U,	// INSvi64gpr
    0U,	// INSvi64lane
    0U,	// INSvi8gpr
    0U,	// INSvi8lane
    0U,	// ISB
    0U,	// LD1B
    0U,	// LD1B_D
    1U,	// LD1B_D_IMM_REAL
    0U,	// LD1B_H
    1U,	// LD1B_H_IMM_REAL
    1U,	// LD1B_IMM_REAL
    0U,	// LD1B_S
    1U,	// LD1B_S_IMM_REAL
    0U,	// LD1D
    1U,	// LD1D_IMM_REAL
    0U,	// LD1Fourv16b
    0U,	// LD1Fourv16b_POST
    0U,	// LD1Fourv1d
    0U,	// LD1Fourv1d_POST
    0U,	// LD1Fourv2d
    0U,	// LD1Fourv2d_POST
    0U,	// LD1Fourv2s
    0U,	// LD1Fourv2s_POST
    0U,	// LD1Fourv4h
    0U,	// LD1Fourv4h_POST
    0U,	// LD1Fourv4s
    0U,	// LD1Fourv4s_POST
    0U,	// LD1Fourv8b
    0U,	// LD1Fourv8b_POST
    0U,	// LD1Fourv8h
    0U,	// LD1Fourv8h_POST
    0U,	// LD1H
    0U,	// LD1H_D
    1U,	// LD1H_D_IMM_REAL
    1U,	// LD1H_IMM_REAL
    0U,	// LD1H_S
    1U,	// LD1H_S_IMM_REAL
    0U,	// LD1Onev16b
    0U,	// LD1Onev16b_POST
    0U,	// LD1Onev1d
    0U,	// LD1Onev1d_POST
    0U,	// LD1Onev2d
    0U,	// LD1Onev2d_POST
    0U,	// LD1Onev2s
    0U,	// LD1Onev2s_POST
    0U,	// LD1Onev4h
    0U,	// LD1Onev4h_POST
    0U,	// LD1Onev4s
    0U,	// LD1Onev4s_POST
    0U,	// LD1Onev8b
    0U,	// LD1Onev8b_POST
    0U,	// LD1Onev8h
    0U,	// LD1Onev8h_POST
    0U,	// LD1RB_D_IMM
    0U,	// LD1RB_H_IMM
    0U,	// LD1RB_IMM
    0U,	// LD1RB_S_IMM
    0U,	// LD1RD_IMM
    0U,	// LD1RH_D_IMM
    0U,	// LD1RH_IMM
    0U,	// LD1RH_S_IMM
    0U,	// LD1RQ_B
    0U,	// LD1RQ_B_IMM
    0U,	// LD1RQ_D
    0U,	// LD1RQ_D_IMM
    0U,	// LD1RQ_H
    0U,	// LD1RQ_H_IMM
    0U,	// LD1RQ_W
    0U,	// LD1RQ_W_IMM
    0U,	// LD1RSB_D_IMM
    0U,	// LD1RSB_H_IMM
    0U,	// LD1RSB_S_IMM
    0U,	// LD1RSH_D_IMM
    0U,	// LD1RSH_S_IMM
    0U,	// LD1RSW_IMM
    0U,	// LD1RW_D_IMM
    0U,	// LD1RW_IMM
    0U,	// LD1Rv16b
    0U,	// LD1Rv16b_POST
    0U,	// LD1Rv1d
    0U,	// LD1Rv1d_POST
    0U,	// LD1Rv2d
    0U,	// LD1Rv2d_POST
    0U,	// LD1Rv2s
    0U,	// LD1Rv2s_POST
    0U,	// LD1Rv4h
    0U,	// LD1Rv4h_POST
    0U,	// LD1Rv4s
    0U,	// LD1Rv4s_POST
    0U,	// LD1Rv8b
    0U,	// LD1Rv8b_POST
    0U,	// LD1Rv8h
    0U,	// LD1Rv8h_POST
    0U,	// LD1SB_D
    1U,	// LD1SB_D_IMM_REAL
    0U,	// LD1SB_H
    1U,	// LD1SB_H_IMM_REAL
    0U,	// LD1SB_S
    1U,	// LD1SB_S_IMM_REAL
    0U,	// LD1SH_D
    1U,	// LD1SH_D_IMM_REAL
    0U,	// LD1SH_S
    1U,	// LD1SH_S_IMM_REAL
    0U,	// LD1SW_D
    1U,	// LD1SW_D_IMM_REAL
    0U,	// LD1Threev16b
    0U,	// LD1Threev16b_POST
    0U,	// LD1Threev1d
    0U,	// LD1Threev1d_POST
    0U,	// LD1Threev2d
    0U,	// LD1Threev2d_POST
    0U,	// LD1Threev2s
    0U,	// LD1Threev2s_POST
    0U,	// LD1Threev4h
    0U,	// LD1Threev4h_POST
    0U,	// LD1Threev4s
    0U,	// LD1Threev4s_POST
    0U,	// LD1Threev8b
    0U,	// LD1Threev8b_POST
    0U,	// LD1Threev8h
    0U,	// LD1Threev8h_POST
    0U,	// LD1Twov16b
    0U,	// LD1Twov16b_POST
    0U,	// LD1Twov1d
    0U,	// LD1Twov1d_POST
    0U,	// LD1Twov2d
    0U,	// LD1Twov2d_POST
    0U,	// LD1Twov2s
    0U,	// LD1Twov2s_POST
    0U,	// LD1Twov4h
    0U,	// LD1Twov4h_POST
    0U,	// LD1Twov4s
    0U,	// LD1Twov4s_POST
    0U,	// LD1Twov8b
    0U,	// LD1Twov8b_POST
    0U,	// LD1Twov8h
    0U,	// LD1Twov8h_POST
    0U,	// LD1W
    0U,	// LD1W_D
    1U,	// LD1W_D_IMM_REAL
    1U,	// LD1W_IMM_REAL
    0U,	// LD1i16
    0U,	// LD1i16_POST
    0U,	// LD1i32
    0U,	// LD1i32_POST
    0U,	// LD1i64
    0U,	// LD1i64_POST
    0U,	// LD1i8
    0U,	// LD1i8_POST
    0U,	// LD2B
    1U,	// LD2B_IMM
    0U,	// LD2D
    1U,	// LD2D_IMM
    0U,	// LD2H
    1U,	// LD2H_IMM
    0U,	// LD2Rv16b
    0U,	// LD2Rv16b_POST
    0U,	// LD2Rv1d
    0U,	// LD2Rv1d_POST
    0U,	// LD2Rv2d
    0U,	// LD2Rv2d_POST
    0U,	// LD2Rv2s
    0U,	// LD2Rv2s_POST
    0U,	// LD2Rv4h
    0U,	// LD2Rv4h_POST
    0U,	// LD2Rv4s
    0U,	// LD2Rv4s_POST
    0U,	// LD2Rv8b
    0U,	// LD2Rv8b_POST
    0U,	// LD2Rv8h
    0U,	// LD2Rv8h_POST
    0U,	// LD2Twov16b
    0U,	// LD2Twov16b_POST
    0U,	// LD2Twov2d
    0U,	// LD2Twov2d_POST
    0U,	// LD2Twov2s
    0U,	// LD2Twov2s_POST
    0U,	// LD2Twov4h
    0U,	// LD2Twov4h_POST
    0U,	// LD2Twov4s
    0U,	// LD2Twov4s_POST
    0U,	// LD2Twov8b
    0U,	// LD2Twov8b_POST
    0U,	// LD2Twov8h
    0U,	// LD2Twov8h_POST
    0U,	// LD2W
    1U,	// LD2W_IMM
    0U,	// LD2i16
    0U,	// LD2i16_POST
    0U,	// LD2i32
    0U,	// LD2i32_POST
    0U,	// LD2i64
    0U,	// LD2i64_POST
    0U,	// LD2i8
    0U,	// LD2i8_POST
    0U,	// LD3B
    0U,	// LD3B_IMM
    0U,	// LD3D
    0U,	// LD3D_IMM
    0U,	// LD3H
    0U,	// LD3H_IMM
    0U,	// LD3Rv16b
    0U,	// LD3Rv16b_POST
    0U,	// LD3Rv1d
    0U,	// LD3Rv1d_POST
    0U,	// LD3Rv2d
    0U,	// LD3Rv2d_POST
    0U,	// LD3Rv2s
    0U,	// LD3Rv2s_POST
    0U,	// LD3Rv4h
    0U,	// LD3Rv4h_POST
    0U,	// LD3Rv4s
    0U,	// LD3Rv4s_POST
    0U,	// LD3Rv8b
    0U,	// LD3Rv8b_POST
    0U,	// LD3Rv8h
    0U,	// LD3Rv8h_POST
    0U,	// LD3Threev16b
    0U,	// LD3Threev16b_POST
    0U,	// LD3Threev2d
    0U,	// LD3Threev2d_POST
    0U,	// LD3Threev2s
    0U,	// LD3Threev2s_POST
    0U,	// LD3Threev4h
    0U,	// LD3Threev4h_POST
    0U,	// LD3Threev4s
    0U,	// LD3Threev4s_POST
    0U,	// LD3Threev8b
    0U,	// LD3Threev8b_POST
    0U,	// LD3Threev8h
    0U,	// LD3Threev8h_POST
    0U,	// LD3W
    0U,	// LD3W_IMM
    0U,	// LD3i16
    0U,	// LD3i16_POST
    0U,	// LD3i32
    0U,	// LD3i32_POST
    0U,	// LD3i64
    0U,	// LD3i64_POST
    0U,	// LD3i8
    0U,	// LD3i8_POST
    0U,	// LD4B
    1U,	// LD4B_IMM
    0U,	// LD4D
    1U,	// LD4D_IMM
    0U,	// LD4Fourv16b
    0U,	// LD4Fourv16b_POST
    0U,	// LD4Fourv2d
    0U,	// LD4Fourv2d_POST
    0U,	// LD4Fourv2s
    0U,	// LD4Fourv2s_POST
    0U,	// LD4Fourv4h
    0U,	// LD4Fourv4h_POST
    0U,	// LD4Fourv4s
    0U,	// LD4Fourv4s_POST
    0U,	// LD4Fourv8b
    0U,	// LD4Fourv8b_POST
    0U,	// LD4Fourv8h
    0U,	// LD4Fourv8h_POST
    0U,	// LD4H
    1U,	// LD4H_IMM
    0U,	// LD4Rv16b
    0U,	// LD4Rv16b_POST
    0U,	// LD4Rv1d
    0U,	// LD4Rv1d_POST
    0U,	// LD4Rv2d
    0U,	// LD4Rv2d_POST
    0U,	// LD4Rv2s
    0U,	// LD4Rv2s_POST
    0U,	// LD4Rv4h
    0U,	// LD4Rv4h_POST
    0U,	// LD4Rv4s
    0U,	// LD4Rv4s_POST
    0U,	// LD4Rv8b
    0U,	// LD4Rv8b_POST
    0U,	// LD4Rv8h
    0U,	// LD4Rv8h_POST
    0U,	// LD4W
    1U,	// LD4W_IMM
    0U,	// LD4i16
    0U,	// LD4i16_POST
    0U,	// LD4i32
    0U,	// LD4i32_POST
    0U,	// LD4i64
    0U,	// LD4i64_POST
    0U,	// LD4i8
    0U,	// LD4i8_POST
    0U,	// LDADDAB
    0U,	// LDADDAH
    0U,	// LDADDALB
    0U,	// LDADDALH
    0U,	// LDADDALW
    0U,	// LDADDALX
    0U,	// LDADDAW
    0U,	// LDADDAX
    0U,	// LDADDB
    0U,	// LDADDH
    0U,	// LDADDLB
    0U,	// LDADDLH
    0U,	// LDADDLW
    0U,	// LDADDLX
    0U,	// LDADDW
    0U,	// LDADDX
    0U,	// LDAPRB
    0U,	// LDAPRH
    0U,	// LDAPRW
    0U,	// LDAPRX
    0U,	// LDARB
    0U,	// LDARH
    0U,	// LDARW
    0U,	// LDARX
    0U,	// LDAXPW
    0U,	// LDAXPX
    0U,	// LDAXRB
    0U,	// LDAXRH
    0U,	// LDAXRW
    0U,	// LDAXRX
    0U,	// LDCLRAB
    0U,	// LDCLRAH
    0U,	// LDCLRALB
    0U,	// LDCLRALH
    0U,	// LDCLRALW
    0U,	// LDCLRALX
    0U,	// LDCLRAW
    0U,	// LDCLRAX
    0U,	// LDCLRB
    0U,	// LDCLRH
    0U,	// LDCLRLB
    0U,	// LDCLRLH
    0U,	// LDCLRLW
    0U,	// LDCLRLX
    0U,	// LDCLRW
    0U,	// LDCLRX
    0U,	// LDEORAB
    0U,	// LDEORAH
    0U,	// LDEORALB
    0U,	// LDEORALH
    0U,	// LDEORALW
    0U,	// LDEORALX
    0U,	// LDEORAW
    0U,	// LDEORAX
    0U,	// LDEORB
    0U,	// LDEORH
    0U,	// LDEORLB
    0U,	// LDEORLH
    0U,	// LDEORLW
    0U,	// LDEORLX
    0U,	// LDEORW
    0U,	// LDEORX
    0U,	// LDFF1B_D_REAL
    0U,	// LDFF1B_H_REAL
    0U,	// LDFF1B_REAL
    0U,	// LDFF1B_S_REAL
    0U,	// LDFF1D_REAL
    0U,	// LDFF1H_D_REAL
    0U,	// LDFF1H_REAL
    0U,	// LDFF1H_S_REAL
    0U,	// LDFF1SB_D_REAL
    0U,	// LDFF1SB_H_REAL
    0U,	// LDFF1SB_S_REAL
    0U,	// LDFF1SH_D_REAL
    0U,	// LDFF1SH_S_REAL
    0U,	// LDFF1SW_D_REAL
    0U,	// LDFF1W_D_REAL
    0U,	// LDFF1W_REAL
    0U,	// LDLARB
    0U,	// LDLARH
    0U,	// LDLARW
    0U,	// LDLARX
    1U,	// LDNF1B_D_IMM_REAL
    1U,	// LDNF1B_H_IMM_REAL
    1U,	// LDNF1B_IMM_REAL
    1U,	// LDNF1B_S_IMM_REAL
    1U,	// LDNF1D_IMM_REAL
    1U,	// LDNF1H_D_IMM_REAL
    1U,	// LDNF1H_IMM_REAL
    1U,	// LDNF1H_S_IMM_REAL
    1U,	// LDNF1SB_D_IMM_REAL
    1U,	// LDNF1SB_H_IMM_REAL
    1U,	// LDNF1SB_S_IMM_REAL
    1U,	// LDNF1SH_D_IMM_REAL
    1U,	// LDNF1SH_S_IMM_REAL
    1U,	// LDNF1SW_D_IMM_REAL
    1U,	// LDNF1W_D_IMM_REAL
    1U,	// LDNF1W_IMM_REAL
    14U,	// LDNPDi
    16U,	// LDNPQi
    18U,	// LDNPSi
    18U,	// LDNPWi
    14U,	// LDNPXi
    1U,	// LDNT1B_ZRI
    0U,	// LDNT1B_ZRR
    1U,	// LDNT1D_ZRI
    0U,	// LDNT1D_ZRR
    1U,	// LDNT1H_ZRI
    0U,	// LDNT1H_ZRR
    1U,	// LDNT1W_ZRI
    0U,	// LDNT1W_ZRR
    14U,	// LDPDi
    85U,	// LDPDpost
    148U,	// LDPDpre
    16U,	// LDPQi
    87U,	// LDPQpost
    150U,	// LDPQpre
    18U,	// LDPSWi
    89U,	// LDPSWpost
    152U,	// LDPSWpre
    18U,	// LDPSi
    89U,	// LDPSpost
    152U,	// LDPSpre
    18U,	// LDPWi
    89U,	// LDPWpost
    152U,	// LDPWpre
    14U,	// LDPXi
    85U,	// LDPXpost
    148U,	// LDPXpre
    0U,	// LDRAAindexed
    1U,	// LDRAAwriteback
    0U,	// LDRABindexed
    1U,	// LDRABwriteback
    0U,	// LDRBBpost
    1U,	// LDRBBpre
    26U,	// LDRBBroW
    28U,	// LDRBBroX
    0U,	// LDRBBui
    0U,	// LDRBpost
    1U,	// LDRBpre
    26U,	// LDRBroW
    28U,	// LDRBroX
    0U,	// LDRBui
    0U,	// LDRDl
    0U,	// LDRDpost
    1U,	// LDRDpre
    30U,	// LDRDroW
    32U,	// LDRDroX
    0U,	// LDRDui
    0U,	// LDRHHpost
    1U,	// LDRHHpre
    34U,	// LDRHHroW
    36U,	// LDRHHroX
    0U,	// LDRHHui
    0U,	// LDRHpost
    1U,	// LDRHpre
    34U,	// LDRHroW
    36U,	// LDRHroX
    0U,	// LDRHui
    0U,	// LDRQl
    0U,	// LDRQpost
    1U,	// LDRQpre
    38U,	// LDRQroW
    40U,	// LDRQroX
    0U,	// LDRQui
    0U,	// LDRSBWpost
    1U,	// LDRSBWpre
    26U,	// LDRSBWroW
    28U,	// LDRSBWroX
    0U,	// LDRSBWui
    0U,	// LDRSBXpost
    1U,	// LDRSBXpre
    26U,	// LDRSBXroW
    28U,	// LDRSBXroX
    0U,	// LDRSBXui
    0U,	// LDRSHWpost
    1U,	// LDRSHWpre
    34U,	// LDRSHWroW
    36U,	// LDRSHWroX
    0U,	// LDRSHWui
    0U,	// LDRSHXpost
    1U,	// LDRSHXpre
    34U,	// LDRSHXroW
    36U,	// LDRSHXroX
    0U,	// LDRSHXui
    0U,	// LDRSWl
    0U,	// LDRSWpost
    1U,	// LDRSWpre
    42U,	// LDRSWroW
    44U,	// LDRSWroX
    0U,	// LDRSWui
    0U,	// LDRSl
    0U,	// LDRSpost
    1U,	// LDRSpre
    42U,	// LDRSroW
    44U,	// LDRSroX
    0U,	// LDRSui
    0U,	// LDRWl
    0U,	// LDRWpost
    1U,	// LDRWpre
    42U,	// LDRWroW
    44U,	// LDRWroX
    0U,	// LDRWui
    0U,	// LDRXl
    0U,	// LDRXpost
    1U,	// LDRXpre
    30U,	// LDRXroW
    32U,	// LDRXroX
    0U,	// LDRXui
    0U,	// LDR_PXI
    0U,	// LDR_ZXI
    0U,	// LDSETAB
    0U,	// LDSETAH
    0U,	// LDSETALB
    0U,	// LDSETALH
    0U,	// LDSETALW
    0U,	// LDSETALX
    0U,	// LDSETAW
    0U,	// LDSETAX
    0U,	// LDSETB
    0U,	// LDSETH
    0U,	// LDSETLB
    0U,	// LDSETLH
    0U,	// LDSETLW
    0U,	// LDSETLX
    0U,	// LDSETW
    0U,	// LDSETX
    0U,	// LDSMAXAB
    0U,	// LDSMAXAH
    0U,	// LDSMAXALB
    0U,	// LDSMAXALH
    0U,	// LDSMAXALW
    0U,	// LDSMAXALX
    0U,	// LDSMAXAW
    0U,	// LDSMAXAX
    0U,	// LDSMAXB
    0U,	// LDSMAXH
    0U,	// LDSMAXLB
    0U,	// LDSMAXLH
    0U,	// LDSMAXLW
    0U,	// LDSMAXLX
    0U,	// LDSMAXW
    0U,	// LDSMAXX
    0U,	// LDSMINAB
    0U,	// LDSMINAH
    0U,	// LDSMINALB
    0U,	// LDSMINALH
    0U,	// LDSMINALW
    0U,	// LDSMINALX
    0U,	// LDSMINAW
    0U,	// LDSMINAX
    0U,	// LDSMINB
    0U,	// LDSMINH
    0U,	// LDSMINLB
    0U,	// LDSMINLH
    0U,	// LDSMINLW
    0U,	// LDSMINLX
    0U,	// LDSMINW
    0U,	// LDSMINX
    0U,	// LDTRBi
    0U,	// LDTRHi
    0U,	// LDTRSBWi
    0U,	// LDTRSBXi
    0U,	// LDTRSHWi
    0U,	// LDTRSHXi
    0U,	// LDTRSWi
    0U,	// LDTRWi
    0U,	// LDTRXi
    0U,	// LDUMAXAB
    0U,	// LDUMAXAH
    0U,	// LDUMAXALB
    0U,	// LDUMAXALH
    0U,	// LDUMAXALW
    0U,	// LDUMAXALX
    0U,	// LDUMAXAW
    0U,	// LDUMAXAX
    0U,	// LDUMAXB
    0U,	// LDUMAXH
    0U,	// LDUMAXLB
    0U,	// LDUMAXLH
    0U,	// LDUMAXLW
    0U,	// LDUMAXLX
    0U,	// LDUMAXW
    0U,	// LDUMAXX
    0U,	// LDUMINAB
    0U,	// LDUMINAH
    0U,	// LDUMINALB
    0U,	// LDUMINALH
    0U,	// LDUMINALW
    0U,	// LDUMINALX
    0U,	// LDUMINAW
    0U,	// LDUMINAX
    0U,	// LDUMINB
    0U,	// LDUMINH
    0U,	// LDUMINLB
    0U,	// LDUMINLH
    0U,	// LDUMINLW
    0U,	// LDUMINLX
    0U,	// LDUMINW
    0U,	// LDUMINX
    0U,	// LDURBBi
    0U,	// LDURBi
    0U,	// LDURDi
    0U,	// LDURHHi
    0U,	// LDURHi
    0U,	// LDURQi
    0U,	// LDURSBWi
    0U,	// LDURSBXi
    0U,	// LDURSHWi
    0U,	// LDURSHXi
    0U,	// LDURSWi
    0U,	// LDURSi
    0U,	// LDURWi
    0U,	// LDURXi
    0U,	// LDXPW
    0U,	// LDXPX
    0U,	// LDXRB
    0U,	// LDXRH
    0U,	// LDXRW
    0U,	// LDXRX
    0U,	// LOADgot
    0U,	// LSLVWr
    0U,	// LSLVXr
    0U,	// LSL_ZPmZ_B
    0U,	// LSL_ZPmZ_D
    0U,	// LSL_ZPmZ_H
    0U,	// LSL_ZPmZ_S
    0U,	// LSL_ZZI_B
    0U,	// LSL_ZZI_D
    0U,	// LSL_ZZI_H
    0U,	// LSL_ZZI_S
    0U,	// LSRVWr
    0U,	// LSRVXr
    0U,	// LSR_ZPmZ_B
    0U,	// LSR_ZPmZ_D
    0U,	// LSR_ZPmZ_H
    0U,	// LSR_ZPmZ_S
    0U,	// LSR_ZZI_B
    0U,	// LSR_ZZI_D
    0U,	// LSR_ZZI_H
    0U,	// LSR_ZZI_S
    4U,	// MADDWrrr
    4U,	// MADDXrrr
    0U,	// MLAv16i8
    0U,	// MLAv2i32
    75U,	// MLAv2i32_indexed
    0U,	// MLAv4i16
    75U,	// MLAv4i16_indexed
    0U,	// MLAv4i32
    75U,	// MLAv4i32_indexed
    0U,	// MLAv8i16
    75U,	// MLAv8i16_indexed
    0U,	// MLAv8i8
    0U,	// MLSv16i8
    0U,	// MLSv2i32
    75U,	// MLSv2i32_indexed
    0U,	// MLSv4i16
    75U,	// MLSv4i16_indexed
    0U,	// MLSv4i32
    75U,	// MLSv4i32_indexed
    0U,	// MLSv8i16
    75U,	// MLSv8i16_indexed
    0U,	// MLSv8i8
    0U,	// MOVID
    0U,	// MOVIv16b_ns
    0U,	// MOVIv2d_ns
    0U,	// MOVIv2i32
    0U,	// MOVIv2s_msl
    0U,	// MOVIv4i16
    0U,	// MOVIv4i32
    0U,	// MOVIv4s_msl
    0U,	// MOVIv8b_ns
    0U,	// MOVIv8i16
    0U,	// MOVKWi
    0U,	// MOVKXi
    0U,	// MOVNWi
    0U,	// MOVNXi
    0U,	// MOVZWi
    0U,	// MOVZXi
    0U,	// MOVaddr
    0U,	// MOVaddrBA
    0U,	// MOVaddrCP
    0U,	// MOVaddrEXT
    0U,	// MOVaddrJT
    0U,	// MOVaddrTLS
    0U,	// MOVbaseTLS
    0U,	// MOVi32imm
    0U,	// MOVi64imm
    0U,	// MRS
    0U,	// MSR
    0U,	// MSRpstateImm1
    0U,	// MSRpstateImm4
    4U,	// MSUBWrrr
    4U,	// MSUBXrrr
    0U,	// MULv16i8
    0U,	// MULv2i32
    13U,	// MULv2i32_indexed
    0U,	// MULv4i16
    13U,	// MULv4i16_indexed
    0U,	// MULv4i32
    13U,	// MULv4i32_indexed
    0U,	// MULv8i16
    13U,	// MULv8i16_indexed
    0U,	// MULv8i8
    0U,	// MVNIv2i32
    0U,	// MVNIv2s_msl
    0U,	// MVNIv4i16
    0U,	// MVNIv4i32
    0U,	// MVNIv4s_msl
    0U,	// MVNIv8i16
    0U,	// NEGv16i8
    0U,	// NEGv1i64
    0U,	// NEGv2i32
    0U,	// NEGv2i64
    0U,	// NEGv4i16
    0U,	// NEGv4i32
    0U,	// NEGv8i16
    0U,	// NEGv8i8
    0U,	// NOTv16i8
    0U,	// NOTv8i8
    0U,	// ORNWrr
    0U,	// ORNWrs
    0U,	// ORNXrr
    0U,	// ORNXrs
    0U,	// ORNv16i8
    0U,	// ORNv8i8
    0U,	// ORRWri
    0U,	// ORRWrr
    0U,	// ORRWrs
    0U,	// ORRXri
    0U,	// ORRXrr
    0U,	// ORRXrs
    0U,	// ORR_ZI
    0U,	// ORR_ZPmZ_B
    0U,	// ORR_ZPmZ_D
    0U,	// ORR_ZPmZ_H
    0U,	// ORR_ZPmZ_S
    0U,	// ORR_ZZZ
    0U,	// ORRv16i8
    0U,	// ORRv2i32
    0U,	// ORRv4i16
    0U,	// ORRv4i32
    0U,	// ORRv8i16
    0U,	// ORRv8i8
    0U,	// PACDA
    0U,	// PACDB
    0U,	// PACDZA
    0U,	// PACDZB
    0U,	// PACGA
    0U,	// PACIA
    0U,	// PACIA1716
    0U,	// PACIASP
    0U,	// PACIAZ
    0U,	// PACIB
    0U,	// PACIB1716
    0U,	// PACIBSP
    0U,	// PACIBZ
    0U,	// PACIZA
    0U,	// PACIZB
    0U,	// PMULLv16i8
    0U,	// PMULLv1i64
    0U,	// PMULLv2i64
    0U,	// PMULLv8i8
    0U,	// PMULv16i8
    0U,	// PMULv8i8
    0U,	// PRFB_D_PZI
    0U,	// PRFB_D_SCALED
    0U,	// PRFB_D_SXTW_SCALED
    0U,	// PRFB_D_UXTW_SCALED
    0U,	// PRFB_PRI
    0U,	// PRFB_PRR
    0U,	// PRFB_S_PZI
    0U,	// PRFB_S_SXTW_SCALED
    0U,	// PRFB_S_UXTW_SCALED
    0U,	// PRFD_D_PZI
    0U,	// PRFD_D_SCALED
    0U,	// PRFD_D_SXTW_SCALED
    0U,	// PRFD_D_UXTW_SCALED
    0U,	// PRFD_PRI
    0U,	// PRFD_PRR
    0U,	// PRFD_S_PZI
    0U,	// PRFD_S_SXTW_SCALED
    0U,	// PRFD_S_UXTW_SCALED
    0U,	// PRFH_D_PZI
    0U,	// PRFH_D_SCALED
    0U,	// PRFH_D_SXTW_SCALED
    0U,	// PRFH_D_UXTW_SCALED
    0U,	// PRFH_PRI
    0U,	// PRFH_PRR
    0U,	// PRFH_S_PZI
    0U,	// PRFH_S_SXTW_SCALED
    0U,	// PRFH_S_UXTW_SCALED
    0U,	// PRFMl
    30U,	// PRFMroW
    32U,	// PRFMroX
    0U,	// PRFMui
    0U,	// PRFS_PRR
    0U,	// PRFUMi
    0U,	// PRFW_D_PZI
    0U,	// PRFW_D_SCALED
    0U,	// PRFW_D_SXTW_SCALED
    0U,	// PRFW_D_UXTW_SCALED
    0U,	// PRFW_PRI
    0U,	// PRFW_S_PZI
    0U,	// PRFW_S_SXTW_SCALED
    0U,	// PRFW_S_UXTW_SCALED
    0U,	// PTRUES_B
    0U,	// PTRUES_D
    0U,	// PTRUES_H
    0U,	// PTRUES_S
    0U,	// PTRUE_B
    0U,	// PTRUE_D
    0U,	// PTRUE_H
    0U,	// PTRUE_S
    0U,	// RADDHNv2i64_v2i32
    0U,	// RADDHNv2i64_v4i32
    0U,	// RADDHNv4i32_v4i16
    0U,	// RADDHNv4i32_v8i16
    0U,	// RADDHNv8i16_v16i8
    0U,	// RADDHNv8i16_v8i8
    0U,	// RBITWr
    0U,	// RBITXr
    0U,	// RBITv16i8
    0U,	// RBITv8i8
    0U,	// RDVLI_XI
    0U,	// RET
    0U,	// RETAA
    0U,	// RETAB
    0U,	// RET_ReallyLR
    0U,	// REV16Wr
    0U,	// REV16Xr
    0U,	// REV16v16i8
    0U,	// REV16v8i8
    0U,	// REV32Xr
    0U,	// REV32v16i8
    0U,	// REV32v4i16
    0U,	// REV32v8i16
    0U,	// REV32v8i8
    0U,	// REV64v16i8
    0U,	// REV64v2i32
    0U,	// REV64v4i16
    0U,	// REV64v4i32
    0U,	// REV64v8i16
    0U,	// REV64v8i8
    0U,	// REVWr
    0U,	// REVXr
    0U,	// RORVWr
    0U,	// RORVXr
    0U,	// RSHRNv16i8_shift
    0U,	// RSHRNv2i32_shift
    0U,	// RSHRNv4i16_shift
    0U,	// RSHRNv4i32_shift
    0U,	// RSHRNv8i16_shift
    0U,	// RSHRNv8i8_shift
    0U,	// RSUBHNv2i64_v2i32
    0U,	// RSUBHNv2i64_v4i32
    0U,	// RSUBHNv4i32_v4i16
    0U,	// RSUBHNv4i32_v8i16
    0U,	// RSUBHNv8i16_v16i8
    0U,	// RSUBHNv8i16_v8i8
    0U,	// SABALv16i8_v8i16
    0U,	// SABALv2i32_v2i64
    0U,	// SABALv4i16_v4i32
    0U,	// SABALv4i32_v2i64
    0U,	// SABALv8i16_v4i32
    0U,	// SABALv8i8_v8i16
    0U,	// SABAv16i8
    0U,	// SABAv2i32
    0U,	// SABAv4i16
    0U,	// SABAv4i32
    0U,	// SABAv8i16
    0U,	// SABAv8i8
    0U,	// SABDLv16i8_v8i16
    0U,	// SABDLv2i32_v2i64
    0U,	// SABDLv4i16_v4i32
    0U,	// SABDLv4i32_v2i64
    0U,	// SABDLv8i16_v4i32
    0U,	// SABDLv8i8_v8i16
    0U,	// SABDv16i8
    0U,	// SABDv2i32
    0U,	// SABDv4i16
    0U,	// SABDv4i32
    0U,	// SABDv8i16
    0U,	// SABDv8i8
    0U,	// SADALPv16i8_v8i16
    0U,	// SADALPv2i32_v1i64
    0U,	// SADALPv4i16_v2i32
    0U,	// SADALPv4i32_v2i64
    0U,	// SADALPv8i16_v4i32
    0U,	// SADALPv8i8_v4i16
    0U,	// SADDLPv16i8_v8i16
    0U,	// SADDLPv2i32_v1i64
    0U,	// SADDLPv4i16_v2i32
    0U,	// SADDLPv4i32_v2i64
    0U,	// SADDLPv8i16_v4i32
    0U,	// SADDLPv8i8_v4i16
    0U,	// SADDLVv16i8v
    0U,	// SADDLVv4i16v
    0U,	// SADDLVv4i32v
    0U,	// SADDLVv8i16v
    0U,	// SADDLVv8i8v
    0U,	// SADDLv16i8_v8i16
    0U,	// SADDLv2i32_v2i64
    0U,	// SADDLv4i16_v4i32
    0U,	// SADDLv4i32_v2i64
    0U,	// SADDLv8i16_v4i32
    0U,	// SADDLv8i8_v8i16
    0U,	// SADDWv16i8_v8i16
    0U,	// SADDWv2i32_v2i64
    0U,	// SADDWv4i16_v4i32
    0U,	// SADDWv4i32_v2i64
    0U,	// SADDWv8i16_v4i32
    0U,	// SADDWv8i8_v8i16
    0U,	// SBCSWr
    0U,	// SBCSXr
    0U,	// SBCWr
    0U,	// SBCXr
    4U,	// SBFMWri
    4U,	// SBFMXri
    0U,	// SCVTFDHr
    0U,	// SCVTFHDr
    0U,	// SCVTFHSr
    0U,	// SCVTFSHr
    0U,	// SCVTFSWDri
    0U,	// SCVTFSWHri
    0U,	// SCVTFSWSri
    0U,	// SCVTFSXDri
    0U,	// SCVTFSXHri
    0U,	// SCVTFSXSri
    0U,	// SCVTFUWDri
    0U,	// SCVTFUWHri
    0U,	// SCVTFUWSri
    0U,	// SCVTFUXDri
    0U,	// SCVTFUXHri
    0U,	// SCVTFUXSri
    0U,	// SCVTFd
    0U,	// SCVTFh
    0U,	// SCVTFs
    0U,	// SCVTFv1i16
    0U,	// SCVTFv1i32
    0U,	// SCVTFv1i64
    0U,	// SCVTFv2f32
    0U,	// SCVTFv2f64
    0U,	// SCVTFv2i32_shift
    0U,	// SCVTFv2i64_shift
    0U,	// SCVTFv4f16
    0U,	// SCVTFv4f32
    0U,	// SCVTFv4i16_shift
    0U,	// SCVTFv4i32_shift
    0U,	// SCVTFv8f16
    0U,	// SCVTFv8i16_shift
    0U,	// SDIVWr
    0U,	// SDIVXr
    1U,	// SDOTlanev16i8
    1U,	// SDOTlanev8i8
    0U,	// SDOTv16i8
    0U,	// SDOTv8i8
    0U,	// SHA1Crrr
    0U,	// SHA1Hrr
    0U,	// SHA1Mrrr
    0U,	// SHA1Prrr
    0U,	// SHA1SU0rrr
    0U,	// SHA1SU1rr
    0U,	// SHA256H2rrr
    0U,	// SHA256Hrrr
    0U,	// SHA256SU0rr
    0U,	// SHA256SU1rrr
    0U,	// SHADDv16i8
    0U,	// SHADDv2i32
    0U,	// SHADDv4i16
    0U,	// SHADDv4i32
    0U,	// SHADDv8i16
    0U,	// SHADDv8i8
    0U,	// SHLLv16i8
    0U,	// SHLLv2i32
    0U,	// SHLLv4i16
    0U,	// SHLLv4i32
    0U,	// SHLLv8i16
    0U,	// SHLLv8i8
    0U,	// SHLd
    0U,	// SHLv16i8_shift
    0U,	// SHLv2i32_shift
    0U,	// SHLv2i64_shift
    0U,	// SHLv4i16_shift
    0U,	// SHLv4i32_shift
    0U,	// SHLv8i16_shift
    0U,	// SHLv8i8_shift
    0U,	// SHRNv16i8_shift
    0U,	// SHRNv2i32_shift
    0U,	// SHRNv4i16_shift
    0U,	// SHRNv4i32_shift
    0U,	// SHRNv8i16_shift
    0U,	// SHRNv8i8_shift
    0U,	// SHSUBv16i8
    0U,	// SHSUBv2i32
    0U,	// SHSUBv4i16
    0U,	// SHSUBv4i32
    0U,	// SHSUBv8i16
    0U,	// SHSUBv8i8
    0U,	// SLId
    0U,	// SLIv16i8_shift
    0U,	// SLIv2i32_shift
    0U,	// SLIv2i64_shift
    0U,	// SLIv4i16_shift
    0U,	// SLIv4i32_shift
    0U,	// SLIv8i16_shift
    0U,	// SLIv8i8_shift
    4U,	// SMADDLrrr
    0U,	// SMAXPv16i8
    0U,	// SMAXPv2i32
    0U,	// SMAXPv4i16
    0U,	// SMAXPv4i32
    0U,	// SMAXPv8i16
    0U,	// SMAXPv8i8
    0U,	// SMAXVv16i8v
    0U,	// SMAXVv4i16v
    0U,	// SMAXVv4i32v
    0U,	// SMAXVv8i16v
    0U,	// SMAXVv8i8v
    0U,	// SMAXv16i8
    0U,	// SMAXv2i32
    0U,	// SMAXv4i16
    0U,	// SMAXv4i32
    0U,	// SMAXv8i16
    0U,	// SMAXv8i8
    0U,	// SMC
    0U,	// SMINPv16i8
    0U,	// SMINPv2i32
    0U,	// SMINPv4i16
    0U,	// SMINPv4i32
    0U,	// SMINPv8i16
    0U,	// SMINPv8i8
    0U,	// SMINVv16i8v
    0U,	// SMINVv4i16v
    0U,	// SMINVv4i32v
    0U,	// SMINVv8i16v
    0U,	// SMINVv8i8v
    0U,	// SMINv16i8
    0U,	// SMINv2i32
    0U,	// SMINv4i16
    0U,	// SMINv4i32
    0U,	// SMINv8i16
    0U,	// SMINv8i8
    0U,	// SMLALv16i8_v8i16
    75U,	// SMLALv2i32_indexed
    0U,	// SMLALv2i32_v2i64
    75U,	// SMLALv4i16_indexed
    0U,	// SMLALv4i16_v4i32
    75U,	// SMLALv4i32_indexed
    0U,	// SMLALv4i32_v2i64
    75U,	// SMLALv8i16_indexed
    0U,	// SMLALv8i16_v4i32
    0U,	// SMLALv8i8_v8i16
    0U,	// SMLSLv16i8_v8i16
    75U,	// SMLSLv2i32_indexed
    0U,	// SMLSLv2i32_v2i64
    75U,	// SMLSLv4i16_indexed
    0U,	// SMLSLv4i16_v4i32
    75U,	// SMLSLv4i32_indexed
    0U,	// SMLSLv4i32_v2i64
    75U,	// SMLSLv8i16_indexed
    0U,	// SMLSLv8i16_v4i32
    0U,	// SMLSLv8i8_v8i16
    0U,	// SMOVvi16to32
    0U,	// SMOVvi16to64
    0U,	// SMOVvi32to64
    0U,	// SMOVvi8to32
    0U,	// SMOVvi8to64
    4U,	// SMSUBLrrr
    0U,	// SMULHrr
    0U,	// SMULLv16i8_v8i16
    13U,	// SMULLv2i32_indexed
    0U,	// SMULLv2i32_v2i64
    13U,	// SMULLv4i16_indexed
    0U,	// SMULLv4i16_v4i32
    13U,	// SMULLv4i32_indexed
    0U,	// SMULLv4i32_v2i64
    13U,	// SMULLv8i16_indexed
    0U,	// SMULLv8i16_v4i32
    0U,	// SMULLv8i8_v8i16
    0U,	// SQABSv16i8
    0U,	// SQABSv1i16
    0U,	// SQABSv1i32
    0U,	// SQABSv1i64
    0U,	// SQABSv1i8
    0U,	// SQABSv2i32
    0U,	// SQABSv2i64
    0U,	// SQABSv4i16
    0U,	// SQABSv4i32
    0U,	// SQABSv8i16
    0U,	// SQABSv8i8
    0U,	// SQADDv16i8
    0U,	// SQADDv1i16
    0U,	// SQADDv1i32
    0U,	// SQADDv1i64
    0U,	// SQADDv1i8
    0U,	// SQADDv2i32
    0U,	// SQADDv2i64
    0U,	// SQADDv4i16
    0U,	// SQADDv4i32
    0U,	// SQADDv8i16
    0U,	// SQADDv8i8
    0U,	// SQDMLALi16
    0U,	// SQDMLALi32
    75U,	// SQDMLALv1i32_indexed
    75U,	// SQDMLALv1i64_indexed
    75U,	// SQDMLALv2i32_indexed
    0U,	// SQDMLALv2i32_v2i64
    75U,	// SQDMLALv4i16_indexed
    0U,	// SQDMLALv4i16_v4i32
    75U,	// SQDMLALv4i32_indexed
    0U,	// SQDMLALv4i32_v2i64
    75U,	// SQDMLALv8i16_indexed
    0U,	// SQDMLALv8i16_v4i32
    0U,	// SQDMLSLi16
    0U,	// SQDMLSLi32
    75U,	// SQDMLSLv1i32_indexed
    75U,	// SQDMLSLv1i64_indexed
    75U,	// SQDMLSLv2i32_indexed
    0U,	// SQDMLSLv2i32_v2i64
    75U,	// SQDMLSLv4i16_indexed
    0U,	// SQDMLSLv4i16_v4i32
    75U,	// SQDMLSLv4i32_indexed
    0U,	// SQDMLSLv4i32_v2i64
    75U,	// SQDMLSLv8i16_indexed
    0U,	// SQDMLSLv8i16_v4i32
    0U,	// SQDMULHv1i16
    13U,	// SQDMULHv1i16_indexed
    0U,	// SQDMULHv1i32
    13U,	// SQDMULHv1i32_indexed
    0U,	// SQDMULHv2i32
    13U,	// SQDMULHv2i32_indexed
    0U,	// SQDMULHv4i16
    13U,	// SQDMULHv4i16_indexed
    0U,	// SQDMULHv4i32
    13U,	// SQDMULHv4i32_indexed
    0U,	// SQDMULHv8i16
    13U,	// SQDMULHv8i16_indexed
    0U,	// SQDMULLi16
    0U,	// SQDMULLi32
    13U,	// SQDMULLv1i32_indexed
    13U,	// SQDMULLv1i64_indexed
    13U,	// SQDMULLv2i32_indexed
    0U,	// SQDMULLv2i32_v2i64
    13U,	// SQDMULLv4i16_indexed
    0U,	// SQDMULLv4i16_v4i32
    13U,	// SQDMULLv4i32_indexed
    0U,	// SQDMULLv4i32_v2i64
    13U,	// SQDMULLv8i16_indexed
    0U,	// SQDMULLv8i16_v4i32
    0U,	// SQNEGv16i8
    0U,	// SQNEGv1i16
    0U,	// SQNEGv1i32
    0U,	// SQNEGv1i64
    0U,	// SQNEGv1i8
    0U,	// SQNEGv2i32
    0U,	// SQNEGv2i64
    0U,	// SQNEGv4i16
    0U,	// SQNEGv4i32
    0U,	// SQNEGv8i16
    0U,	// SQNEGv8i8
    75U,	// SQRDMLAHi16_indexed
    75U,	// SQRDMLAHi32_indexed
    0U,	// SQRDMLAHv1i16
    0U,	// SQRDMLAHv1i32
    0U,	// SQRDMLAHv2i32
    75U,	// SQRDMLAHv2i32_indexed
    0U,	// SQRDMLAHv4i16
    75U,	// SQRDMLAHv4i16_indexed
    0U,	// SQRDMLAHv4i32
    75U,	// SQRDMLAHv4i32_indexed
    0U,	// SQRDMLAHv8i16
    75U,	// SQRDMLAHv8i16_indexed
    75U,	// SQRDMLSHi16_indexed
    75U,	// SQRDMLSHi32_indexed
    0U,	// SQRDMLSHv1i16
    0U,	// SQRDMLSHv1i32
    0U,	// SQRDMLSHv2i32
    75U,	// SQRDMLSHv2i32_indexed
    0U,	// SQRDMLSHv4i16
    75U,	// SQRDMLSHv4i16_indexed
    0U,	// SQRDMLSHv4i32
    75U,	// SQRDMLSHv4i32_indexed
    0U,	// SQRDMLSHv8i16
    75U,	// SQRDMLSHv8i16_indexed
    0U,	// SQRDMULHv1i16
    13U,	// SQRDMULHv1i16_indexed
    0U,	// SQRDMULHv1i32
    13U,	// SQRDMULHv1i32_indexed
    0U,	// SQRDMULHv2i32
    13U,	// SQRDMULHv2i32_indexed
    0U,	// SQRDMULHv4i16
    13U,	// SQRDMULHv4i16_indexed
    0U,	// SQRDMULHv4i32
    13U,	// SQRDMULHv4i32_indexed
    0U,	// SQRDMULHv8i16
    13U,	// SQRDMULHv8i16_indexed
    0U,	// SQRSHLv16i8
    0U,	// SQRSHLv1i16
    0U,	// SQRSHLv1i32
    0U,	// SQRSHLv1i64
    0U,	// SQRSHLv1i8
    0U,	// SQRSHLv2i32
    0U,	// SQRSHLv2i64
    0U,	// SQRSHLv4i16
    0U,	// SQRSHLv4i32
    0U,	// SQRSHLv8i16
    0U,	// SQRSHLv8i8
    0U,	// SQRSHRNb
    0U,	// SQRSHRNh
    0U,	// SQRSHRNs
    0U,	// SQRSHRNv16i8_shift
    0U,	// SQRSHRNv2i32_shift
    0U,	// SQRSHRNv4i16_shift
    0U,	// SQRSHRNv4i32_shift
    0U,	// SQRSHRNv8i16_shift
    0U,	// SQRSHRNv8i8_shift
    0U,	// SQRSHRUNb
    0U,	// SQRSHRUNh
    0U,	// SQRSHRUNs
    0U,	// SQRSHRUNv16i8_shift
    0U,	// SQRSHRUNv2i32_shift
    0U,	// SQRSHRUNv4i16_shift
    0U,	// SQRSHRUNv4i32_shift
    0U,	// SQRSHRUNv8i16_shift
    0U,	// SQRSHRUNv8i8_shift
    0U,	// SQSHLUb
    0U,	// SQSHLUd
    0U,	// SQSHLUh
    0U,	// SQSHLUs
    0U,	// SQSHLUv16i8_shift
    0U,	// SQSHLUv2i32_shift
    0U,	// SQSHLUv2i64_shift
    0U,	// SQSHLUv4i16_shift
    0U,	// SQSHLUv4i32_shift
    0U,	// SQSHLUv8i16_shift
    0U,	// SQSHLUv8i8_shift
    0U,	// SQSHLb
    0U,	// SQSHLd
    0U,	// SQSHLh
    0U,	// SQSHLs
    0U,	// SQSHLv16i8
    0U,	// SQSHLv16i8_shift
    0U,	// SQSHLv1i16
    0U,	// SQSHLv1i32
    0U,	// SQSHLv1i64
    0U,	// SQSHLv1i8
    0U,	// SQSHLv2i32
    0U,	// SQSHLv2i32_shift
    0U,	// SQSHLv2i64
    0U,	// SQSHLv2i64_shift
    0U,	// SQSHLv4i16
    0U,	// SQSHLv4i16_shift
    0U,	// SQSHLv4i32
    0U,	// SQSHLv4i32_shift
    0U,	// SQSHLv8i16
    0U,	// SQSHLv8i16_shift
    0U,	// SQSHLv8i8
    0U,	// SQSHLv8i8_shift
    0U,	// SQSHRNb
    0U,	// SQSHRNh
    0U,	// SQSHRNs
    0U,	// SQSHRNv16i8_shift
    0U,	// SQSHRNv2i32_shift
    0U,	// SQSHRNv4i16_shift
    0U,	// SQSHRNv4i32_shift
    0U,	// SQSHRNv8i16_shift
    0U,	// SQSHRNv8i8_shift
    0U,	// SQSHRUNb
    0U,	// SQSHRUNh
    0U,	// SQSHRUNs
    0U,	// SQSHRUNv16i8_shift
    0U,	// SQSHRUNv2i32_shift
    0U,	// SQSHRUNv4i16_shift
    0U,	// SQSHRUNv4i32_shift
    0U,	// SQSHRUNv8i16_shift
    0U,	// SQSHRUNv8i8_shift
    0U,	// SQSUBv16i8
    0U,	// SQSUBv1i16
    0U,	// SQSUBv1i32
    0U,	// SQSUBv1i64
    0U,	// SQSUBv1i8
    0U,	// SQSUBv2i32
    0U,	// SQSUBv2i64
    0U,	// SQSUBv4i16
    0U,	// SQSUBv4i32
    0U,	// SQSUBv8i16
    0U,	// SQSUBv8i8
    0U,	// SQXTNv16i8
    0U,	// SQXTNv1i16
    0U,	// SQXTNv1i32
    0U,	// SQXTNv1i8
    0U,	// SQXTNv2i32
    0U,	// SQXTNv4i16
    0U,	// SQXTNv4i32
    0U,	// SQXTNv8i16
    0U,	// SQXTNv8i8
    0U,	// SQXTUNv16i8
    0U,	// SQXTUNv1i16
    0U,	// SQXTUNv1i32
    0U,	// SQXTUNv1i8
    0U,	// SQXTUNv2i32
    0U,	// SQXTUNv4i16
    0U,	// SQXTUNv4i32
    0U,	// SQXTUNv8i16
    0U,	// SQXTUNv8i8
    0U,	// SRHADDv16i8
    0U,	// SRHADDv2i32
    0U,	// SRHADDv4i16
    0U,	// SRHADDv4i32
    0U,	// SRHADDv8i16
    0U,	// SRHADDv8i8
    0U,	// SRId
    0U,	// SRIv16i8_shift
    0U,	// SRIv2i32_shift
    0U,	// SRIv2i64_shift
    0U,	// SRIv4i16_shift
    0U,	// SRIv4i32_shift
    0U,	// SRIv8i16_shift
    0U,	// SRIv8i8_shift
    0U,	// SRSHLv16i8
    0U,	// SRSHLv1i64
    0U,	// SRSHLv2i32
    0U,	// SRSHLv2i64
    0U,	// SRSHLv4i16
    0U,	// SRSHLv4i32
    0U,	// SRSHLv8i16
    0U,	// SRSHLv8i8
    0U,	// SRSHRd
    0U,	// SRSHRv16i8_shift
    0U,	// SRSHRv2i32_shift
    0U,	// SRSHRv2i64_shift
    0U,	// SRSHRv4i16_shift
    0U,	// SRSHRv4i32_shift
    0U,	// SRSHRv8i16_shift
    0U,	// SRSHRv8i8_shift
    0U,	// SRSRAd
    0U,	// SRSRAv16i8_shift
    0U,	// SRSRAv2i32_shift
    0U,	// SRSRAv2i64_shift
    0U,	// SRSRAv4i16_shift
    0U,	// SRSRAv4i32_shift
    0U,	// SRSRAv8i16_shift
    0U,	// SRSRAv8i8_shift
    0U,	// SSHLLv16i8_shift
    0U,	// SSHLLv2i32_shift
    0U,	// SSHLLv4i16_shift
    0U,	// SSHLLv4i32_shift
    0U,	// SSHLLv8i16_shift
    0U,	// SSHLLv8i8_shift
    0U,	// SSHLv16i8
    0U,	// SSHLv1i64
    0U,	// SSHLv2i32
    0U,	// SSHLv2i64
    0U,	// SSHLv4i16
    0U,	// SSHLv4i32
    0U,	// SSHLv8i16
    0U,	// SSHLv8i8
    0U,	// SSHRd
    0U,	// SSHRv16i8_shift
    0U,	// SSHRv2i32_shift
    0U,	// SSHRv2i64_shift
    0U,	// SSHRv4i16_shift
    0U,	// SSHRv4i32_shift
    0U,	// SSHRv8i16_shift
    0U,	// SSHRv8i8_shift
    0U,	// SSRAd
    0U,	// SSRAv16i8_shift
    0U,	// SSRAv2i32_shift
    0U,	// SSRAv2i64_shift
    0U,	// SSRAv4i16_shift
    0U,	// SSRAv4i32_shift
    0U,	// SSRAv8i16_shift
    0U,	// SSRAv8i8_shift
    0U,	// SST1B_D
    0U,	// SST1B_D_IMM
    0U,	// SST1B_D_SXTW
    0U,	// SST1B_D_UXTW
    0U,	// SST1B_S_IMM
    0U,	// SST1B_S_SXTW
    0U,	// SST1B_S_UXTW
    0U,	// SST1D
    0U,	// SST1D_IMM
    0U,	// SST1D_SCALED
    0U,	// SST1D_SXTW
    0U,	// SST1D_SXTW_SCALED
    0U,	// SST1D_UXTW
    0U,	// SST1D_UXTW_SCALED
    0U,	// SST1H_D
    0U,	// SST1H_D_IMM
    0U,	// SST1H_D_SCALED
    0U,	// SST1H_D_SXTW
    0U,	// SST1H_D_SXTW_SCALED
    0U,	// SST1H_D_UXTW
    0U,	// SST1H_D_UXTW_SCALED
    0U,	// SST1H_S_IMM
    0U,	// SST1H_S_SXTW
    0U,	// SST1H_S_SXTW_SCALED
    0U,	// SST1H_S_UXTW
    0U,	// SST1H_S_UXTW_SCALED
    0U,	// SST1W_D
    0U,	// SST1W_D_IMM
    0U,	// SST1W_D_SCALED
    0U,	// SST1W_D_SXTW
    0U,	// SST1W_D_SXTW_SCALED
    0U,	// SST1W_D_UXTW
    0U,	// SST1W_D_UXTW_SCALED
    0U,	// SST1W_IMM
    0U,	// SST1W_SXTW
    0U,	// SST1W_SXTW_SCALED
    0U,	// SST1W_UXTW
    0U,	// SST1W_UXTW_SCALED
    0U,	// SSUBLv16i8_v8i16
    0U,	// SSUBLv2i32_v2i64
    0U,	// SSUBLv4i16_v4i32
    0U,	// SSUBLv4i32_v2i64
    0U,	// SSUBLv8i16_v4i32
    0U,	// SSUBLv8i8_v8i16
    0U,	// SSUBWv16i8_v8i16
    0U,	// SSUBWv2i32_v2i64
    0U,	// SSUBWv4i16_v4i32
    0U,	// SSUBWv4i32_v2i64
    0U,	// SSUBWv8i16_v4i32
    0U,	// SSUBWv8i8_v8i16
    0U,	// ST1B
    0U,	// ST1B_D
    1U,	// ST1B_D_IMM
    0U,	// ST1B_H
    1U,	// ST1B_H_IMM
    1U,	// ST1B_IMM
    0U,	// ST1B_S
    1U,	// ST1B_S_IMM
    0U,	// ST1D
    1U,	// ST1D_IMM
    0U,	// ST1Fourv16b
    0U,	// ST1Fourv16b_POST
    0U,	// ST1Fourv1d
    0U,	// ST1Fourv1d_POST
    0U,	// ST1Fourv2d
    0U,	// ST1Fourv2d_POST
    0U,	// ST1Fourv2s
    0U,	// ST1Fourv2s_POST
    0U,	// ST1Fourv4h
    0U,	// ST1Fourv4h_POST
    0U,	// ST1Fourv4s
    0U,	// ST1Fourv4s_POST
    0U,	// ST1Fourv8b
    0U,	// ST1Fourv8b_POST
    0U,	// ST1Fourv8h
    0U,	// ST1Fourv8h_POST
    0U,	// ST1H
    0U,	// ST1H_D
    1U,	// ST1H_D_IMM
    1U,	// ST1H_IMM
    0U,	// ST1H_S
    1U,	// ST1H_S_IMM
    0U,	// ST1Onev16b
    0U,	// ST1Onev16b_POST
    0U,	// ST1Onev1d
    0U,	// ST1Onev1d_POST
    0U,	// ST1Onev2d
    0U,	// ST1Onev2d_POST
    0U,	// ST1Onev2s
    0U,	// ST1Onev2s_POST
    0U,	// ST1Onev4h
    0U,	// ST1Onev4h_POST
    0U,	// ST1Onev4s
    0U,	// ST1Onev4s_POST
    0U,	// ST1Onev8b
    0U,	// ST1Onev8b_POST
    0U,	// ST1Onev8h
    0U,	// ST1Onev8h_POST
    0U,	// ST1Threev16b
    0U,	// ST1Threev16b_POST
    0U,	// ST1Threev1d
    0U,	// ST1Threev1d_POST
    0U,	// ST1Threev2d
    0U,	// ST1Threev2d_POST
    0U,	// ST1Threev2s
    0U,	// ST1Threev2s_POST
    0U,	// ST1Threev4h
    0U,	// ST1Threev4h_POST
    0U,	// ST1Threev4s
    0U,	// ST1Threev4s_POST
    0U,	// ST1Threev8b
    0U,	// ST1Threev8b_POST
    0U,	// ST1Threev8h
    0U,	// ST1Threev8h_POST
    0U,	// ST1Twov16b
    0U,	// ST1Twov16b_POST
    0U,	// ST1Twov1d
    0U,	// ST1Twov1d_POST
    0U,	// ST1Twov2d
    0U,	// ST1Twov2d_POST
    0U,	// ST1Twov2s
    0U,	// ST1Twov2s_POST
    0U,	// ST1Twov4h
    0U,	// ST1Twov4h_POST
    0U,	// ST1Twov4s
    0U,	// ST1Twov4s_POST
    0U,	// ST1Twov8b
    0U,	// ST1Twov8b_POST
    0U,	// ST1Twov8h
    0U,	// ST1Twov8h_POST
    0U,	// ST1W
    0U,	// ST1W_D
    1U,	// ST1W_D_IMM
    1U,	// ST1W_IMM
    0U,	// ST1i16
    0U,	// ST1i16_POST
    0U,	// ST1i32
    0U,	// ST1i32_POST
    0U,	// ST1i64
    0U,	// ST1i64_POST
    0U,	// ST1i8
    0U,	// ST1i8_POST
    0U,	// ST2B
    1U,	// ST2B_IMM
    0U,	// ST2D
    1U,	// ST2D_IMM
    0U,	// ST2H
    1U,	// ST2H_IMM
    0U,	// ST2Twov16b
    0U,	// ST2Twov16b_POST
    0U,	// ST2Twov2d
    0U,	// ST2Twov2d_POST
    0U,	// ST2Twov2s
    0U,	// ST2Twov2s_POST
    0U,	// ST2Twov4h
    0U,	// ST2Twov4h_POST
    0U,	// ST2Twov4s
    0U,	// ST2Twov4s_POST
    0U,	// ST2Twov8b
    0U,	// ST2Twov8b_POST
    0U,	// ST2Twov8h
    0U,	// ST2Twov8h_POST
    0U,	// ST2W
    1U,	// ST2W_IMM
    0U,	// ST2i16
    0U,	// ST2i16_POST
    0U,	// ST2i32
    0U,	// ST2i32_POST
    0U,	// ST2i64
    0U,	// ST2i64_POST
    0U,	// ST2i8
    0U,	// ST2i8_POST
    0U,	// ST3B
    0U,	// ST3B_IMM
    0U,	// ST3D
    0U,	// ST3D_IMM
    0U,	// ST3H
    0U,	// ST3H_IMM
    0U,	// ST3Threev16b
    0U,	// ST3Threev16b_POST
    0U,	// ST3Threev2d
    0U,	// ST3Threev2d_POST
    0U,	// ST3Threev2s
    0U,	// ST3Threev2s_POST
    0U,	// ST3Threev4h
    0U,	// ST3Threev4h_POST
    0U,	// ST3Threev4s
    0U,	// ST3Threev4s_POST
    0U,	// ST3Threev8b
    0U,	// ST3Threev8b_POST
    0U,	// ST3Threev8h
    0U,	// ST3Threev8h_POST
    0U,	// ST3W
    0U,	// ST3W_IMM
    0U,	// ST3i16
    0U,	// ST3i16_POST
    0U,	// ST3i32
    0U,	// ST3i32_POST
    0U,	// ST3i64
    0U,	// ST3i64_POST
    0U,	// ST3i8
    0U,	// ST3i8_POST
    0U,	// ST4B
    1U,	// ST4B_IMM
    0U,	// ST4D
    1U,	// ST4D_IMM
    0U,	// ST4Fourv16b
    0U,	// ST4Fourv16b_POST
    0U,	// ST4Fourv2d
    0U,	// ST4Fourv2d_POST
    0U,	// ST4Fourv2s
    0U,	// ST4Fourv2s_POST
    0U,	// ST4Fourv4h
    0U,	// ST4Fourv4h_POST
    0U,	// ST4Fourv4s
    0U,	// ST4Fourv4s_POST
    0U,	// ST4Fourv8b
    0U,	// ST4Fourv8b_POST
    0U,	// ST4Fourv8h
    0U,	// ST4Fourv8h_POST
    0U,	// ST4H
    1U,	// ST4H_IMM
    0U,	// ST4W
    1U,	// ST4W_IMM
    0U,	// ST4i16
    0U,	// ST4i16_POST
    0U,	// ST4i32
    0U,	// ST4i32_POST
    0U,	// ST4i64
    0U,	// ST4i64_POST
    0U,	// ST4i8
    0U,	// ST4i8_POST
    0U,	// STLLRB
    0U,	// STLLRH
    0U,	// STLLRW
    0U,	// STLLRX
    0U,	// STLRB
    0U,	// STLRH
    0U,	// STLRW
    0U,	// STLRX
    1U,	// STLXPW
    1U,	// STLXPX
    0U,	// STLXRB
    0U,	// STLXRH
    0U,	// STLXRW
    0U,	// STLXRX
    14U,	// STNPDi
    16U,	// STNPQi
    18U,	// STNPSi
    18U,	// STNPWi
    14U,	// STNPXi
    1U,	// STNT1B_ZRI
    0U,	// STNT1B_ZRR
    1U,	// STNT1D_ZRI
    0U,	// STNT1D_ZRR
    1U,	// STNT1H_ZRI
    0U,	// STNT1H_ZRR
    1U,	// STNT1W_ZRI
    0U,	// STNT1W_ZRR
    14U,	// STPDi
    85U,	// STPDpost
    148U,	// STPDpre
    16U,	// STPQi
    87U,	// STPQpost
    150U,	// STPQpre
    18U,	// STPSi
    89U,	// STPSpost
    152U,	// STPSpre
    18U,	// STPWi
    89U,	// STPWpost
    152U,	// STPWpre
    14U,	// STPXi
    85U,	// STPXpost
    148U,	// STPXpre
    0U,	// STRBBpost
    1U,	// STRBBpre
    26U,	// STRBBroW
    28U,	// STRBBroX
    0U,	// STRBBui
    0U,	// STRBpost
    1U,	// STRBpre
    26U,	// STRBroW
    28U,	// STRBroX
    0U,	// STRBui
    0U,	// STRDpost
    1U,	// STRDpre
    30U,	// STRDroW
    32U,	// STRDroX
    0U,	// STRDui
    0U,	// STRHHpost
    1U,	// STRHHpre
    34U,	// STRHHroW
    36U,	// STRHHroX
    0U,	// STRHHui
    0U,	// STRHpost
    1U,	// STRHpre
    34U,	// STRHroW
    36U,	// STRHroX
    0U,	// STRHui
    0U,	// STRQpost
    1U,	// STRQpre
    38U,	// STRQroW
    40U,	// STRQroX
    0U,	// STRQui
    0U,	// STRSpost
    1U,	// STRSpre
    42U,	// STRSroW
    44U,	// STRSroX
    0U,	// STRSui
    0U,	// STRWpost
    1U,	// STRWpre
    42U,	// STRWroW
    44U,	// STRWroX
    0U,	// STRWui
    0U,	// STRXpost
    1U,	// STRXpre
    30U,	// STRXroW
    32U,	// STRXroX
    0U,	// STRXui
    0U,	// STR_PXI
    0U,	// STR_ZXI
    0U,	// STTRBi
    0U,	// STTRHi
    0U,	// STTRWi
    0U,	// STTRXi
    0U,	// STURBBi
    0U,	// STURBi
    0U,	// STURDi
    0U,	// STURHHi
    0U,	// STURHi
    0U,	// STURQi
    0U,	// STURSi
    0U,	// STURWi
    0U,	// STURXi
    1U,	// STXPW
    1U,	// STXPX
    0U,	// STXRB
    0U,	// STXRH
    0U,	// STXRW
    0U,	// STXRX
    0U,	// SUBHNv2i64_v2i32
    0U,	// SUBHNv2i64_v4i32
    0U,	// SUBHNv4i32_v4i16
    0U,	// SUBHNv4i32_v8i16
    0U,	// SUBHNv8i16_v16i8
    0U,	// SUBHNv8i16_v8i8
    0U,	// SUBSWri
    0U,	// SUBSWrr
    0U,	// SUBSWrs
    0U,	// SUBSWrx
    0U,	// SUBSXri
    0U,	// SUBSXrr
    0U,	// SUBSXrs
    0U,	// SUBSXrx
    0U,	// SUBSXrx64
    0U,	// SUBWri
    0U,	// SUBWrr
    0U,	// SUBWrs
    0U,	// SUBWrx
    0U,	// SUBXri
    0U,	// SUBXrr
    0U,	// SUBXrs
    0U,	// SUBXrx
    0U,	// SUBXrx64
    0U,	// SUB_ZI_B
    0U,	// SUB_ZI_D
    0U,	// SUB_ZI_H
    0U,	// SUB_ZI_S
    0U,	// SUB_ZPmZ_B
    0U,	// SUB_ZPmZ_D
    0U,	// SUB_ZPmZ_H
    0U,	// SUB_ZPmZ_S
    0U,	// SUB_ZZZ_B
    0U,	// SUB_ZZZ_D
    0U,	// SUB_ZZZ_H
    0U,	// SUB_ZZZ_S
    0U,	// SUBv16i8
    0U,	// SUBv1i64
    0U,	// SUBv2i32
    0U,	// SUBv2i64
    0U,	// SUBv4i16
    0U,	// SUBv4i32
    0U,	// SUBv8i16
    0U,	// SUBv8i8
    0U,	// SUQADDv16i8
    0U,	// SUQADDv1i16
    0U,	// SUQADDv1i32
    0U,	// SUQADDv1i64
    0U,	// SUQADDv1i8
    0U,	// SUQADDv2i32
    0U,	// SUQADDv2i64
    0U,	// SUQADDv4i16
    0U,	// SUQADDv4i32
    0U,	// SUQADDv8i16
    0U,	// SUQADDv8i8
    0U,	// SVC
    0U,	// SWPAB
    0U,	// SWPAH
    0U,	// SWPALB
    0U,	// SWPALH
    0U,	// SWPALW
    0U,	// SWPALX
    0U,	// SWPAW
    0U,	// SWPAX
    0U,	// SWPB
    0U,	// SWPH
    0U,	// SWPLB
    0U,	// SWPLH
    0U,	// SWPLW
    0U,	// SWPLX
    0U,	// SWPW
    0U,	// SWPX
    0U,	// SYSLxt
    0U,	// SYSxt
    0U,	// TBLv16i8Four
    0U,	// TBLv16i8One
    0U,	// TBLv16i8Three
    0U,	// TBLv16i8Two
    0U,	// TBLv8i8Four
    0U,	// TBLv8i8One
    0U,	// TBLv8i8Three
    0U,	// TBLv8i8Two
    0U,	// TBNZW
    0U,	// TBNZX
    0U,	// TBXv16i8Four
    0U,	// TBXv16i8One
    0U,	// TBXv16i8Three
    0U,	// TBXv16i8Two
    0U,	// TBXv8i8Four
    0U,	// TBXv8i8One
    0U,	// TBXv8i8Three
    0U,	// TBXv8i8Two
    0U,	// TBZW
    0U,	// TBZX
    0U,	// TCRETURNdi
    0U,	// TCRETURNri
    0U,	// TLSDESCCALL
    0U,	// TLSDESC_CALLSEQ
    0U,	// TRN1v16i8
    0U,	// TRN1v2i32
    0U,	// TRN1v2i64
    0U,	// TRN1v4i16
    0U,	// TRN1v4i32
    0U,	// TRN1v8i16
    0U,	// TRN1v8i8
    0U,	// TRN2v16i8
    0U,	// TRN2v2i32
    0U,	// TRN2v2i64
    0U,	// TRN2v4i16
    0U,	// TRN2v4i32
    0U,	// TRN2v8i16
    0U,	// TRN2v8i8
    0U,	// UABALv16i8_v8i16
    0U,	// UABALv2i32_v2i64
    0U,	// UABALv4i16_v4i32
    0U,	// UABALv4i32_v2i64
    0U,	// UABALv8i16_v4i32
    0U,	// UABALv8i8_v8i16
    0U,	// UABAv16i8
    0U,	// UABAv2i32
    0U,	// UABAv4i16
    0U,	// UABAv4i32
    0U,	// UABAv8i16
    0U,	// UABAv8i8
    0U,	// UABDLv16i8_v8i16
    0U,	// UABDLv2i32_v2i64
    0U,	// UABDLv4i16_v4i32
    0U,	// UABDLv4i32_v2i64
    0U,	// UABDLv8i16_v4i32
    0U,	// UABDLv8i8_v8i16
    0U,	// UABDv16i8
    0U,	// UABDv2i32
    0U,	// UABDv4i16
    0U,	// UABDv4i32
    0U,	// UABDv8i16
    0U,	// UABDv8i8
    0U,	// UADALPv16i8_v8i16
    0U,	// UADALPv2i32_v1i64
    0U,	// UADALPv4i16_v2i32
    0U,	// UADALPv4i32_v2i64
    0U,	// UADALPv8i16_v4i32
    0U,	// UADALPv8i8_v4i16
    0U,	// UADDLPv16i8_v8i16
    0U,	// UADDLPv2i32_v1i64
    0U,	// UADDLPv4i16_v2i32
    0U,	// UADDLPv4i32_v2i64
    0U,	// UADDLPv8i16_v4i32
    0U,	// UADDLPv8i8_v4i16
    0U,	// UADDLVv16i8v
    0U,	// UADDLVv4i16v
    0U,	// UADDLVv4i32v
    0U,	// UADDLVv8i16v
    0U,	// UADDLVv8i8v
    0U,	// UADDLv16i8_v8i16
    0U,	// UADDLv2i32_v2i64
    0U,	// UADDLv4i16_v4i32
    0U,	// UADDLv4i32_v2i64
    0U,	// UADDLv8i16_v4i32
    0U,	// UADDLv8i8_v8i16
    0U,	// UADDWv16i8_v8i16
    0U,	// UADDWv2i32_v2i64
    0U,	// UADDWv4i16_v4i32
    0U,	// UADDWv4i32_v2i64
    0U,	// UADDWv8i16_v4i32
    0U,	// UADDWv8i8_v8i16
    4U,	// UBFMWri
    4U,	// UBFMXri
    0U,	// UCVTFDHr
    0U,	// UCVTFHDr
    0U,	// UCVTFHSr
    0U,	// UCVTFSHr
    0U,	// UCVTFSWDri
    0U,	// UCVTFSWHri
    0U,	// UCVTFSWSri
    0U,	// UCVTFSXDri
    0U,	// UCVTFSXHri
    0U,	// UCVTFSXSri
    0U,	// UCVTFUWDri
    0U,	// UCVTFUWHri
    0U,	// UCVTFUWSri
    0U,	// UCVTFUXDri
    0U,	// UCVTFUXHri
    0U,	// UCVTFUXSri
    0U,	// UCVTFd
    0U,	// UCVTFh
    0U,	// UCVTFs
    0U,	// UCVTFv1i16
    0U,	// UCVTFv1i32
    0U,	// UCVTFv1i64
    0U,	// UCVTFv2f32
    0U,	// UCVTFv2f64
    0U,	// UCVTFv2i32_shift
    0U,	// UCVTFv2i64_shift
    0U,	// UCVTFv4f16
    0U,	// UCVTFv4f32
    0U,	// UCVTFv4i16_shift
    0U,	// UCVTFv4i32_shift
    0U,	// UCVTFv8f16
    0U,	// UCVTFv8i16_shift
    0U,	// UDIVWr
    0U,	// UDIVXr
    1U,	// UDOTlanev16i8
    1U,	// UDOTlanev8i8
    0U,	// UDOTv16i8
    0U,	// UDOTv8i8
    0U,	// UHADDv16i8
    0U,	// UHADDv2i32
    0U,	// UHADDv4i16
    0U,	// UHADDv4i32
    0U,	// UHADDv8i16
    0U,	// UHADDv8i8
    0U,	// UHSUBv16i8
    0U,	// UHSUBv2i32
    0U,	// UHSUBv4i16
    0U,	// UHSUBv4i32
    0U,	// UHSUBv8i16
    0U,	// UHSUBv8i8
    4U,	// UMADDLrrr
    0U,	// UMAXPv16i8
    0U,	// UMAXPv2i32
    0U,	// UMAXPv4i16
    0U,	// UMAXPv4i32
    0U,	// UMAXPv8i16
    0U,	// UMAXPv8i8
    0U,	// UMAXVv16i8v
    0U,	// UMAXVv4i16v
    0U,	// UMAXVv4i32v
    0U,	// UMAXVv8i16v
    0U,	// UMAXVv8i8v
    0U,	// UMAXv16i8
    0U,	// UMAXv2i32
    0U,	// UMAXv4i16
    0U,	// UMAXv4i32
    0U,	// UMAXv8i16
    0U,	// UMAXv8i8
    0U,	// UMINPv16i8
    0U,	// UMINPv2i32
    0U,	// UMINPv4i16
    0U,	// UMINPv4i32
    0U,	// UMINPv8i16
    0U,	// UMINPv8i8
    0U,	// UMINVv16i8v
    0U,	// UMINVv4i16v
    0U,	// UMINVv4i32v
    0U,	// UMINVv8i16v
    0U,	// UMINVv8i8v
    0U,	// UMINv16i8
    0U,	// UMINv2i32
    0U,	// UMINv4i16
    0U,	// UMINv4i32
    0U,	// UMINv8i16
    0U,	// UMINv8i8
    0U,	// UMLALv16i8_v8i16
    75U,	// UMLALv2i32_indexed
    0U,	// UMLALv2i32_v2i64
    75U,	// UMLALv4i16_indexed
    0U,	// UMLALv4i16_v4i32
    75U,	// UMLALv4i32_indexed
    0U,	// UMLALv4i32_v2i64
    75U,	// UMLALv8i16_indexed
    0U,	// UMLALv8i16_v4i32
    0U,	// UMLALv8i8_v8i16
    0U,	// UMLSLv16i8_v8i16
    75U,	// UMLSLv2i32_indexed
    0U,	// UMLSLv2i32_v2i64
    75U,	// UMLSLv4i16_indexed
    0U,	// UMLSLv4i16_v4i32
    75U,	// UMLSLv4i32_indexed
    0U,	// UMLSLv4i32_v2i64
    75U,	// UMLSLv8i16_indexed
    0U,	// UMLSLv8i16_v4i32
    0U,	// UMLSLv8i8_v8i16
    0U,	// UMOVvi16
    0U,	// UMOVvi32
    0U,	// UMOVvi64
    0U,	// UMOVvi8
    4U,	// UMSUBLrrr
    0U,	// UMULHrr
    0U,	// UMULLv16i8_v8i16
    13U,	// UMULLv2i32_indexed
    0U,	// UMULLv2i32_v2i64
    13U,	// UMULLv4i16_indexed
    0U,	// UMULLv4i16_v4i32
    13U,	// UMULLv4i32_indexed
    0U,	// UMULLv4i32_v2i64
    13U,	// UMULLv8i16_indexed
    0U,	// UMULLv8i16_v4i32
    0U,	// UMULLv8i8_v8i16
    0U,	// UQADDv16i8
    0U,	// UQADDv1i16
    0U,	// UQADDv1i32
    0U,	// UQADDv1i64
    0U,	// UQADDv1i8
    0U,	// UQADDv2i32
    0U,	// UQADDv2i64
    0U,	// UQADDv4i16
    0U,	// UQADDv4i32
    0U,	// UQADDv8i16
    0U,	// UQADDv8i8
    0U,	// UQRSHLv16i8
    0U,	// UQRSHLv1i16
    0U,	// UQRSHLv1i32
    0U,	// UQRSHLv1i64
    0U,	// UQRSHLv1i8
    0U,	// UQRSHLv2i32
    0U,	// UQRSHLv2i64
    0U,	// UQRSHLv4i16
    0U,	// UQRSHLv4i32
    0U,	// UQRSHLv8i16
    0U,	// UQRSHLv8i8
    0U,	// UQRSHRNb
    0U,	// UQRSHRNh
    0U,	// UQRSHRNs
    0U,	// UQRSHRNv16i8_shift
    0U,	// UQRSHRNv2i32_shift
    0U,	// UQRSHRNv4i16_shift
    0U,	// UQRSHRNv4i32_shift
    0U,	// UQRSHRNv8i16_shift
    0U,	// UQRSHRNv8i8_shift
    0U,	// UQSHLb
    0U,	// UQSHLd
    0U,	// UQSHLh
    0U,	// UQSHLs
    0U,	// UQSHLv16i8
    0U,	// UQSHLv16i8_shift
    0U,	// UQSHLv1i16
    0U,	// UQSHLv1i32
    0U,	// UQSHLv1i64
    0U,	// UQSHLv1i8
    0U,	// UQSHLv2i32
    0U,	// UQSHLv2i32_shift
    0U,	// UQSHLv2i64
    0U,	// UQSHLv2i64_shift
    0U,	// UQSHLv4i16
    0U,	// UQSHLv4i16_shift
    0U,	// UQSHLv4i32
    0U,	// UQSHLv4i32_shift
    0U,	// UQSHLv8i16
    0U,	// UQSHLv8i16_shift
    0U,	// UQSHLv8i8
    0U,	// UQSHLv8i8_shift
    0U,	// UQSHRNb
    0U,	// UQSHRNh
    0U,	// UQSHRNs
    0U,	// UQSHRNv16i8_shift
    0U,	// UQSHRNv2i32_shift
    0U,	// UQSHRNv4i16_shift
    0U,	// UQSHRNv4i32_shift
    0U,	// UQSHRNv8i16_shift
    0U,	// UQSHRNv8i8_shift
    0U,	// UQSUBv16i8
    0U,	// UQSUBv1i16
    0U,	// UQSUBv1i32
    0U,	// UQSUBv1i64
    0U,	// UQSUBv1i8
    0U,	// UQSUBv2i32
    0U,	// UQSUBv2i64
    0U,	// UQSUBv4i16
    0U,	// UQSUBv4i32
    0U,	// UQSUBv8i16
    0U,	// UQSUBv8i8
    0U,	// UQXTNv16i8
    0U,	// UQXTNv1i16
    0U,	// UQXTNv1i32
    0U,	// UQXTNv1i8
    0U,	// UQXTNv2i32
    0U,	// UQXTNv4i16
    0U,	// UQXTNv4i32
    0U,	// UQXTNv8i16
    0U,	// UQXTNv8i8
    0U,	// URECPEv2i32
    0U,	// URECPEv4i32
    0U,	// URHADDv16i8
    0U,	// URHADDv2i32
    0U,	// URHADDv4i16
    0U,	// URHADDv4i32
    0U,	// URHADDv8i16
    0U,	// URHADDv8i8
    0U,	// URSHLv16i8
    0U,	// URSHLv1i64
    0U,	// URSHLv2i32
    0U,	// URSHLv2i64
    0U,	// URSHLv4i16
    0U,	// URSHLv4i32
    0U,	// URSHLv8i16
    0U,	// URSHLv8i8
    0U,	// URSHRd
    0U,	// URSHRv16i8_shift
    0U,	// URSHRv2i32_shift
    0U,	// URSHRv2i64_shift
    0U,	// URSHRv4i16_shift
    0U,	// URSHRv4i32_shift
    0U,	// URSHRv8i16_shift
    0U,	// URSHRv8i8_shift
    0U,	// URSQRTEv2i32
    0U,	// URSQRTEv4i32
    0U,	// URSRAd
    0U,	// URSRAv16i8_shift
    0U,	// URSRAv2i32_shift
    0U,	// URSRAv2i64_shift
    0U,	// URSRAv4i16_shift
    0U,	// URSRAv4i32_shift
    0U,	// URSRAv8i16_shift
    0U,	// URSRAv8i8_shift
    0U,	// USHLLv16i8_shift
    0U,	// USHLLv2i32_shift
    0U,	// USHLLv4i16_shift
    0U,	// USHLLv4i32_shift
    0U,	// USHLLv8i16_shift
    0U,	// USHLLv8i8_shift
    0U,	// USHLv16i8
    0U,	// USHLv1i64
    0U,	// USHLv2i32
    0U,	// USHLv2i64
    0U,	// USHLv4i16
    0U,	// USHLv4i32
    0U,	// USHLv8i16
    0U,	// USHLv8i8
    0U,	// USHRd
    0U,	// USHRv16i8_shift
    0U,	// USHRv2i32_shift
    0U,	// USHRv2i64_shift
    0U,	// USHRv4i16_shift
    0U,	// USHRv4i32_shift
    0U,	// USHRv8i16_shift
    0U,	// USHRv8i8_shift
    0U,	// USQADDv16i8
    0U,	// USQADDv1i16
    0U,	// USQADDv1i32
    0U,	// USQADDv1i64
    0U,	// USQADDv1i8
    0U,	// USQADDv2i32
    0U,	// USQADDv2i64
    0U,	// USQADDv4i16
    0U,	// USQADDv4i32
    0U,	// USQADDv8i16
    0U,	// USQADDv8i8
    0U,	// USRAd
    0U,	// USRAv16i8_shift
    0U,	// USRAv2i32_shift
    0U,	// USRAv2i64_shift
    0U,	// USRAv4i16_shift
    0U,	// USRAv4i32_shift
    0U,	// USRAv8i16_shift
    0U,	// USRAv8i8_shift
    0U,	// USUBLv16i8_v8i16
    0U,	// USUBLv2i32_v2i64
    0U,	// USUBLv4i16_v4i32
    0U,	// USUBLv4i32_v2i64
    0U,	// USUBLv8i16_v4i32
    0U,	// USUBLv8i8_v8i16
    0U,	// USUBWv16i8_v8i16
    0U,	// USUBWv2i32_v2i64
    0U,	// USUBWv4i16_v4i32
    0U,	// USUBWv4i32_v2i64
    0U,	// USUBWv8i16_v4i32
    0U,	// USUBWv8i8_v8i16
    0U,	// UZP1v16i8
    0U,	// UZP1v2i32
    0U,	// UZP1v2i64
    0U,	// UZP1v4i16
    0U,	// UZP1v4i32
    0U,	// UZP1v8i16
    0U,	// UZP1v8i8
    0U,	// UZP2v16i8
    0U,	// UZP2v2i32
    0U,	// UZP2v2i64
    0U,	// UZP2v4i16
    0U,	// UZP2v4i32
    0U,	// UZP2v8i16
    0U,	// UZP2v8i8
    0U,	// XPACD
    0U,	// XPACI
    0U,	// XPACLRI
    0U,	// XTNv16i8
    0U,	// XTNv2i32
    0U,	// XTNv4i16
    0U,	// XTNv4i32
    0U,	// XTNv8i16
    0U,	// XTNv8i8
    0U,	// ZIP1_PPP_B
    0U,	// ZIP1_PPP_D
    0U,	// ZIP1_PPP_H
    0U,	// ZIP1_PPP_S
    0U,	// ZIP1_ZZZ_B
    0U,	// ZIP1_ZZZ_D
    0U,	// ZIP1_ZZZ_H
    0U,	// ZIP1_ZZZ_S
    0U,	// ZIP1v16i8
    0U,	// ZIP1v2i32
    0U,	// ZIP1v2i64
    0U,	// ZIP1v4i16
    0U,	// ZIP1v4i32
    0U,	// ZIP1v8i16
    0U,	// ZIP1v8i8
    0U,	// ZIP2_PPP_B
    0U,	// ZIP2_PPP_D
    0U,	// ZIP2_PPP_H
    0U,	// ZIP2_PPP_S
    0U,	// ZIP2_ZZZ_B
    0U,	// ZIP2_ZZZ_D
    0U,	// ZIP2_ZZZ_H
    0U,	// ZIP2_ZZZ_S
    0U,	// ZIP2v16i8
    0U,	// ZIP2v2i32
    0U,	// ZIP2v2i64
    0U,	// ZIP2v4i16
    0U,	// ZIP2v4i32
    0U,	// ZIP2v8i16
    0U,	// ZIP2v8i8
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  Bits |= (uint64_t)OpInfo2[MI->getOpcode()] << 48;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 8191)-1;


  // Fragment 0 encoded into 6 bits for 54 unique commands.
  switch ((Bits >> 13) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 0, STI, O);
    break;
  case 2:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPL_XXI, ADDPv2i64p, ADDSWri...
    printOperand(MI, 0, STI, O);
    break;
  case 3:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 4:
    // ADD_ZI_B, ADD_ZPmZ_B, ADD_ZZZ_B, AND_ZPmZ_B, BIC_ZPmZ_B, CPY_ZPmI_B, C...
    printSVERegOp<'b'>(MI, 0, STI, O);
    O << ", ";
    break;
  case 5:
    // ADD_ZI_D, ADD_ZPmZ_D, ADD_ZZZ_D, AND_ZI, AND_ZPmZ_D, AND_ZZZ, BIC_ZPmZ...
    printSVERegOp<'d'>(MI, 0, STI, O);
    O << ", ";
    break;
  case 6:
    // ADD_ZI_H, ADD_ZPmZ_H, ADD_ZZZ_H, AND_ZPmZ_H, BIC_ZPmZ_H, CPY_ZPmI_H, C...
    printSVERegOp<'h'>(MI, 0, STI, O);
    O << ", ";
    break;
  case 7:
    // ADD_ZI_S, ADD_ZPmZ_S, ADD_ZZZ_S, AND_ZPmZ_S, BIC_ZPmZ_S, CPY_ZPmI_S, C...
    printSVERegOp<'s'>(MI, 0, STI, O);
    O << ", ";
    break;
  case 8:
    // B, BL
    printAlignedLabel(MI, 0, STI, O);
    return;
    break;
  case 9:
    // BRK, DCPS1, DCPS2, DCPS3, HLT, HVC, SMC, SVC
    printImmHex(MI, 0, STI, O);
    return;
    break;
  case 10:
    // Bcc
    printCondCode(MI, 0, STI, O);
    O << "\t";
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 11:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    printOperand(MI, 1, STI, O);
    break;
  case 12:
    // CASPALW, CASPAW, CASPLW, CASPW
    printGPRSeqPairsClassOperand<32>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<32>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // CASPALX, CASPAX, CASPLX, CASPX
    printGPRSeqPairsClassOperand<64>(MI, 1, STI, O);
    O << ", ";
    printGPRSeqPairsClassOperand<64>(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // DMB, DSB, ISB
    printBarrierOption(MI, 0, STI, O);
    return;
    break;
  case 15:
    // DUP_ZZI_Q
    printSVERegOp<'q'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<'q'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 16:
    // GLD1B_D_IMM_REAL, GLD1B_D_REAL, GLD1B_D_SXTW_REAL, GLD1B_D_UXTW_REAL, ...
    printTypedVectorList<0,'d'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 17:
    // GLD1B_S_IMM_REAL, GLD1B_S_SXTW_REAL, GLD1B_S_UXTW_REAL, GLD1H_S_IMM_RE...
    printTypedVectorList<0,'s'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 18:
    // HINT
    printImm(MI, 0, STI, O);
    return;
    break;
  case 19:
    // LD1B, LD1B_IMM_REAL, LD1RB_IMM, LD1RQ_B, LD1RQ_B_IMM, LD2B, LD2B_IMM, ...
    printTypedVectorList<0,'b'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 20:
    // LD1B_H, LD1B_H_IMM_REAL, LD1H, LD1H_IMM_REAL, LD1RB_H_IMM, LD1RH_IMM, ...
    printTypedVectorList<0,'h'>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 21:
    // LD1Fourv16b, LD1Onev16b, LD1Rv16b, LD1Threev16b, LD1Twov16b, LD2Rv16b,...
    printTypedVectorList<16, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // LD1Fourv16b_POST, LD1Onev16b_POST, LD1Rv16b_POST, LD1Threev16b_POST, L...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 23:
    // LD1Fourv1d, LD1Onev1d, LD1Rv1d, LD1Threev1d, LD1Twov1d, LD2Rv1d, LD3Rv...
    printTypedVectorList<1, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 24:
    // LD1Fourv1d_POST, LD1Onev1d_POST, LD1Rv1d_POST, LD1Threev1d_POST, LD1Tw...
    printTypedVectorList<1, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 25:
    // LD1Fourv2d, LD1Onev2d, LD1Rv2d, LD1Threev2d, LD1Twov2d, LD2Rv2d, LD2Tw...
    printTypedVectorList<2, 'd'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 26:
    // LD1Fourv2d_POST, LD1Onev2d_POST, LD1Rv2d_POST, LD1Threev2d_POST, LD1Tw...
    printTypedVectorList<2, 'd'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 27:
    // LD1Fourv2s, LD1Onev2s, LD1Rv2s, LD1Threev2s, LD1Twov2s, LD2Rv2s, LD2Tw...
    printTypedVectorList<2, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 28:
    // LD1Fourv2s_POST, LD1Onev2s_POST, LD1Rv2s_POST, LD1Threev2s_POST, LD1Tw...
    printTypedVectorList<2, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 29:
    // LD1Fourv4h, LD1Onev4h, LD1Rv4h, LD1Threev4h, LD1Twov4h, LD2Rv4h, LD2Tw...
    printTypedVectorList<4, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 30:
    // LD1Fourv4h_POST, LD1Onev4h_POST, LD1Rv4h_POST, LD1Threev4h_POST, LD1Tw...
    printTypedVectorList<4, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 31:
    // LD1Fourv4s, LD1Onev4s, LD1Rv4s, LD1Threev4s, LD1Twov4s, LD2Rv4s, LD2Tw...
    printTypedVectorList<4, 's'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 32:
    // LD1Fourv4s_POST, LD1Onev4s_POST, LD1Rv4s_POST, LD1Threev4s_POST, LD1Tw...
    printTypedVectorList<4, 's'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 33:
    // LD1Fourv8b, LD1Onev8b, LD1Rv8b, LD1Threev8b, LD1Twov8b, LD2Rv8b, LD2Tw...
    printTypedVectorList<8, 'b'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 34:
    // LD1Fourv8b_POST, LD1Onev8b_POST, LD1Rv8b_POST, LD1Threev8b_POST, LD1Tw...
    printTypedVectorList<8, 'b'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 35:
    // LD1Fourv8h, LD1Onev8h, LD1Rv8h, LD1Threev8h, LD1Twov8h, LD2Rv8h, LD2Tw...
    printTypedVectorList<8, 'h'>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ']';
    return;
    break;
  case 36:
    // LD1Fourv8h_POST, LD1Onev8h_POST, LD1Rv8h_POST, LD1Threev8h_POST, LD1Tw...
    printTypedVectorList<8, 'h'>(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << "], ";
    break;
  case 37:
    // LD1i16, LD2i16, LD3i16, LD4i16, ST1i16_POST, ST2i16_POST, ST3i16_POST,...
    printTypedVectorList<0, 'h'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 38:
    // LD1i16_POST, LD2i16_POST, LD3i16_POST, LD4i16_POST
    printTypedVectorList<0, 'h'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 39:
    // LD1i32, LD2i32, LD3i32, LD4i32, ST1i32_POST, ST2i32_POST, ST3i32_POST,...
    printTypedVectorList<0, 's'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 40:
    // LD1i32_POST, LD2i32_POST, LD3i32_POST, LD4i32_POST
    printTypedVectorList<0, 's'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 41:
    // LD1i64, LD2i64, LD3i64, LD4i64, ST1i64_POST, ST2i64_POST, ST3i64_POST,...
    printTypedVectorList<0, 'd'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 42:
    // LD1i64_POST, LD2i64_POST, LD3i64_POST, LD4i64_POST
    printTypedVectorList<0, 'd'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 43:
    // LD1i8, LD2i8, LD3i8, LD4i8, ST1i8_POST, ST2i8_POST, ST3i8_POST, ST4i8_...
    printTypedVectorList<0, 'b'>(MI, 1, STI, O);
    printVectorIndex(MI, 2, STI, O);
    O << ", [";
    printOperand(MI, 3, STI, O);
    break;
  case 44:
    // LD1i8_POST, LD2i8_POST, LD3i8_POST, LD4i8_POST
    printTypedVectorList<0, 'b'>(MI, 2, STI, O);
    printVectorIndex(MI, 3, STI, O);
    O << ", [";
    printOperand(MI, 4, STI, O);
    O << "], ";
    break;
  case 45:
    // LDR_PXI, LDR_ZXI, STR_PXI, STR_ZXI
    printSVERegOp<>(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    O << ", mul vl]";
    return;
    break;
  case 46:
    // MSR
    printMSRSystemRegister(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 47:
    // MSRpstateImm1, MSRpstateImm4
    printSystemPStateField(MI, 0, STI, O);
    O << ", ";
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 48:
    // PRFB_D_PZI, PRFB_D_SCALED, PRFB_D_SXTW_SCALED, PRFB_D_UXTW_SCALED, PRF...
    printPrefetchOp<true>(MI, 0, STI, O);
    O << ", ";
    printSVERegOp<>(MI, 1, STI, O);
    O << ", [";
    break;
  case 49:
    // PRFMl, PRFMroW, PRFMroX, PRFMui, PRFUMi
    printPrefetchOp(MI, 0, STI, O);
    break;
  case 50:
    // ST1i16, ST2i16, ST3i16, ST4i16
    printTypedVectorList<0, 'h'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 51:
    // ST1i32, ST2i32, ST3i32, ST4i32
    printTypedVectorList<0, 's'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 52:
    // ST1i64, ST2i64, ST3i64, ST4i64
    printTypedVectorList<0, 'd'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 53:
    // ST1i8, ST2i8, ST3i8, ST4i8
    printTypedVectorList<0, 'b'>(MI, 0, STI, O);
    printVectorIndex(MI, 1, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 1 encoded into 6 bits for 59 unique commands.
  switch ((Bits >> 19) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ADDHNv8i16_v16i8, ADDPv16i8, ADDv16i8, AESDrr, AESErr, AESIM...
    O << ".16b, ";
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPL_XXI, ADDPv2i64p, ADDSWri...
    O << ", ";
    break;
  case 2:
    // ABSv2i32, ADDHNv2i64_v2i32, ADDPv2i32, ADDv2i32, BICv2i32, CLSv2i32, C...
    O << ".2s, ";
    break;
  case 3:
    // ABSv2i64, ADDPv2i64, ADDv2i64, CMEQv2i64, CMEQv2i64rz, CMGEv2i64, CMGE...
    O << ".2d, ";
    break;
  case 4:
    // ABSv4i16, ADDHNv4i32_v4i16, ADDPv4i16, ADDv4i16, BICv4i16, CLSv4i16, C...
    O << ".4h, ";
    break;
  case 5:
    // ABSv4i32, ADDHNv2i64_v4i32, ADDPv4i32, ADDv4i32, BICv4i32, CLSv4i32, C...
    O << ".4s, ";
    break;
  case 6:
    // ABSv8i16, ADDHNv4i32_v8i16, ADDPv8i16, ADDv8i16, BICv8i16, CLSv8i16, C...
    O << ".8h, ";
    break;
  case 7:
    // ABSv8i8, ADDHNv8i16_v8i8, ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8...
    O << ".8b, ";
    break;
  case 8:
    // ADD_ZI_B, ADD_ZZZ_B, DUP_ZZI_B, LSL_ZZI_B, LSR_ZZI_B, SUB_ZI_B, SUB_ZZ...
    printSVERegOp<'b'>(MI, 1, STI, O);
    break;
  case 9:
    // ADD_ZI_D, ADD_ZZZ_D, AND_ZI, AND_ZZZ, BIC_ZZZ, DUP_ZZI_D, EOR_ZI, EOR_...
    printSVERegOp<'d'>(MI, 1, STI, O);
    break;
  case 10:
    // ADD_ZI_H, ADD_ZZZ_H, DUP_ZZI_H, LSL_ZZI_H, LSR_ZZI_H, SUB_ZI_H, SUB_ZZ...
    printSVERegOp<'h'>(MI, 1, STI, O);
    break;
  case 11:
    // ADD_ZI_S, ADD_ZZZ_S, DUP_ZZI_S, LSL_ZZI_S, LSR_ZZI_S, SUB_ZI_S, SUB_ZZ...
    printSVERegOp<'s'>(MI, 1, STI, O);
    break;
  case 12:
    // ADD_ZPmZ_B, ADD_ZPmZ_D, ADD_ZPmZ_H, ADD_ZPmZ_S, AND_ZPmZ_B, AND_ZPmZ_D...
    printSVERegOp<>(MI, 1, STI, O);
    break;
  case 13:
    // AUTDZA, AUTDZB, AUTIZA, AUTIZB, BLR, BLRAAZ, BLRABZ, BR, BRAAZ, BRABZ,...
    return;
    break;
  case 14:
    // CPY_ZPmI_B, CPY_ZPmI_D, CPY_ZPmI_H, CPY_ZPmI_S, FCPY_ZPmI_D, FCPY_ZPmI...
    printSVERegOp<>(MI, 2, STI, O);
    O << "/m, ";
    break;
  case 15:
    // DUPM_ZI
    printLogicalImm<int64_t>(MI, 1, STI, O);
    return;
    break;
  case 16:
    // DUP_ZI_B
    printImm8OptLsl<int8_t>(MI, 1, STI, O);
    return;
    break;
  case 17:
    // DUP_ZI_D
    printImm8OptLsl<int64_t>(MI, 1, STI, O);
    return;
    break;
  case 18:
    // DUP_ZI_H
    printImm8OptLsl<int16_t>(MI, 1, STI, O);
    return;
    break;
  case 19:
    // DUP_ZI_S
    printImm8OptLsl<int32_t>(MI, 1, STI, O);
    return;
    break;
  case 20:
    // DUP_ZR_B, DUP_ZR_D, DUP_ZR_H, DUP_ZR_S, INDEX_II_B, INDEX_II_D, INDEX_...
    printOperand(MI, 1, STI, O);
    break;
  case 21:
    // FCMPDri, FCMPEDri, FCMPEHri, FCMPESri, FCMPHri, FCMPSri
    O << ", #0.0";
    return;
    break;
  case 22:
    // FDUP_ZI_D, FDUP_ZI_H, FDUP_ZI_S
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 23:
    // FMOVXDHighr, INSvi64gpr, INSvi64lane
    O << ".d";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 24:
    // GLD1B_D_IMM_REAL, GLD1B_D_REAL, GLD1B_D_SXTW_REAL, GLD1B_D_UXTW_REAL, ...
    O << "/z, [";
    break;
  case 25:
    // INSvi16gpr, INSvi16lane
    O << ".h";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 26:
    // INSvi32gpr, INSvi32lane
    O << ".s";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 27:
    // INSvi8gpr, INSvi8lane
    O << ".b";
    printVectorIndex(MI, 2, STI, O);
    O << ", ";
    break;
  case 28:
    // LD1Fourv16b_POST, LD1Fourv2d_POST, LD1Fourv4s_POST, LD1Fourv8h_POST, L...
    printPostIncOperand<64>(MI, 3, STI, O);
    return;
    break;
  case 29:
    // LD1Fourv1d_POST, LD1Fourv2s_POST, LD1Fourv4h_POST, LD1Fourv8b_POST, LD...
    printPostIncOperand<32>(MI, 3, STI, O);
    return;
    break;
  case 30:
    // LD1Onev16b_POST, LD1Onev2d_POST, LD1Onev4s_POST, LD1Onev8h_POST, LD1Tw...
    printPostIncOperand<16>(MI, 3, STI, O);
    return;
    break;
  case 31:
    // LD1Onev1d_POST, LD1Onev2s_POST, LD1Onev4h_POST, LD1Onev8b_POST, LD1Rv1...
    printPostIncOperand<8>(MI, 3, STI, O);
    return;
    break;
  case 32:
    // LD1Rv16b_POST, LD1Rv8b_POST
    printPostIncOperand<1>(MI, 3, STI, O);
    return;
    break;
  case 33:
    // LD1Rv2s_POST, LD1Rv4s_POST, LD2Rv4h_POST, LD2Rv8h_POST, LD4Rv16b_POST,...
    printPostIncOperand<4>(MI, 3, STI, O);
    return;
    break;
  case 34:
    // LD1Rv4h_POST, LD1Rv8h_POST, LD2Rv16b_POST, LD2Rv8b_POST
    printPostIncOperand<2>(MI, 3, STI, O);
    return;
    break;
  case 35:
    // LD1Threev16b_POST, LD1Threev2d_POST, LD1Threev4s_POST, LD1Threev8h_POS...
    printPostIncOperand<48>(MI, 3, STI, O);
    return;
    break;
  case 36:
    // LD1Threev1d_POST, LD1Threev2s_POST, LD1Threev4h_POST, LD1Threev8b_POST...
    printPostIncOperand<24>(MI, 3, STI, O);
    return;
    break;
  case 37:
    // LD1i16, LD1i32, LD1i64, LD1i8, LD2i16, LD2i32, LD2i64, LD2i8, LD3i16, ...
    O << ']';
    return;
    break;
  case 38:
    // LD1i16_POST, LD2i8_POST
    printPostIncOperand<2>(MI, 5, STI, O);
    return;
    break;
  case 39:
    // LD1i32_POST, LD2i16_POST, LD4i8_POST
    printPostIncOperand<4>(MI, 5, STI, O);
    return;
    break;
  case 40:
    // LD1i64_POST, LD2i32_POST, LD4i16_POST
    printPostIncOperand<8>(MI, 5, STI, O);
    return;
    break;
  case 41:
    // LD1i8_POST
    printPostIncOperand<1>(MI, 5, STI, O);
    return;
    break;
  case 42:
    // LD2i64_POST, LD4i32_POST
    printPostIncOperand<16>(MI, 5, STI, O);
    return;
    break;
  case 43:
    // LD3Rv16b_POST, LD3Rv8b_POST
    printPostIncOperand<3>(MI, 3, STI, O);
    return;
    break;
  case 44:
    // LD3Rv2s_POST, LD3Rv4s_POST
    printPostIncOperand<12>(MI, 3, STI, O);
    return;
    break;
  case 45:
    // LD3Rv4h_POST, LD3Rv8h_POST
    printPostIncOperand<6>(MI, 3, STI, O);
    return;
    break;
  case 46:
    // LD3i16_POST
    printPostIncOperand<6>(MI, 5, STI, O);
    return;
    break;
  case 47:
    // LD3i32_POST
    printPostIncOperand<12>(MI, 5, STI, O);
    return;
    break;
  case 48:
    // LD3i64_POST
    printPostIncOperand<24>(MI, 5, STI, O);
    return;
    break;
  case 49:
    // LD3i8_POST
    printPostIncOperand<3>(MI, 5, STI, O);
    return;
    break;
  case 50:
    // LD4i64_POST
    printPostIncOperand<32>(MI, 5, STI, O);
    return;
    break;
  case 51:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ", [";
    break;
  case 52:
    // PMULLv1i64, PMULLv2i64
    O << ".1q, ";
    printVRegOperand(MI, 1, STI, O);
    break;
  case 53:
    // PRFB_D_PZI, PRFD_D_PZI, PRFH_D_PZI, PRFW_D_PZI
    printSVERegOp<'d'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 54:
    // PRFB_D_SCALED, PRFB_D_SXTW_SCALED, PRFB_D_UXTW_SCALED, PRFB_PRI, PRFB_...
    printOperand(MI, 2, STI, O);
    O << ", ";
    break;
  case 55:
    // PRFB_S_PZI, PRFD_S_PZI, PRFH_S_PZI, PRFW_S_PZI
    printSVERegOp<'s'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 56:
    // PTRUES_B, PTRUES_D, PTRUES_H, PTRUES_S, PTRUE_B, PTRUE_D, PTRUE_H, PTR...
    printSVEPattern(MI, 1, STI, O);
    return;
    break;
  case 57:
    // SADALPv2i32_v1i64, SADDLPv2i32_v1i64, UADALPv2i32_v1i64, UADDLPv2i32_v...
    O << ".1d, ";
    break;
  case 58:
    // ST1i16_POST, ST1i32_POST, ST1i64_POST, ST1i8_POST, ST2i16_POST, ST2i32...
    O << "], ";
    break;
  }


  // Fragment 2 encoded into 7 bits for 68 unique commands.
  switch ((Bits >> 25) & 127) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ABSv2i32, ABSv2i64, ABSv4i16, ABSv4i32, ABSv8i16, ABSv8i8, A...
    printVRegOperand(MI, 1, STI, O);
    break;
  case 1:
    // ABSv1i64, ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPL_XXI, ADDSWri, ADDSWrs, A...
    printOperand(MI, 1, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, AESDrr, AESErr, ...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 3:
    // ADD_ZI_B, ADD_ZI_D, ADD_ZI_H, ADD_ZI_S, ADD_ZZZ_B, ADD_ZZZ_D, ADD_ZZZ_...
    O << ", ";
    break;
  case 4:
    // ADD_ZPmZ_B, ADD_ZPmZ_D, ADD_ZPmZ_H, ADD_ZPmZ_S, AND_ZPmZ_B, AND_ZPmZ_D...
    O << "/m, ";
    break;
  case 5:
    // ADRP
    printAdrpLabel(MI, 1, STI, O);
    return;
    break;
  case 6:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 2, STI, O);
    break;
  case 7:
    // BICv2i32, BICv4i16, BICv4i32, BICv8i16, MOVKWi, MOVKXi, ORRv2i32, ORRv...
    printImm(MI, 2, STI, O);
    printShifter(MI, 3, STI, O);
    return;
    break;
  case 8:
    // CBNZW, CBNZX, CBZW, CBZX, LDRDl, LDRQl, LDRSWl, LDRSl, LDRWl, LDRXl, P...
    printAlignedLabel(MI, 1, STI, O);
    return;
    break;
  case 9:
    // CPY_ZPmI_B
    printImm8OptLsl<int8_t>(MI, 3, STI, O);
    return;
    break;
  case 10:
    // CPY_ZPmI_D
    printImm8OptLsl<int64_t>(MI, 3, STI, O);
    return;
    break;
  case 11:
    // CPY_ZPmI_H
    printImm8OptLsl<int16_t>(MI, 3, STI, O);
    return;
    break;
  case 12:
    // CPY_ZPmI_S
    printImm8OptLsl<int32_t>(MI, 3, STI, O);
    return;
    break;
  case 13:
    // CPY_ZPzI_B, CPY_ZPzI_D, CPY_ZPzI_H, CPY_ZPzI_S
    O << "/z, ";
    break;
  case 14:
    // DUP_ZR_B, DUP_ZR_D, DUP_ZR_H, DUP_ZR_S
    return;
    break;
  case 15:
    // DUP_ZZI_B, DUP_ZZI_D, DUP_ZZI_H, DUP_ZZI_S
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 16:
    // FCPY_ZPmI_D, FCPY_ZPmI_H, FCPY_ZPmI_S
    printFPImmOperand(MI, 3, STI, O);
    return;
    break;
  case 17:
    // FMOVDi, FMOVHi, FMOVSi, FMOVv2f32_ns, FMOVv2f64_ns, FMOVv4f16_ns, FMOV...
    printFPImmOperand(MI, 1, STI, O);
    return;
    break;
  case 18:
    // GLD1B_D_IMM_REAL, GLD1D_IMM_REAL, GLD1H_D_IMM_REAL, GLD1SB_D_IMM_REAL,...
    printSVERegOp<'d'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 19:
    // GLD1B_S_IMM_REAL, GLD1H_S_IMM_REAL, GLD1SB_S_IMM_REAL, GLD1SH_S_IMM_RE...
    printSVERegOp<'s'>(MI, 2, STI, O);
    O << ", ";
    break;
  case 20:
    // INSvi16gpr, INSvi32gpr, INSvi64gpr, INSvi8gpr, PRFB_D_PZI, PRFB_PRI, P...
    printOperand(MI, 3, STI, O);
    break;
  case 21:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVRegOperand(MI, 3, STI, O);
    break;
  case 22:
    // LDADDAB, LDADDAH, LDADDALB, LDADDALH, LDADDALW, LDADDALX, LDADDAW, LDA...
    printOperand(MI, 0, STI, O);
    O << ", [";
    printOperand(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // MOVID, MOVIv2d_ns
    printSIMDType10Operand(MI, 1, STI, O);
    return;
    break;
  case 24:
    // MOVIv16b_ns, MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl...
    printImm(MI, 1, STI, O);
    break;
  case 25:
    // MRS
    printMRSSystemRegister(MI, 1, STI, O);
    return;
    break;
  case 26:
    // PMULLv1i64
    O << ".1d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".1d";
    return;
    break;
  case 27:
    // PMULLv2i64
    O << ".2d, ";
    printVRegOperand(MI, 2, STI, O);
    O << ".2d";
    return;
    break;
  case 28:
    // PRFB_D_SCALED
    printRegWithShiftExtend<false, 8, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 29:
    // PRFB_D_SXTW_SCALED
    printRegWithShiftExtend<true, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 30:
    // PRFB_D_UXTW_SCALED
    printRegWithShiftExtend<false, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 31:
    // PRFB_PRR
    printRegWithShiftExtend<false, 8, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 32:
    // PRFB_S_SXTW_SCALED
    printRegWithShiftExtend<true, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 33:
    // PRFB_S_UXTW_SCALED
    printRegWithShiftExtend<false, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 34:
    // PRFD_D_PZI, PRFD_S_PZI
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 35:
    // PRFD_D_SCALED
    printRegWithShiftExtend<false, 64, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 36:
    // PRFD_D_SXTW_SCALED
    printRegWithShiftExtend<true, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 37:
    // PRFD_D_UXTW_SCALED
    printRegWithShiftExtend<false, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 38:
    // PRFD_PRR
    printRegWithShiftExtend<false, 64, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 39:
    // PRFD_S_SXTW_SCALED
    printRegWithShiftExtend<true, 64, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 40:
    // PRFD_S_UXTW_SCALED
    printRegWithShiftExtend<false, 64, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 41:
    // PRFH_D_PZI, PRFH_S_PZI
    printImmScale<2>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 42:
    // PRFH_D_SCALED
    printRegWithShiftExtend<false, 16, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 43:
    // PRFH_D_SXTW_SCALED
    printRegWithShiftExtend<true, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 44:
    // PRFH_D_UXTW_SCALED
    printRegWithShiftExtend<false, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 45:
    // PRFH_PRR
    printRegWithShiftExtend<false, 16, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 46:
    // PRFH_S_SXTW_SCALED
    printRegWithShiftExtend<true, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 47:
    // PRFH_S_UXTW_SCALED
    printRegWithShiftExtend<false, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 48:
    // PRFS_PRR
    printRegWithShiftExtend<false, 32, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 49:
    // PRFW_D_PZI, PRFW_S_PZI
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 50:
    // PRFW_D_SCALED
    printRegWithShiftExtend<false, 32, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 51:
    // PRFW_D_SXTW_SCALED
    printRegWithShiftExtend<true, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 52:
    // PRFW_D_UXTW_SCALED
    printRegWithShiftExtend<false, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 53:
    // PRFW_S_SXTW_SCALED
    printRegWithShiftExtend<true, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 54:
    // PRFW_S_UXTW_SCALED
    printRegWithShiftExtend<false, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 55:
    // ST1i16_POST, ST2i8_POST
    printPostIncOperand<2>(MI, 4, STI, O);
    return;
    break;
  case 56:
    // ST1i32_POST, ST2i16_POST, ST4i8_POST
    printPostIncOperand<4>(MI, 4, STI, O);
    return;
    break;
  case 57:
    // ST1i64_POST, ST2i32_POST, ST4i16_POST
    printPostIncOperand<8>(MI, 4, STI, O);
    return;
    break;
  case 58:
    // ST1i8_POST
    printPostIncOperand<1>(MI, 4, STI, O);
    return;
    break;
  case 59:
    // ST2i64_POST, ST4i32_POST
    printPostIncOperand<16>(MI, 4, STI, O);
    return;
    break;
  case 60:
    // ST3i16_POST
    printPostIncOperand<6>(MI, 4, STI, O);
    return;
    break;
  case 61:
    // ST3i32_POST
    printPostIncOperand<12>(MI, 4, STI, O);
    return;
    break;
  case 62:
    // ST3i64_POST
    printPostIncOperand<24>(MI, 4, STI, O);
    return;
    break;
  case 63:
    // ST3i8_POST
    printPostIncOperand<3>(MI, 4, STI, O);
    return;
    break;
  case 64:
    // ST4i64_POST
    printPostIncOperand<32>(MI, 4, STI, O);
    return;
    break;
  case 65:
    // SYSxt
    printSysCROperand(MI, 1, STI, O);
    O << ", ";
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printOperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 66:
    // TBLv16i8Four, TBLv16i8One, TBLv16i8Three, TBLv16i8Two, TBLv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 1, STI, O);
    O << ", ";
    printVRegOperand(MI, 2, STI, O);
    break;
  case 67:
    // TBXv16i8Four, TBXv16i8One, TBXv16i8Three, TBXv16i8Two, TBXv8i8Four, TB...
    printTypedVectorList<16, 'b'>(MI, 2, STI, O);
    O << ", ";
    printVRegOperand(MI, 3, STI, O);
    break;
  }


  // Fragment 3 encoded into 6 bits for 64 unique commands.
  switch ((Bits >> 32) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ABSv16i8, ADDVv16i8v, AESDrr, AESErr, AESIMCrr, AESMCrr, CLSv16i8, CLZ...
    O << ".16b";
    return;
    break;
  case 1:
    // ABSv1i64, ADR, AUTDA, AUTDB, AUTIA, AUTIB, BLRAA, BLRAB, BRAA, BRAB, C...
    return;
    break;
  case 2:
    // ABSv2i32, CLSv2i32, CLZv2i32, FABSv2f32, FADDPv2i32p, FCVTASv2f32, FCV...
    O << ".2s";
    return;
    break;
  case 3:
    // ABSv2i64, ADDPv2i64p, FABSv2f64, FADDPv2i64p, FCVTASv2f64, FCVTAUv2f64...
    O << ".2d";
    return;
    break;
  case 4:
    // ABSv4i16, ADDVv4i16v, CLSv4i16, CLZv4i16, FABSv4f16, FCVTASv4f16, FCVT...
    O << ".4h";
    return;
    break;
  case 5:
    // ABSv4i32, ADDVv4i32v, CLSv4i32, CLZv4i32, FABSv4f32, FCVTASv4f32, FCVT...
    O << ".4s";
    return;
    break;
  case 6:
    // ABSv8i16, ADDVv8i16v, CLSv8i16, CLZv8i16, FABSv8f16, FCVTASv8f16, FCVT...
    O << ".8h";
    return;
    break;
  case 7:
    // ABSv8i8, ADDVv8i8v, CLSv8i8, CLZv8i8, CNTv8i8, NEGv8i8, NOTv8i8, RBITv...
    O << ".8b";
    return;
    break;
  case 8:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPL_XXI, ADDSWri, ADDSWrs, ADDSWrx, AD...
    O << ", ";
    break;
  case 9:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d, ";
    break;
  case 10:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s, ";
    break;
  case 11:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h, ";
    break;
  case 12:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BICv16i8, BIFv16i8, BITv16i8, BSLv16i8,...
    O << ".16b, ";
    break;
  case 13:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s, ";
    break;
  case 14:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h, ";
    break;
  case 15:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b, ";
    break;
  case 16:
    // ADD_ZI_B, SUB_ZI_B
    printImm8OptLsl<uint8_t>(MI, 2, STI, O);
    return;
    break;
  case 17:
    // ADD_ZI_D, SUB_ZI_D
    printImm8OptLsl<uint64_t>(MI, 2, STI, O);
    return;
    break;
  case 18:
    // ADD_ZI_H, SUB_ZI_H
    printImm8OptLsl<uint16_t>(MI, 2, STI, O);
    return;
    break;
  case 19:
    // ADD_ZI_S, SUB_ZI_S
    printImm8OptLsl<uint32_t>(MI, 2, STI, O);
    return;
    break;
  case 20:
    // ADD_ZPmZ_B, ADD_ZZZ_B, AND_ZPmZ_B, BIC_ZPmZ_B, EOR_ZPmZ_B, LSL_ZPmZ_B,...
    printSVERegOp<'b'>(MI, 2, STI, O);
    break;
  case 21:
    // ADD_ZPmZ_D, ADD_ZZZ_D, AND_ZPmZ_D, AND_ZZZ, BIC_ZPmZ_D, BIC_ZZZ, EOR_Z...
    printSVERegOp<'d'>(MI, 2, STI, O);
    break;
  case 22:
    // ADD_ZPmZ_H, ADD_ZZZ_H, AND_ZPmZ_H, BIC_ZPmZ_H, EOR_ZPmZ_H, LSL_ZPmZ_H,...
    printSVERegOp<'h'>(MI, 2, STI, O);
    break;
  case 23:
    // ADD_ZPmZ_S, ADD_ZZZ_S, AND_ZPmZ_S, BIC_ZPmZ_S, EOR_ZPmZ_S, LSL_ZPmZ_S,...
    printSVERegOp<'s'>(MI, 2, STI, O);
    break;
  case 24:
    // AND_ZI, EOR_ZI, ORR_ZI
    printLogicalImm<int64_t>(MI, 2, STI, O);
    return;
    break;
  case 25:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ", [";
    break;
  case 26:
    // CMEQv16i8rz, CMGEv16i8rz, CMGTv16i8rz, CMLEv16i8rz, CMLTv16i8rz
    O << ".16b, #0";
    return;
    break;
  case 27:
    // CMEQv1i64rz, CMGEv1i64rz, CMGTv1i64rz, CMLEv1i64rz, CMLTv1i64rz
    O << ", #0";
    return;
    break;
  case 28:
    // CMEQv2i32rz, CMGEv2i32rz, CMGTv2i32rz, CMLEv2i32rz, CMLTv2i32rz
    O << ".2s, #0";
    return;
    break;
  case 29:
    // CMEQv2i64rz, CMGEv2i64rz, CMGTv2i64rz, CMLEv2i64rz, CMLTv2i64rz
    O << ".2d, #0";
    return;
    break;
  case 30:
    // CMEQv4i16rz, CMGEv4i16rz, CMGTv4i16rz, CMLEv4i16rz, CMLTv4i16rz
    O << ".4h, #0";
    return;
    break;
  case 31:
    // CMEQv4i32rz, CMGEv4i32rz, CMGTv4i32rz, CMLEv4i32rz, CMLTv4i32rz
    O << ".4s, #0";
    return;
    break;
  case 32:
    // CMEQv8i16rz, CMGEv8i16rz, CMGTv8i16rz, CMLEv8i16rz, CMLTv8i16rz
    O << ".8h, #0";
    return;
    break;
  case 33:
    // CMEQv8i8rz, CMGEv8i8rz, CMGTv8i8rz, CMLEv8i8rz, CMLTv8i8rz
    O << ".8b, #0";
    return;
    break;
  case 34:
    // CPY_ZPzI_B
    printImm8OptLsl<int8_t>(MI, 2, STI, O);
    return;
    break;
  case 35:
    // CPY_ZPzI_D
    printImm8OptLsl<int64_t>(MI, 2, STI, O);
    return;
    break;
  case 36:
    // CPY_ZPzI_H
    printImm8OptLsl<int16_t>(MI, 2, STI, O);
    return;
    break;
  case 37:
    // CPY_ZPzI_S
    printImm8OptLsl<int32_t>(MI, 2, STI, O);
    return;
    break;
  case 38:
    // CPYi16, DUPv4i16lane, DUPv8i16lane, INSvi16lane, SMOVvi16to32, SMOVvi1...
    O << ".h";
    break;
  case 39:
    // CPYi32, DUPv2i32lane, DUPv4i32lane, INSvi32lane, SMOVvi32to64, UMOVvi3...
    O << ".s";
    break;
  case 40:
    // CPYi64, DUPv2i64lane, FMOVDXHighr, INSvi64lane, UMOVvi64
    O << ".d";
    break;
  case 41:
    // CPYi8, DUPv16i8lane, DUPv8i8lane, INSvi8lane, SMOVvi8to32, SMOVvi8to64...
    O << ".b";
    break;
  case 42:
    // FADDPv2i16p, FMAXNMPv2i16p, FMAXPv2i16p, FMINNMPv2i16p, FMINPv2i16p
    O << ".2h";
    return;
    break;
  case 43:
    // FCMEQv1i16rz, FCMEQv1i32rz, FCMEQv1i64rz, FCMGEv1i16rz, FCMGEv1i32rz, ...
    O << ", #0.0";
    return;
    break;
  case 44:
    // FCMEQv2i32rz, FCMGEv2i32rz, FCMGTv2i32rz, FCMLEv2i32rz, FCMLTv2i32rz
    O << ".2s, #0.0";
    return;
    break;
  case 45:
    // FCMEQv2i64rz, FCMGEv2i64rz, FCMGTv2i64rz, FCMLEv2i64rz, FCMLTv2i64rz
    O << ".2d, #0.0";
    return;
    break;
  case 46:
    // FCMEQv4i16rz, FCMGEv4i16rz, FCMGTv4i16rz, FCMLEv4i16rz, FCMLTv4i16rz
    O << ".4h, #0.0";
    return;
    break;
  case 47:
    // FCMEQv4i32rz, FCMGEv4i32rz, FCMGTv4i32rz, FCMLEv4i32rz, FCMLTv4i32rz
    O << ".4s, #0.0";
    return;
    break;
  case 48:
    // FCMEQv8i16rz, FCMGEv8i16rz, FCMGTv8i16rz, FCMLEv8i16rz, FCMLTv8i16rz
    O << ".8h, #0.0";
    return;
    break;
  case 49:
    // GLD1B_D_IMM_REAL, GLD1B_S_IMM_REAL, GLD1SB_D_IMM_REAL, GLD1SB_S_IMM_RE...
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 50:
    // GLD1D_IMM_REAL, GLDFF1D_IMM_REAL, SST1D_IMM
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 51:
    // GLD1H_D_IMM_REAL, GLD1H_S_IMM_REAL, GLD1SH_D_IMM_REAL, GLD1SH_S_IMM_RE...
    printImmScale<2>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 52:
    // GLD1SW_D_IMM_REAL, GLD1W_D_IMM_REAL, GLD1W_IMM_REAL, GLDFF1SW_D_IMM_RE...
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 53:
    // INDEX_II_B, INDEX_II_D, INDEX_II_H, INDEX_II_S, INDEX_IR_B, INDEX_IR_D...
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 54:
    // LDAPRB, LDAPRH, LDAPRW, LDAPRX, LDARB, LDARH, LDARW, LDARX, LDAXRB, LD...
    O << ']';
    return;
    break;
  case 55:
    // LDRBBpost, LDRBpost, LDRDpost, LDRHHpost, LDRHpost, LDRQpost, LDRSBWpo...
    O << "], ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 56:
    // MOVIv2i32, MOVIv2s_msl, MOVIv4i16, MOVIv4i32, MOVIv4s_msl, MOVIv8i16, ...
    printShifter(MI, 2, STI, O);
    return;
    break;
  case 57:
    // PRFB_PRI, PRFD_PRI, PRFH_PRI, PRFW_PRI
    O << ", mul vl]";
    return;
    break;
  case 58:
    // SHLLv16i8
    O << ".16b, #8";
    return;
    break;
  case 59:
    // SHLLv2i32
    O << ".2s, #32";
    return;
    break;
  case 60:
    // SHLLv4i16
    O << ".4h, #16";
    return;
    break;
  case 61:
    // SHLLv4i32
    O << ".4s, #32";
    return;
    break;
  case 62:
    // SHLLv8i16
    O << ".8h, #16";
    return;
    break;
  case 63:
    // SHLLv8i8
    O << ".8b, #8";
    return;
    break;
  }


  // Fragment 4 encoded into 6 bits for 48 unique commands.
  switch ((Bits >> 38) & 63) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPL_XXI, ADDSXrx64, ADDVL_XXI, ADDXrx6...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv4i32_v4i16, ADDHNv8i16_v8i8, ADDPv16i8, ADDPv2...
    printVRegOperand(MI, 2, STI, O);
    break;
  case 2:
    // ADDHNv2i64_v4i32, ADDHNv4i32_v8i16, ADDHNv8i16_v16i8, BITv16i8, BITv8i...
    printVRegOperand(MI, 3, STI, O);
    break;
  case 3:
    // ADDSWri, ADDSXri, ADDWri, ADDXri, SUBSWri, SUBSXri, SUBWri, SUBXri
    printAddSubImm(MI, 2, STI, O);
    return;
    break;
  case 4:
    // ADDSWrs, ADDSXrs, ADDWrs, ADDXrs, ANDSWrs, ANDSXrs, ANDWrs, ANDXrs, BI...
    printShiftedRegister(MI, 2, STI, O);
    return;
    break;
  case 5:
    // ADDSWrx, ADDSXrx, ADDWrx, ADDXrx, SUBSWrx, SUBSXrx, SUBWrx, SUBXrx
    printExtendedRegister(MI, 2, STI, O);
    return;
    break;
  case 6:
    // ADD_ZPmZ_B, ADD_ZPmZ_D, ADD_ZPmZ_H, ADD_ZPmZ_S, AND_ZPmZ_B, AND_ZPmZ_D...
    O << ", ";
    break;
  case 7:
    // ADD_ZZZ_B, ADD_ZZZ_D, ADD_ZZZ_H, ADD_ZZZ_S, AND_ZZZ, BIC_ZZZ, EOR_ZZZ,...
    return;
    break;
  case 8:
    // ANDSWri, ANDWri, EORWri, ORRWri
    printLogicalImm<int32_t>(MI, 2, STI, O);
    return;
    break;
  case 9:
    // ANDSXri, ANDXri, EORXri, ORRXri
    printLogicalImm<int64_t>(MI, 2, STI, O);
    return;
    break;
  case 10:
    // BFMWri, BFMXri, CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, C...
    printOperand(MI, 3, STI, O);
    break;
  case 11:
    // CPYi16, CPYi32, CPYi64, CPYi8, DUPv16i8lane, DUPv2i32lane, DUPv2i64lan...
    printVectorIndex(MI, 2, STI, O);
    return;
    break;
  case 12:
    // GLD1B_D_REAL, GLD1D_REAL, GLD1H_D_REAL, GLD1SB_D_REAL, GLD1SH_D_REAL, ...
    printRegWithShiftExtend<false, 8, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 13:
    // GLD1B_D_SXTW_REAL, GLD1D_SXTW_REAL, GLD1H_D_SXTW_REAL, GLD1SB_D_SXTW_R...
    printRegWithShiftExtend<true, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // GLD1B_D_UXTW_REAL, GLD1D_UXTW_REAL, GLD1H_D_UXTW_REAL, GLD1SB_D_UXTW_R...
    printRegWithShiftExtend<false, 8, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // GLD1B_S_SXTW_REAL, GLD1H_S_SXTW_REAL, GLD1SB_S_SXTW_REAL, GLD1SH_S_SXT...
    printRegWithShiftExtend<true, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // GLD1B_S_UXTW_REAL, GLD1H_S_UXTW_REAL, GLD1SB_S_UXTW_REAL, GLD1SH_S_UXT...
    printRegWithShiftExtend<false, 8, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // GLD1D_SCALED_REAL, GLDFF1D_SCALED_REAL, SST1D_SCALED
    printRegWithShiftExtend<false, 64, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // GLD1D_SXTW_SCALED_REAL, GLDFF1D_SXTW_SCALED_REAL, SST1D_SXTW_SCALED
    printRegWithShiftExtend<true, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // GLD1D_UXTW_SCALED_REAL, GLDFF1D_UXTW_SCALED_REAL, SST1D_UXTW_SCALED
    printRegWithShiftExtend<false, 64, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 20:
    // GLD1H_D_SCALED_REAL, GLD1SH_D_SCALED_REAL, GLDFF1H_D_SCALED_REAL, GLDF...
    printRegWithShiftExtend<false, 16, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // GLD1H_D_SXTW_SCALED_REAL, GLD1SH_D_SXTW_SCALED_REAL, GLDFF1H_D_SXTW_SC...
    printRegWithShiftExtend<true, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // GLD1H_D_UXTW_SCALED_REAL, GLD1SH_D_UXTW_SCALED_REAL, GLDFF1H_D_UXTW_SC...
    printRegWithShiftExtend<false, 16, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 23:
    // GLD1H_S_SXTW_SCALED_REAL, GLD1SH_S_SXTW_SCALED_REAL, GLDFF1H_S_SXTW_SC...
    printRegWithShiftExtend<true, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 24:
    // GLD1H_S_UXTW_SCALED_REAL, GLD1SH_S_UXTW_SCALED_REAL, GLDFF1H_S_UXTW_SC...
    printRegWithShiftExtend<false, 16, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 25:
    // GLD1SW_D_SCALED_REAL, GLD1W_D_SCALED_REAL, GLDFF1SW_D_SCALED_REAL, GLD...
    printRegWithShiftExtend<false, 32, 'x', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 26:
    // GLD1SW_D_SXTW_SCALED_REAL, GLD1W_D_SXTW_SCALED_REAL, GLDFF1SW_D_SXTW_S...
    printRegWithShiftExtend<true, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 27:
    // GLD1SW_D_UXTW_SCALED_REAL, GLD1W_D_UXTW_SCALED_REAL, GLDFF1SW_D_UXTW_S...
    printRegWithShiftExtend<false, 32, 'w', 'd'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 28:
    // GLD1W_SXTW_SCALED_REAL, GLDFF1W_SXTW_SCALED_REAL, SST1W_SXTW_SCALED
    printRegWithShiftExtend<true, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 29:
    // GLD1W_UXTW_SCALED_REAL, GLDFF1W_UXTW_SCALED_REAL, SST1W_UXTW_SCALED
    printRegWithShiftExtend<false, 32, 'w', 's'>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 30:
    // INSvi16lane, INSvi32lane, INSvi64lane, INSvi8lane
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 31:
    // LD1B, LD1B_D, LD1B_H, LD1B_S, LD1RQ_B, LD1SB_D, LD1SB_H, LD1SB_S, LD2B...
    printRegWithShiftExtend<false, 8, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 32:
    // LD1D, LD1RQ_D, LD2D, LD3D, LD4D, LDFF1D_REAL, LDNT1D_ZRR, ST1D, ST2D, ...
    printRegWithShiftExtend<false, 64, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 33:
    // LD1H, LD1H_D, LD1H_S, LD1RQ_H, LD1SH_D, LD1SH_S, LD2H, LD3H, LD4H, LDF...
    printRegWithShiftExtend<false, 16, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 34:
    // LD1RD_IMM, LDRAAwriteback, LDRABwriteback
    printImmScale<8>(MI, 3, STI, O);
    break;
  case 35:
    // LD1RH_D_IMM, LD1RH_IMM, LD1RH_S_IMM, LD1RSH_D_IMM, LD1RSH_S_IMM, LD2B_...
    printImmScale<2>(MI, 3, STI, O);
    break;
  case 36:
    // LD1RQ_B_IMM, LD1RQ_D_IMM, LD1RQ_H_IMM, LD1RQ_W_IMM
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 37:
    // LD1RQ_W, LD1SW_D, LD1W, LD1W_D, LD2W, LD3W, LD4W, LDFF1SW_D_REAL, LDFF...
    printRegWithShiftExtend<false, 32, 'x', 0>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 38:
    // LD1RSW_IMM, LD1RW_D_IMM, LD1RW_IMM, LD4B_IMM, LD4D_IMM, LD4H_IMM, LD4W...
    printImmScale<4>(MI, 3, STI, O);
    break;
  case 39:
    // LD3B_IMM, LD3D_IMM, LD3H_IMM, LD3W_IMM, ST3B_IMM, ST3D_IMM, ST3H_IMM, ...
    printImmScale<3>(MI, 3, STI, O);
    O << ", mul vl]";
    return;
    break;
  case 40:
    // LDRAAindexed, LDRABindexed
    printImmScale<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 41:
    // LDRBBui, LDRBui, LDRSBWui, LDRSBXui, STRBBui, STRBui
    printUImm12Offset<1>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 42:
    // LDRDui, LDRXui, PRFMui, STRDui, STRXui
    printUImm12Offset<8>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 43:
    // LDRHHui, LDRHui, LDRSHWui, LDRSHXui, STRHHui, STRHui
    printUImm12Offset<2>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 44:
    // LDRQui, STRQui
    printUImm12Offset<16>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 45:
    // LDRSWui, LDRSui, LDRWui, STRSui, STRWui
    printUImm12Offset<4>(MI, 2, STI, O);
    O << ']';
    return;
    break;
  case 46:
    // SYSLxt
    printSysCROperand(MI, 2, STI, O);
    O << ", ";
    printSysCROperand(MI, 3, STI, O);
    O << ", ";
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 47:
    // TBNZW, TBNZX, TBZW, TBZX
    printAlignedLabel(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 5 bits for 30 unique commands.
  switch ((Bits >> 44) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCSWr, ADCSXr, ADCWr, ADCXr, ADDPL_XXI, ADDVL_XXI, ADDv1i64, ASRVWr, ...
    return;
    break;
  case 1:
    // ADDHNv2i64_v2i32, ADDHNv2i64_v4i32, ADDPv2i64, ADDv2i64, CMEQv2i64, CM...
    O << ".2d";
    return;
    break;
  case 2:
    // ADDHNv4i32_v4i16, ADDHNv4i32_v8i16, ADDPv4i32, ADDv4i32, CMEQv4i32, CM...
    O << ".4s";
    return;
    break;
  case 3:
    // ADDHNv8i16_v16i8, ADDHNv8i16_v8i8, ADDPv8i16, ADDv8i16, CMEQv8i16, CMG...
    O << ".8h";
    return;
    break;
  case 4:
    // ADDPv16i8, ADDv16i8, ANDv16i8, BICv16i8, BIFv16i8, BITv16i8, BSLv16i8,...
    O << ".16b";
    return;
    break;
  case 5:
    // ADDPv2i32, ADDv2i32, CMEQv2i32, CMGEv2i32, CMGTv2i32, CMHIv2i32, CMHSv...
    O << ".2s";
    return;
    break;
  case 6:
    // ADDPv4i16, ADDv4i16, CMEQv4i16, CMGEv4i16, CMGTv4i16, CMHIv4i16, CMHSv...
    O << ".4h";
    return;
    break;
  case 7:
    // ADDPv8i8, ADDv8i8, ANDv8i8, BICv8i8, BIFv8i8, BITv8i8, BSLv8i8, CMEQv8...
    O << ".8b";
    return;
    break;
  case 8:
    // ADDSXrx64, ADDXrx64, SUBSXrx64, SUBXrx64
    printArithExtend(MI, 3, STI, O);
    return;
    break;
  case 9:
    // ADD_ZPmZ_B, AND_ZPmZ_B, BIC_ZPmZ_B, EOR_ZPmZ_B, LSL_ZPmZ_B, LSR_ZPmZ_B...
    printSVERegOp<'b'>(MI, 3, STI, O);
    return;
    break;
  case 10:
    // ADD_ZPmZ_D, AND_ZPmZ_D, BIC_ZPmZ_D, EOR_ZPmZ_D, LSL_ZPmZ_D, LSR_ZPmZ_D...
    printSVERegOp<'d'>(MI, 3, STI, O);
    return;
    break;
  case 11:
    // ADD_ZPmZ_H, AND_ZPmZ_H, BIC_ZPmZ_H, EOR_ZPmZ_H, LSL_ZPmZ_H, LSR_ZPmZ_H...
    printSVERegOp<'h'>(MI, 3, STI, O);
    return;
    break;
  case 12:
    // ADD_ZPmZ_S, AND_ZPmZ_S, BIC_ZPmZ_S, EOR_ZPmZ_S, LSL_ZPmZ_S, LSR_ZPmZ_S...
    printSVERegOp<'s'>(MI, 3, STI, O);
    return;
    break;
  case 13:
    // BFMWri, BFMXri, CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi...
    O << ", ";
    break;
  case 14:
    // CASAB, CASAH, CASALB, CASALH, CASALW, CASALX, CASAW, CASAX, CASB, CASH...
    O << ']';
    return;
    break;
  case 15:
    // EXTv16i8
    O << ".16b, ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 16:
    // EXTv8i8
    O << ".8b, ";
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 17:
    // FCADDv2f32, FCMLAv2f32
    O << ".2s, ";
    break;
  case 18:
    // FCADDv2f64, FCMLAv2f64
    O << ".2d, ";
    break;
  case 19:
    // FCADDv4f16, FCMLAv4f16
    O << ".4h, ";
    break;
  case 20:
    // FCADDv4f32, FCMLAv4f32
    O << ".4s, ";
    break;
  case 21:
    // FCADDv8f16, FCMLAv8f16
    O << ".8h, ";
    break;
  case 22:
    // FCMLAv4f16_indexed, FCMLAv8f16_indexed, FMLAv1i16_indexed, FMLAv4i16_i...
    O << ".h";
    break;
  case 23:
    // FCMLAv4f32_indexed, FMLAv1i32_indexed, FMLAv2i32_indexed, FMLAv4i32_in...
    O << ".s";
    break;
  case 24:
    // FMLAv1i64_indexed, FMLAv2i64_indexed, FMLSv1i64_indexed, FMLSv2i64_ind...
    O << ".d";
    break;
  case 25:
    // LD1B_D_IMM_REAL, LD1B_H_IMM_REAL, LD1B_IMM_REAL, LD1B_S_IMM_REAL, LD1D...
    O << ", mul vl]";
    return;
    break;
  case 26:
    // LDPDpost, LDPQpost, LDPSWpost, LDPSpost, LDPWpost, LDPXpost, STPDpost,...
    O << "], ";
    break;
  case 27:
    // LDRAAwriteback, LDRABwriteback, LDRBBpre, LDRBpre, LDRDpre, LDRHHpre, ...
    O << "]!";
    return;
    break;
  case 28:
    // SDOTlanev16i8, SDOTlanev8i8, UDOTlanev16i8, UDOTlanev8i8
    O << ".4b";
    printVectorIndex(MI, 4, STI, O);
    return;
    break;
  case 29:
    // STLXPW, STLXPX, STXPW, STXPX
    O << ", [";
    printOperand(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 6 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 49) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BFMWri, BFMXri
    printOperand(MI, 4, STI, O);
    return;
    break;
  case 1:
    // CCMNWi, CCMNWr, CCMNXi, CCMNXr, CCMPWi, CCMPWr, CCMPXi, CCMPXr, CSELWr...
    printCondCode(MI, 3, STI, O);
    return;
    break;
  case 2:
    // EXTRWrri, EXTRXrri, FMADDDrrr, FMADDHrrr, FMADDSrrr, FMSUBDrrr, FMSUBH...
    printOperand(MI, 3, STI, O);
    return;
    break;
  case 3:
    // FCADDv2f32, FCADDv2f64, FCADDv4f16, FCADDv4f32, FCADDv8f16
    printComplexRotationOp<180, 90>(MI, 3, STI, O);
    return;
    break;
  case 4:
    // FCMLAv2f32, FCMLAv2f64, FCMLAv4f16, FCMLAv4f32, FCMLAv8f16
    printComplexRotationOp<90, 0>(MI, 4, STI, O);
    return;
    break;
  case 5:
    // FCMLAv4f16_indexed, FCMLAv4f32_indexed, FCMLAv8f16_indexed, FMLAv1i16_...
    printVectorIndex(MI, 4, STI, O);
    break;
  case 6:
    // FMULXv1i16_indexed, FMULXv1i32_indexed, FMULXv1i64_indexed, FMULXv2i32...
    printVectorIndex(MI, 3, STI, O);
    return;
    break;
  case 7:
    // LDNPDi, LDNPXi, LDPDi, LDPXi, STNPDi, STNPXi, STPDi, STPXi
    printImmScale<8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 8:
    // LDNPQi, LDPQi, STNPQi, STPQi
    printImmScale<16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 9:
    // LDNPSi, LDNPWi, LDPSWi, LDPSi, LDPWi, STNPSi, STNPWi, STPSi, STPWi
    printImmScale<4>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 10:
    // LDPDpost, LDPDpre, LDPXpost, LDPXpre, STPDpost, STPDpre, STPXpost, STP...
    printImmScale<8>(MI, 4, STI, O);
    break;
  case 11:
    // LDPQpost, LDPQpre, STPQpost, STPQpre
    printImmScale<16>(MI, 4, STI, O);
    break;
  case 12:
    // LDPSWpost, LDPSWpre, LDPSpost, LDPSpre, LDPWpost, LDPWpre, STPSpost, S...
    printImmScale<4>(MI, 4, STI, O);
    break;
  case 13:
    // LDRBBroW, LDRBroW, LDRSBWroW, LDRSBXroW, STRBBroW, STRBroW
    printMemExtend<'w', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 14:
    // LDRBBroX, LDRBroX, LDRSBWroX, LDRSBXroX, STRBBroX, STRBroX
    printMemExtend<'x', 8>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 15:
    // LDRDroW, LDRXroW, PRFMroW, STRDroW, STRXroW
    printMemExtend<'w', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 16:
    // LDRDroX, LDRXroX, PRFMroX, STRDroX, STRXroX
    printMemExtend<'x', 64>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 17:
    // LDRHHroW, LDRHroW, LDRSHWroW, LDRSHXroW, STRHHroW, STRHroW
    printMemExtend<'w', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 18:
    // LDRHHroX, LDRHroX, LDRSHWroX, LDRSHXroX, STRHHroX, STRHroX
    printMemExtend<'x', 16>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 19:
    // LDRQroW, STRQroW
    printMemExtend<'w', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 20:
    // LDRQroX, STRQroX
    printMemExtend<'x', 128>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 21:
    // LDRSWroW, LDRSroW, LDRWroW, STRSroW, STRWroW
    printMemExtend<'w', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  case 22:
    // LDRSWroX, LDRSroX, LDRWroX, STRSroX, STRWroX
    printMemExtend<'x', 32>(MI, 3, STI, O);
    O << ']';
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 54) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // FCMLAv4f16_indexed, FCMLAv4f32_indexed, FCMLAv8f16_indexed
    O << ", ";
    printComplexRotationOp<90, 0>(MI, 5, STI, O);
    return;
    break;
  case 1:
    // FMLAv1i16_indexed, FMLAv1i32_indexed, FMLAv1i64_indexed, FMLAv2i32_ind...
    return;
    break;
  case 2:
    // LDPDpre, LDPQpre, LDPSWpre, LDPSpre, LDPWpre, LDPXpre, STPDpre, STPQpr...
    O << "]!";
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AArch64InstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 661 && "Invalid register number!");

  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ 'D', '7', '_', 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', 0,
  /* 13 */ 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', 0,
  /* 26 */ 'W', '9', '_', 'W', '1', '0', 0,
  /* 33 */ 'X', '9', '_', 'X', '1', '0', 0,
  /* 40 */ 'Z', '7', '_', 'Z', '8', '_', 'Z', '9', '_', 'Z', '1', '0', 0,
  /* 53 */ 'b', '1', '0', 0,
  /* 57 */ 'd', '1', '0', 0,
  /* 61 */ 'h', '1', '0', 0,
  /* 65 */ 'p', '1', '0', 0,
  /* 69 */ 'q', '1', '0', 0,
  /* 73 */ 's', '1', '0', 0,
  /* 77 */ 'w', '1', '0', 0,
  /* 81 */ 'x', '1', '0', 0,
  /* 85 */ 'z', '1', '0', 0,
  /* 89 */ 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', 0,
  /* 105 */ 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', 0,
  /* 121 */ 'W', '1', '9', '_', 'W', '2', '0', 0,
  /* 129 */ 'X', '1', '9', '_', 'X', '2', '0', 0,
  /* 137 */ 'Z', '1', '7', '_', 'Z', '1', '8', '_', 'Z', '1', '9', '_', 'Z', '2', '0', 0,
  /* 153 */ 'b', '2', '0', 0,
  /* 157 */ 'd', '2', '0', 0,
  /* 161 */ 'h', '2', '0', 0,
  /* 165 */ 'q', '2', '0', 0,
  /* 169 */ 's', '2', '0', 0,
  /* 173 */ 'w', '2', '0', 0,
  /* 177 */ 'x', '2', '0', 0,
  /* 181 */ 'z', '2', '0', 0,
  /* 185 */ 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', 0,
  /* 201 */ 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', 0,
  /* 217 */ 'W', '2', '9', '_', 'W', '3', '0', 0,
  /* 225 */ 'Z', '2', '7', '_', 'Z', '2', '8', '_', 'Z', '2', '9', '_', 'Z', '3', '0', 0,
  /* 241 */ 'b', '3', '0', 0,
  /* 245 */ 'd', '3', '0', 0,
  /* 249 */ 'h', '3', '0', 0,
  /* 253 */ 'q', '3', '0', 0,
  /* 257 */ 's', '3', '0', 0,
  /* 261 */ 'w', '3', '0', 0,
  /* 265 */ 'x', '3', '0', 0,
  /* 269 */ 'z', '3', '0', 0,
  /* 273 */ 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', 0,
  /* 288 */ 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', 0,
  /* 303 */ 'W', 'Z', 'R', '_', 'W', '0', 0,
  /* 310 */ 'X', 'Z', 'R', '_', 'X', '0', 0,
  /* 317 */ 'Z', '2', '9', '_', 'Z', '3', '0', '_', 'Z', '3', '1', '_', 'Z', '0', 0,
  /* 332 */ 'b', '0', 0,
  /* 335 */ 'd', '0', 0,
  /* 338 */ 'h', '0', 0,
  /* 341 */ 'p', '0', 0,
  /* 344 */ 'q', '0', 0,
  /* 347 */ 's', '0', 0,
  /* 350 */ 'w', '0', 0,
  /* 353 */ 'x', '0', 0,
  /* 356 */ 'z', '0', 0,
  /* 359 */ 'D', '8', '_', 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', 0,
  /* 373 */ 'Q', '8', '_', 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', 0,
  /* 387 */ 'W', '1', '0', '_', 'W', '1', '1', 0,
  /* 395 */ 'X', '1', '0', '_', 'X', '1', '1', 0,
  /* 403 */ 'Z', '8', '_', 'Z', '9', '_', 'Z', '1', '0', '_', 'Z', '1', '1', 0,
  /* 417 */ 'b', '1', '1', 0,
  /* 421 */ 'd', '1', '1', 0,
  /* 425 */ 'h', '1', '1', 0,
  /* 429 */ 'p', '1', '1', 0,
  /* 433 */ 'q', '1', '1', 0,
  /* 437 */ 's', '1', '1', 0,
  /* 441 */ 'w', '1', '1', 0,
  /* 445 */ 'x', '1', '1', 0,
  /* 449 */ 'z', '1', '1', 0,
  /* 453 */ 'D', '1', '8', '_', 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', 0,
  /* 469 */ 'Q', '1', '8', '_', 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', 0,
  /* 485 */ 'W', '2', '0', '_', 'W', '2', '1', 0,
  /* 493 */ 'X', '2', '0', '_', 'X', '2', '1', 0,
  /* 501 */ 'Z', '1', '8', '_', 'Z', '1', '9', '_', 'Z', '2', '0', '_', 'Z', '2', '1', 0,
  /* 517 */ 'b', '2', '1', 0,
  /* 521 */ 'd', '2', '1', 0,
  /* 525 */ 'h', '2', '1', 0,
  /* 529 */ 'q', '2', '1', 0,
  /* 533 */ 's', '2', '1', 0,
  /* 537 */ 'w', '2', '1', 0,
  /* 541 */ 'x', '2', '1', 0,
  /* 545 */ 'z', '2', '1', 0,
  /* 549 */ 'D', '2', '8', '_', 'D', '2', '9', '_', 'D', '3', '0', '_', 'D', '3', '1', 0,
  /* 565 */ 'Q', '2', '8', '_', 'Q', '2', '9', '_', 'Q', '3', '0', '_', 'Q', '3', '1', 0,
  /* 581 */ 'Z', '2', '8', '_', 'Z', '2', '9', '_', 'Z', '3', '0', '_', 'Z', '3', '1', 0,
  /* 597 */ 'b', '3', '1', 0,
  /* 601 */ 'd', '3', '1', 0,
  /* 605 */ 'h', '3', '1', 0,
  /* 609 */ 'q', '3', '1', 0,
  /* 613 */ 's', '3', '1', 0,
  /* 617 */ 'z', '3', '1', 0,
  /* 621 */ 'D', '3', '0', '_', 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', 0,
  /* 635 */ 'Q', '3', '0', '_', 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', 0,
  /* 649 */ 'W', '0', '_', 'W', '1', 0,
  /* 655 */ 'X', '0', '_', 'X', '1', 0,
  /* 661 */ 'Z', '3', '0', '_', 'Z', '3', '1', '_', 'Z', '0', '_', 'Z', '1', 0,
  /* 675 */ 'b', '1', 0,
  /* 678 */ 'd', '1', 0,
  /* 681 */ 'h', '1', 0,
  /* 684 */ 'p', '1', 0,
  /* 687 */ 'q', '1', 0,
  /* 690 */ 's', '1', 0,
  /* 693 */ 'w', '1', 0,
  /* 696 */ 'x', '1', 0,
  /* 699 */ 'z', '1', 0,
  /* 702 */ 'D', '9', '_', 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', 0,
  /* 717 */ 'Q', '9', '_', 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', 0,
  /* 732 */ 'W', '1', '1', '_', 'W', '1', '2', 0,
  /* 740 */ 'X', '1', '1', '_', 'X', '1', '2', 0,
  /* 748 */ 'Z', '9', '_', 'Z', '1', '0', '_', 'Z', '1', '1', '_', 'Z', '1', '2', 0,
  /* 763 */ 'b', '1', '2', 0,
  /* 767 */ 'd', '1', '2', 0,
  /* 771 */ 'h', '1', '2', 0,
  /* 775 */ 'p', '1', '2', 0,
  /* 779 */ 'q', '1', '2', 0,
  /* 783 */ 's', '1', '2', 0,
  /* 787 */ 'w', '1', '2', 0,
  /* 791 */ 'x', '1', '2', 0,
  /* 795 */ 'z', '1', '2', 0,
  /* 799 */ 'D', '1', '9', '_', 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', 0,
  /* 815 */ 'Q', '1', '9', '_', 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', 0,
  /* 831 */ 'W', '2', '1', '_', 'W', '2', '2', 0,
  /* 839 */ 'X', '2', '1', '_', 'X', '2', '2', 0,
  /* 847 */ 'Z', '1', '9', '_', 'Z', '2', '0', '_', 'Z', '2', '1', '_', 'Z', '2', '2', 0,
  /* 863 */ 'b', '2', '2', 0,
  /* 867 */ 'd', '2', '2', 0,
  /* 871 */ 'h', '2', '2', 0,
  /* 875 */ 'q', '2', '2', 0,
  /* 879 */ 's', '2', '2', 0,
  /* 883 */ 'w', '2', '2', 0,
  /* 887 */ 'x', '2', '2', 0,
  /* 891 */ 'z', '2', '2', 0,
  /* 895 */ 'D', '3', '1', '_', 'D', '0', '_', 'D', '1', '_', 'D', '2', 0,
  /* 908 */ 'Q', '3', '1', '_', 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', 0,
  /* 921 */ 'W', '1', '_', 'W', '2', 0,
  /* 927 */ 'X', '1', '_', 'X', '2', 0,
  /* 933 */ 'Z', '3', '1', '_', 'Z', '0', '_', 'Z', '1', '_', 'Z', '2', 0,
  /* 946 */ 'b', '2', 0,
  /* 949 */ 'd', '2', 0,
  /* 952 */ 'h', '2', 0,
  /* 955 */ 'p', '2', 0,
  /* 958 */ 'q', '2', 0,
  /* 961 */ 's', '2', 0,
  /* 964 */ 'w', '2', 0,
  /* 967 */ 'x', '2', 0,
  /* 970 */ 'z', '2', 0,
  /* 973 */ 'D', '1', '0', '_', 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', 0,
  /* 989 */ 'Q', '1', '0', '_', 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', 0,
  /* 1005 */ 'W', '1', '2', '_', 'W', '1', '3', 0,
  /* 1013 */ 'X', '1', '2', '_', 'X', '1', '3', 0,
  /* 1021 */ 'Z', '1', '0', '_', 'Z', '1', '1', '_', 'Z', '1', '2', '_', 'Z', '1', '3', 0,
  /* 1037 */ 'b', '1', '3', 0,
  /* 1041 */ 'd', '1', '3', 0,
  /* 1045 */ 'h', '1', '3', 0,
  /* 1049 */ 'p', '1', '3', 0,
  /* 1053 */ 'q', '1', '3', 0,
  /* 1057 */ 's', '1', '3', 0,
  /* 1061 */ 'w', '1', '3', 0,
  /* 1065 */ 'x', '1', '3', 0,
  /* 1069 */ 'z', '1', '3', 0,
  /* 1073 */ 'D', '2', '0', '_', 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', 0,
  /* 1089 */ 'Q', '2', '0', '_', 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', 0,
  /* 1105 */ 'W', '2', '2', '_', 'W', '2', '3', 0,
  /* 1113 */ 'X', '2', '2', '_', 'X', '2', '3', 0,
  /* 1121 */ 'Z', '2', '0', '_', 'Z', '2', '1', '_', 'Z', '2', '2', '_', 'Z', '2', '3', 0,
  /* 1137 */ 'b', '2', '3', 0,
  /* 1141 */ 'd', '2', '3', 0,
  /* 1145 */ 'h', '2', '3', 0,
  /* 1149 */ 'q', '2', '3', 0,
  /* 1153 */ 's', '2', '3', 0,
  /* 1157 */ 'w', '2', '3', 0,
  /* 1161 */ 'x', '2', '3', 0,
  /* 1165 */ 'z', '2', '3', 0,
  /* 1169 */ 'D', '0', '_', 'D', '1', '_', 'D', '2', '_', 'D', '3', 0,
  /* 1181 */ 'Q', '0', '_', 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', 0,
  /* 1193 */ 'W', '2', '_', 'W', '3', 0,
  /* 1199 */ 'X', '2', '_', 'X', '3', 0,
  /* 1205 */ 'Z', '0', '_', 'Z', '1', '_', 'Z', '2', '_', 'Z', '3', 0,
  /* 1217 */ 'b', '3', 0,
  /* 1220 */ 'd', '3', 0,
  /* 1223 */ 'h', '3', 0,
  /* 1226 */ 'p', '3', 0,
  /* 1229 */ 'q', '3', 0,
  /* 1232 */ 's', '3', 0,
  /* 1235 */ 'w', '3', 0,
  /* 1238 */ 'x', '3', 0,
  /* 1241 */ 'z', '3', 0,
  /* 1244 */ 'D', '1', '1', '_', 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', 0,
  /* 1260 */ 'Q', '1', '1', '_', 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', 0,
  /* 1276 */ 'W', '1', '3', '_', 'W', '1', '4', 0,
  /* 1284 */ 'X', '1', '3', '_', 'X', '1', '4', 0,
  /* 1292 */ 'Z', '1', '1', '_', 'Z', '1', '2', '_', 'Z', '1', '3', '_', 'Z', '1', '4', 0,
  /* 1308 */ 'b', '1', '4', 0,
  /* 1312 */ 'd', '1', '4', 0,
  /* 1316 */ 'h', '1', '4', 0,
  /* 1320 */ 'p', '1', '4', 0,
  /* 1324 */ 'q', '1', '4', 0,
  /* 1328 */ 's', '1', '4', 0,
  /* 1332 */ 'w', '1', '4', 0,
  /* 1336 */ 'x', '1', '4', 0,
  /* 1340 */ 'z', '1', '4', 0,
  /* 1344 */ 'D', '2', '1', '_', 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', 0,
  /* 1360 */ 'Q', '2', '1', '_', 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', 0,
  /* 1376 */ 'W', '2', '3', '_', 'W', '2', '4', 0,
  /* 1384 */ 'X', '2', '3', '_', 'X', '2', '4', 0,
  /* 1392 */ 'Z', '2', '1', '_', 'Z', '2', '2', '_', 'Z', '2', '3', '_', 'Z', '2', '4', 0,
  /* 1408 */ 'b', '2', '4', 0,
  /* 1412 */ 'd', '2', '4', 0,
  /* 1416 */ 'h', '2', '4', 0,
  /* 1420 */ 'q', '2', '4', 0,
  /* 1424 */ 's', '2', '4', 0,
  /* 1428 */ 'w', '2', '4', 0,
  /* 1432 */ 'x', '2', '4', 0,
  /* 1436 */ 'z', '2', '4', 0,
  /* 1440 */ 'D', '1', '_', 'D', '2', '_', 'D', '3', '_', 'D', '4', 0,
  /* 1452 */ 'Q', '1', '_', 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', 0,
  /* 1464 */ 'W', '3', '_', 'W', '4', 0,
  /* 1470 */ 'X', '3', '_', 'X', '4', 0,
  /* 1476 */ 'Z', '1', '_', 'Z', '2', '_', 'Z', '3', '_', 'Z', '4', 0,
  /* 1488 */ 'b', '4', 0,
  /* 1491 */ 'd', '4', 0,
  /* 1494 */ 'h', '4', 0,
  /* 1497 */ 'p', '4', 0,
  /* 1500 */ 'q', '4', 0,
  /* 1503 */ 's', '4', 0,
  /* 1506 */ 'w', '4', 0,
  /* 1509 */ 'x', '4', 0,
  /* 1512 */ 'z', '4', 0,
  /* 1515 */ 'D', '1', '2', '_', 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', 0,
  /* 1531 */ 'Q', '1', '2', '_', 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', 0,
  /* 1547 */ 'W', '1', '4', '_', 'W', '1', '5', 0,
  /* 1555 */ 'X', '1', '4', '_', 'X', '1', '5', 0,
  /* 1563 */ 'Z', '1', '2', '_', 'Z', '1', '3', '_', 'Z', '1', '4', '_', 'Z', '1', '5', 0,
  /* 1579 */ 'b', '1', '5', 0,
  /* 1583 */ 'd', '1', '5', 0,
  /* 1587 */ 'h', '1', '5', 0,
  /* 1591 */ 'p', '1', '5', 0,
  /* 1595 */ 'q', '1', '5', 0,
  /* 1599 */ 's', '1', '5', 0,
  /* 1603 */ 'w', '1', '5', 0,
  /* 1607 */ 'x', '1', '5', 0,
  /* 1611 */ 'z', '1', '5', 0,
  /* 1615 */ 'D', '2', '2', '_', 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', 0,
  /* 1631 */ 'Q', '2', '2', '_', 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', 0,
  /* 1647 */ 'W', '2', '4', '_', 'W', '2', '5', 0,
  /* 1655 */ 'X', '2', '4', '_', 'X', '2', '5', 0,
  /* 1663 */ 'Z', '2', '2', '_', 'Z', '2', '3', '_', 'Z', '2', '4', '_', 'Z', '2', '5', 0,
  /* 1679 */ 'b', '2', '5', 0,
  /* 1683 */ 'd', '2', '5', 0,
  /* 1687 */ 'h', '2', '5', 0,
  /* 1691 */ 'q', '2', '5', 0,
  /* 1695 */ 's', '2', '5', 0,
  /* 1699 */ 'w', '2', '5', 0,
  /* 1703 */ 'x', '2', '5', 0,
  /* 1707 */ 'z', '2', '5', 0,
  /* 1711 */ 'D', '2', '_', 'D', '3', '_', 'D', '4', '_', 'D', '5', 0,
  /* 1723 */ 'Q', '2', '_', 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', 0,
  /* 1735 */ 'W', '4', '_', 'W', '5', 0,
  /* 1741 */ 'X', '4', '_', 'X', '5', 0,
  /* 1747 */ 'Z', '2', '_', 'Z', '3', '_', 'Z', '4', '_', 'Z', '5', 0,
  /* 1759 */ 'b', '5', 0,
  /* 1762 */ 'd', '5', 0,
  /* 1765 */ 'h', '5', 0,
  /* 1768 */ 'p', '5', 0,
  /* 1771 */ 'q', '5', 0,
  /* 1774 */ 's', '5', 0,
  /* 1777 */ 'w', '5', 0,
  /* 1780 */ 'x', '5', 0,
  /* 1783 */ 'z', '5', 0,
  /* 1786 */ 'D', '1', '3', '_', 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', 0,
  /* 1802 */ 'Q', '1', '3', '_', 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', 0,
  /* 1818 */ 'W', '1', '5', '_', 'W', '1', '6', 0,
  /* 1826 */ 'X', '1', '5', '_', 'X', '1', '6', 0,
  /* 1834 */ 'Z', '1', '3', '_', 'Z', '1', '4', '_', 'Z', '1', '5', '_', 'Z', '1', '6', 0,
  /* 1850 */ 'b', '1', '6', 0,
  /* 1854 */ 'd', '1', '6', 0,
  /* 1858 */ 'h', '1', '6', 0,
  /* 1862 */ 'q', '1', '6', 0,
  /* 1866 */ 's', '1', '6', 0,
  /* 1870 */ 'w', '1', '6', 0,
  /* 1874 */ 'x', '1', '6', 0,
  /* 1878 */ 'z', '1', '6', 0,
  /* 1882 */ 'D', '2', '3', '_', 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', 0,
  /* 1898 */ 'Q', '2', '3', '_', 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', 0,
  /* 1914 */ 'W', '2', '5', '_', 'W', '2', '6', 0,
  /* 1922 */ 'X', '2', '5', '_', 'X', '2', '6', 0,
  /* 1930 */ 'Z', '2', '3', '_', 'Z', '2', '4', '_', 'Z', '2', '5', '_', 'Z', '2', '6', 0,
  /* 1946 */ 'b', '2', '6', 0,
  /* 1950 */ 'd', '2', '6', 0,
  /* 1954 */ 'h', '2', '6', 0,
  /* 1958 */ 'q', '2', '6', 0,
  /* 1962 */ 's', '2', '6', 0,
  /* 1966 */ 'w', '2', '6', 0,
  /* 1970 */ 'x', '2', '6', 0,
  /* 1974 */ 'z', '2', '6', 0,
  /* 1978 */ 'D', '3', '_', 'D', '4', '_', 'D', '5', '_', 'D', '6', 0,
  /* 1990 */ 'Q', '3', '_', 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', 0,
  /* 2002 */ 'W', '5', '_', 'W', '6', 0,
  /* 2008 */ 'X', '5', '_', 'X', '6', 0,
  /* 2014 */ 'Z', '3', '_', 'Z', '4', '_', 'Z', '5', '_', 'Z', '6', 0,
  /* 2026 */ 'b', '6', 0,
  /* 2029 */ 'd', '6', 0,
  /* 2032 */ 'h', '6', 0,
  /* 2035 */ 'p', '6', 0,
  /* 2038 */ 'q', '6', 0,
  /* 2041 */ 's', '6', 0,
  /* 2044 */ 'w', '6', 0,
  /* 2047 */ 'x', '6', 0,
  /* 2050 */ 'z', '6', 0,
  /* 2053 */ 'D', '1', '4', '_', 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', 0,
  /* 2069 */ 'Q', '1', '4', '_', 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', 0,
  /* 2085 */ 'W', '1', '6', '_', 'W', '1', '7', 0,
  /* 2093 */ 'X', '1', '6', '_', 'X', '1', '7', 0,
  /* 2101 */ 'Z', '1', '4', '_', 'Z', '1', '5', '_', 'Z', '1', '6', '_', 'Z', '1', '7', 0,
  /* 2117 */ 'b', '1', '7', 0,
  /* 2121 */ 'd', '1', '7', 0,
  /* 2125 */ 'h', '1', '7', 0,
  /* 2129 */ 'q', '1', '7', 0,
  /* 2133 */ 's', '1', '7', 0,
  /* 2137 */ 'w', '1', '7', 0,
  /* 2141 */ 'x', '1', '7', 0,
  /* 2145 */ 'z', '1', '7', 0,
  /* 2149 */ 'D', '2', '4', '_', 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', 0,
  /* 2165 */ 'Q', '2', '4', '_', 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', 0,
  /* 2181 */ 'W', '2', '6', '_', 'W', '2', '7', 0,
  /* 2189 */ 'X', '2', '6', '_', 'X', '2', '7', 0,
  /* 2197 */ 'Z', '2', '4', '_', 'Z', '2', '5', '_', 'Z', '2', '6', '_', 'Z', '2', '7', 0,
  /* 2213 */ 'b', '2', '7', 0,
  /* 2217 */ 'd', '2', '7', 0,
  /* 2221 */ 'h', '2', '7', 0,
  /* 2225 */ 'q', '2', '7', 0,
  /* 2229 */ 's', '2', '7', 0,
  /* 2233 */ 'w', '2', '7', 0,
  /* 2237 */ 'x', '2', '7', 0,
  /* 2241 */ 'z', '2', '7', 0,
  /* 2245 */ 'D', '4', '_', 'D', '5', '_', 'D', '6', '_', 'D', '7', 0,
  /* 2257 */ 'Q', '4', '_', 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', 0,
  /* 2269 */ 'W', '6', '_', 'W', '7', 0,
  /* 2275 */ 'X', '6', '_', 'X', '7', 0,
  /* 2281 */ 'Z', '4', '_', 'Z', '5', '_', 'Z', '6', '_', 'Z', '7', 0,
  /* 2293 */ 'b', '7', 0,
  /* 2296 */ 'd', '7', 0,
  /* 2299 */ 'h', '7', 0,
  /* 2302 */ 'p', '7', 0,
  /* 2305 */ 'q', '7', 0,
  /* 2308 */ 's', '7', 0,
  /* 2311 */ 'w', '7', 0,
  /* 2314 */ 'x', '7', 0,
  /* 2317 */ 'z', '7', 0,
  /* 2320 */ 'D', '1', '5', '_', 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', 0,
  /* 2336 */ 'Q', '1', '5', '_', 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', 0,
  /* 2352 */ 'W', '1', '7', '_', 'W', '1', '8', 0,
  /* 2360 */ 'X', '1', '7', '_', 'X', '1', '8', 0,
  /* 2368 */ 'Z', '1', '5', '_', 'Z', '1', '6', '_', 'Z', '1', '7', '_', 'Z', '1', '8', 0,
  /* 2384 */ 'b', '1', '8', 0,
  /* 2388 */ 'd', '1', '8', 0,
  /* 2392 */ 'h', '1', '8', 0,
  /* 2396 */ 'q', '1', '8', 0,
  /* 2400 */ 's', '1', '8', 0,
  /* 2404 */ 'w', '1', '8', 0,
  /* 2408 */ 'x', '1', '8', 0,
  /* 2412 */ 'z', '1', '8', 0,
  /* 2416 */ 'D', '2', '5', '_', 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', 0,
  /* 2432 */ 'Q', '2', '5', '_', 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', 0,
  /* 2448 */ 'W', '2', '7', '_', 'W', '2', '8', 0,
  /* 2456 */ 'X', '2', '7', '_', 'X', '2', '8', 0,
  /* 2464 */ 'Z', '2', '5', '_', 'Z', '2', '6', '_', 'Z', '2', '7', '_', 'Z', '2', '8', 0,
  /* 2480 */ 'b', '2', '8', 0,
  /* 2484 */ 'd', '2', '8', 0,
  /* 2488 */ 'h', '2', '8', 0,
  /* 2492 */ 'q', '2', '8', 0,
  /* 2496 */ 's', '2', '8', 0,
  /* 2500 */ 'w', '2', '8', 0,
  /* 2504 */ 'x', '2', '8', 0,
  /* 2508 */ 'z', '2', '8', 0,
  /* 2512 */ 'D', '5', '_', 'D', '6', '_', 'D', '7', '_', 'D', '8', 0,
  /* 2524 */ 'Q', '5', '_', 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', 0,
  /* 2536 */ 'W', '7', '_', 'W', '8', 0,
  /* 2542 */ 'X', '7', '_', 'X', '8', 0,
  /* 2548 */ 'Z', '5', '_', 'Z', '6', '_', 'Z', '7', '_', 'Z', '8', 0,
  /* 2560 */ 'b', '8', 0,
  /* 2563 */ 'd', '8', 0,
  /* 2566 */ 'h', '8', 0,
  /* 2569 */ 'p', '8', 0,
  /* 2572 */ 'q', '8', 0,
  /* 2575 */ 's', '8', 0,
  /* 2578 */ 'w', '8', 0,
  /* 2581 */ 'x', '8', 0,
  /* 2584 */ 'z', '8', 0,
  /* 2587 */ 'D', '1', '6', '_', 'D', '1', '7', '_', 'D', '1', '8', '_', 'D', '1', '9', 0,
  /* 2603 */ 'Q', '1', '6', '_', 'Q', '1', '7', '_', 'Q', '1', '8', '_', 'Q', '1', '9', 0,
  /* 2619 */ 'W', '1', '8', '_', 'W', '1', '9', 0,
  /* 2627 */ 'X', '1', '8', '_', 'X', '1', '9', 0,
  /* 2635 */ 'Z', '1', '6', '_', 'Z', '1', '7', '_', 'Z', '1', '8', '_', 'Z', '1', '9', 0,
  /* 2651 */ 'b', '1', '9', 0,
  /* 2655 */ 'd', '1', '9', 0,
  /* 2659 */ 'h', '1', '9', 0,
  /* 2663 */ 'q', '1', '9', 0,
  /* 2667 */ 's', '1', '9', 0,
  /* 2671 */ 'w', '1', '9', 0,
  /* 2675 */ 'x', '1', '9', 0,
  /* 2679 */ 'z', '1', '9', 0,
  /* 2683 */ 'D', '2', '6', '_', 'D', '2', '7', '_', 'D', '2', '8', '_', 'D', '2', '9', 0,
  /* 2699 */ 'Q', '2', '6', '_', 'Q', '2', '7', '_', 'Q', '2', '8', '_', 'Q', '2', '9', 0,
  /* 2715 */ 'W', '2', '8', '_', 'W', '2', '9', 0,
  /* 2723 */ 'Z', '2', '6', '_', 'Z', '2', '7', '_', 'Z', '2', '8', '_', 'Z', '2', '9', 0,
  /* 2739 */ 'b', '2', '9', 0,
  /* 2743 */ 'd', '2', '9', 0,
  /* 2747 */ 'h', '2', '9', 0,
  /* 2751 */ 'q', '2', '9', 0,
  /* 2755 */ 's', '2', '9', 0,
  /* 2759 */ 'w', '2', '9', 0,
  /* 2763 */ 'x', '2', '9', 0,
  /* 2767 */ 'z', '2', '9', 0,
  /* 2771 */ 'D', '6', '_', 'D', '7', '_', 'D', '8', '_', 'D', '9', 0,
  /* 2783 */ 'Q', '6', '_', 'Q', '7', '_', 'Q', '8', '_', 'Q', '9', 0,
  /* 2795 */ 'W', '8', '_', 'W', '9', 0,
  /* 2801 */ 'X', '8', '_', 'X', '9', 0,
  /* 2807 */ 'Z', '6', '_', 'Z', '7', '_', 'Z', '8', '_', 'Z', '9', 0,
  /* 2819 */ 'b', '9', 0,
  /* 2822 */ 'd', '9', 0,
  /* 2825 */ 'h', '9', 0,
  /* 2828 */ 'p', '9', 0,
  /* 2831 */ 'q', '9', 0,
  /* 2834 */ 's', '9', 0,
  /* 2837 */ 'w', '9', 0,
  /* 2840 */ 'x', '9', 0,
  /* 2843 */ 'z', '9', 0,
  /* 2846 */ 'X', '2', '8', '_', 'F', 'P', 0,
  /* 2853 */ 'F', 'P', '_', 'L', 'R', 0,
  /* 2859 */ 'W', '3', '0', '_', 'W', 'Z', 'R', 0,
  /* 2867 */ 'L', 'R', '_', 'X', 'Z', 'R', 0,
  /* 2874 */ 'z', '1', '0', '_', 'h', 'i', 0,
  /* 2881 */ 'z', '2', '0', '_', 'h', 'i', 0,
  /* 2888 */ 'z', '3', '0', '_', 'h', 'i', 0,
  /* 2895 */ 'z', '0', '_', 'h', 'i', 0,
  /* 2901 */ 'z', '1', '1', '_', 'h', 'i', 0,
  /* 2908 */ 'z', '2', '1', '_', 'h', 'i', 0,
  /* 2915 */ 'z', '3', '1', '_', 'h', 'i', 0,
  /* 2922 */ 'z', '1', '_', 'h', 'i', 0,
  /* 2928 */ 'z', '1', '2', '_', 'h', 'i', 0,
  /* 2935 */ 'z', '2', '2', '_', 'h', 'i', 0,
  /* 2942 */ 'z', '2', '_', 'h', 'i', 0,
  /* 2948 */ 'z', '1', '3', '_', 'h', 'i', 0,
  /* 2955 */ 'z', '2', '3', '_', 'h', 'i', 0,
  /* 2962 */ 'z', '3', '_', 'h', 'i', 0,
  /* 2968 */ 'z', '1', '4', '_', 'h', 'i', 0,
  /* 2975 */ 'z', '2', '4', '_', 'h', 'i', 0,
  /* 2982 */ 'z', '4', '_', 'h', 'i', 0,
  /* 2988 */ 'z', '1', '5', '_', 'h', 'i', 0,
  /* 2995 */ 'z', '2', '5', '_', 'h', 'i', 0,
  /* 3002 */ 'z', '5', '_', 'h', 'i', 0,
  /* 3008 */ 'z', '1', '6', '_', 'h', 'i', 0,
  /* 3015 */ 'z', '2', '6', '_', 'h', 'i', 0,
  /* 3022 */ 'z', '6', '_', 'h', 'i', 0,
  /* 3028 */ 'z', '1', '7', '_', 'h', 'i', 0,
  /* 3035 */ 'z', '2', '7', '_', 'h', 'i', 0,
  /* 3042 */ 'z', '7', '_', 'h', 'i', 0,
  /* 3048 */ 'z', '1', '8', '_', 'h', 'i', 0,
  /* 3055 */ 'z', '2', '8', '_', 'h', 'i', 0,
  /* 3062 */ 'z', '8', '_', 'h', 'i', 0,
  /* 3068 */ 'z', '1', '9', '_', 'h', 'i', 0,
  /* 3075 */ 'z', '2', '9', '_', 'h', 'i', 0,
  /* 3082 */ 'z', '9', '_', 'h', 'i', 0,
  /* 3088 */ 'w', 's', 'p', 0,
  /* 3092 */ 'f', 'f', 'r', 0,
  /* 3096 */ 'w', 'z', 'r', 0,
  /* 3100 */ 'x', 'z', 'r', 0,
  /* 3104 */ 'n', 'z', 'c', 'v', 0,
  };

  static const uint16_t RegAsmOffsetNoRegAltName[] = {
    3092, 2763, 265, 3104, 3089, 3088, 3096, 3100, 332, 675, 946, 1217, 1488, 1759, 
    2026, 2293, 2560, 2819, 53, 417, 763, 1037, 1308, 1579, 1850, 2117, 2384, 2651, 
    153, 517, 863, 1137, 1408, 1679, 1946, 2213, 2480, 2739, 241, 597, 335, 678, 
    949, 1220, 1491, 1762, 2029, 2296, 2563, 2822, 57, 421, 767, 1041, 1312, 1583, 
    1854, 2121, 2388, 2655, 157, 521, 867, 1141, 1412, 1683, 1950, 2217, 2484, 2743, 
    245, 601, 338, 681, 952, 1223, 1494, 1765, 2032, 2299, 2566, 2825, 61, 425, 
    771, 1045, 1316, 1587, 1858, 2125, 2392, 2659, 161, 525, 871, 1145, 1416, 1687, 
    1954, 2221, 2488, 2747, 249, 605, 341, 684, 955, 1226, 1497, 1768, 2035, 2302, 
    2569, 2828, 65, 429, 775, 1049, 1320, 1591, 344, 687, 958, 1229, 1500, 1771, 
    2038, 2305, 2572, 2831, 69, 433, 779, 1053, 1324, 1595, 1862, 2129, 2396, 2663, 
    165, 529, 875, 1149, 1420, 1691, 1958, 2225, 2492, 2751, 253, 609, 347, 690, 
    961, 1232, 1503, 1774, 2041, 2308, 2575, 2834, 73, 437, 783, 1057, 1328, 1599, 
    1866, 2133, 2400, 2667, 169, 533, 879, 1153, 1424, 1695, 1962, 2229, 2496, 2755, 
    257, 613, 350, 693, 964, 1235, 1506, 1777, 2044, 2311, 2578, 2837, 77, 441, 
    787, 1061, 1332, 1603, 1870, 2137, 2404, 2671, 173, 537, 883, 1157, 1428, 1699, 
    1966, 2233, 2500, 2759, 261, 353, 696, 967, 1238, 1509, 1780, 2047, 2314, 2581, 
    2840, 81, 445, 791, 1065, 1336, 1607, 1874, 2141, 2408, 2675, 177, 541, 887, 
    1161, 1432, 1703, 1970, 2237, 2504, 356, 699, 970, 1241, 1512, 1783, 2050, 2317, 
    2584, 2843, 85, 449, 795, 1069, 1340, 1611, 1878, 2145, 2412, 2679, 181, 545, 
    891, 1165, 1436, 1707, 1974, 2241, 2508, 2767, 269, 617, 2895, 2922, 2942, 2962, 
    2982, 3002, 3022, 3042, 3062, 3082, 2874, 2901, 2928, 2948, 2968, 2988, 3008, 3028, 
    3048, 3068, 2881, 2908, 2935, 2955, 2975, 2995, 3015, 3035, 3055, 3075, 2888, 2915, 
    629, 902, 1175, 1446, 1717, 1984, 2251, 2518, 2777, 6, 365, 709, 981, 1252, 
    1523, 1794, 2061, 2328, 2595, 97, 461, 807, 1081, 1352, 1623, 1890, 2157, 2424, 
    2691, 193, 557, 281, 1169, 1440, 1711, 1978, 2245, 2512, 2771, 0, 359, 702, 
    973, 1244, 1515, 1786, 2053, 2320, 2587, 89, 453, 799, 1073, 1344, 1615, 1882, 
    2149, 2416, 2683, 185, 549, 273, 621, 895, 899, 1172, 1443, 1714, 1981, 2248, 
    2515, 2774, 3, 362, 705, 977, 1248, 1519, 1790, 2057, 2324, 2591, 93, 457, 
    803, 1077, 1348, 1619, 1886, 2153, 2420, 2687, 189, 553, 277, 625, 643, 915, 
    1187, 1458, 1729, 1996, 2263, 2530, 2789, 19, 379, 724, 997, 1268, 1539, 1810, 
    2077, 2344, 2611, 113, 477, 823, 1097, 1368, 1639, 1906, 2173, 2440, 2707, 209, 
    573, 296, 1181, 1452, 1723, 1990, 2257, 2524, 2783, 13, 373, 717, 989, 1260, 
    1531, 1802, 2069, 2336, 2603, 105, 469, 815, 1089, 1360, 1631, 1898, 2165, 2432, 
    2699, 201, 565, 288, 635, 908, 912, 1184, 1455, 1726, 1993, 2260, 2527, 2786, 
    16, 376, 720, 993, 1264, 1535, 1806, 2073, 2340, 2607, 109, 473, 819, 1093, 
    1364, 1635, 1902, 2169, 2436, 2703, 205, 569, 292, 639, 303, 2859, 649, 921, 
    1193, 1464, 1735, 2002, 2269, 2536, 2795, 26, 387, 732, 1005, 1276, 1547, 1818, 
    2085, 2352, 2619, 121, 485, 831, 1105, 1376, 1647, 1914, 2181, 2448, 2715, 217, 
    2853, 2867, 310, 2846, 655, 927, 1199, 1470, 1741, 2008, 2275, 2542, 2801, 33, 
    395, 740, 1013, 1284, 1555, 1826, 2093, 2360, 2627, 129, 493, 839, 1113, 1384, 
    1655, 1922, 2189, 2456, 669, 940, 1211, 1482, 1753, 2020, 2287, 2554, 2813, 46, 
    409, 755, 1029, 1300, 1571, 1842, 2109, 2376, 2643, 145, 509, 855, 1129, 1400, 
    1671, 1938, 2205, 2472, 2731, 233, 589, 325, 1205, 1476, 1747, 2014, 2281, 2548, 
    2807, 40, 403, 748, 1021, 1292, 1563, 1834, 2101, 2368, 2635, 137, 501, 847, 
    1121, 1392, 1663, 1930, 2197, 2464, 2723, 225, 581, 317, 661, 933, 937, 1208, 
    1479, 1750, 2017, 2284, 2551, 2810, 43, 406, 751, 1025, 1296, 1567, 1838, 2105, 
    2372, 2639, 141, 505, 851, 1125, 1396, 1667, 1934, 2201, 2468, 2727, 229, 585, 
    321, 665, 
  };

  static const char AsmStrsvlist1[] = {
  /* 0 */ 0,
  };

  static const uint8_t RegAsmOffsetvlist1[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 
  };

  static const char AsmStrsvreg[] = {
  /* 0 */ 'v', '1', '0', 0,
  /* 4 */ 'v', '2', '0', 0,
  /* 8 */ 'v', '3', '0', 0,
  /* 12 */ 'v', '0', 0,
  /* 15 */ 'v', '1', '1', 0,
  /* 19 */ 'v', '2', '1', 0,
  /* 23 */ 'v', '3', '1', 0,
  /* 27 */ 'v', '1', 0,
  /* 30 */ 'v', '1', '2', 0,
  /* 34 */ 'v', '2', '2', 0,
  /* 38 */ 'v', '2', 0,
  /* 41 */ 'v', '1', '3', 0,
  /* 45 */ 'v', '2', '3', 0,
  /* 49 */ 'v', '3', 0,
  /* 52 */ 'v', '1', '4', 0,
  /* 56 */ 'v', '2', '4', 0,
  /* 60 */ 'v', '4', 0,
  /* 63 */ 'v', '1', '5', 0,
  /* 67 */ 'v', '2', '5', 0,
  /* 71 */ 'v', '5', 0,
  /* 74 */ 'v', '1', '6', 0,
  /* 78 */ 'v', '2', '6', 0,
  /* 82 */ 'v', '6', 0,
  /* 85 */ 'v', '1', '7', 0,
  /* 89 */ 'v', '2', '7', 0,
  /* 93 */ 'v', '7', 0,
  /* 96 */ 'v', '1', '8', 0,
  /* 100 */ 'v', '2', '8', 0,
  /* 104 */ 'v', '8', 0,
  /* 107 */ 'v', '1', '9', 0,
  /* 111 */ 'v', '2', '9', 0,
  /* 115 */ 'v', '9', 0,
  };

  static const uint8_t RegAsmOffsetvreg[] = {
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 
    38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 
    74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 
    8, 23, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 12, 27, 38, 49, 60, 71, 
    82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 
    4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 
    52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 
    100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 
    0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 
    56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 
    82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 
    4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 12, 27, 
    38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 30, 41, 52, 63, 
    74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 78, 89, 100, 111, 
    8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 104, 115, 0, 15, 
    30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 34, 45, 56, 67, 
    78, 89, 100, 111, 8, 23, 12, 27, 38, 49, 60, 71, 82, 93, 
    104, 115, 0, 15, 30, 41, 52, 63, 74, 85, 96, 107, 4, 19, 
    34, 45, 56, 67, 78, 89, 100, 111, 8, 23, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AArch64::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AArch64::vlist1:
    assert(*(AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvlist1+RegAsmOffsetvlist1[RegNo-1];
  case AArch64::vreg:
    assert(*(AsmStrsvreg+RegAsmOffsetvreg[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsvreg+RegAsmOffsetvreg[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool AArch64InstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case AArch64::ADDSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (ADDSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmn	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::ADDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::ADDSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmn	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ADDSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmn	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "adds	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sponly:$dst, GPR32sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWri GPR32sp:$dst, GPR32sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (ADDWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sponly:$dst, GPR64sp:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXri GPR64sp:$dst, GPR64sponly:$src, 0, 0)
      AsmString = "mov $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::ADDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ADDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ADDXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (ADDXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "add	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSWri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSWri WZR, GPR32:$src1, logical_imm32:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ANDSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSWrs WZR, GPR32:$src1, GPR32:$src2, logical_shift32:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDSXri:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (ANDSXri XZR, GPR64:$src1, logical_imm64:$src2)
      AsmString = "tst $\x02, $\xFF\x03\x05";
      break;
    }
    return false;
  case AArch64::ANDSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "tst $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ANDSXrs XZR, GPR64:$src1, GPR64:$src2, logical_shift64:$sh)
      AsmString = "tst $\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "ands	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ANDXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ANDXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "and	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::AND_ZI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (AND_ZI ZPR8:$Zdn, sve_logical_imm8:$imm)
      AsmString = "and	$\xFF\x01\x06, $\xFF\x01\x06, $\xFF\x03\x07";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (AND_ZI ZPR16:$Zdn, sve_logical_imm16:$imm)
      AsmString = "and	$\xFF\x01\x08, $\xFF\x01\x08, $\xFF\x03\x09";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (AND_ZI ZPR32:$Zdn, sve_logical_imm32:$imm)
      AsmString = "and	$\xFF\x01\x0A, $\xFF\x01\x0A, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::BICSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bics	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::BICXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (BICXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "bic	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::CLREX:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (CLREX 15)
      AsmString = "clrex";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_B:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_B ZPR8:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i8:$imm)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x03\x0D/m, $\xFF\x04\x0E";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_D:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_D ZPR64:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i64:$imm)
      AsmString = "mov $\xFF\x01\x0F, $\xFF\x03\x0D/m, $\xFF\x04\x10";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_H:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_H ZPR16:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i16:$imm)
      AsmString = "mov $\xFF\x01\x08, $\xFF\x03\x0D/m, $\xFF\x04\x11";
      break;
    }
    return false;
  case AArch64::CPY_ZPmI_S:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPmI_S ZPR32:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i32:$imm)
      AsmString = "mov $\xFF\x01\x0A, $\xFF\x03\x0D/m, $\xFF\x04\x12";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_B:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_B ZPR8:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i8:$imm)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x0D/z, $\xFF\x03\x0E";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_D ZPR64:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i64:$imm)
      AsmString = "mov $\xFF\x01\x0F, $\xFF\x02\x0D/z, $\xFF\x03\x10";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_H:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_H ZPR16:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i16:$imm)
      AsmString = "mov $\xFF\x01\x08, $\xFF\x02\x0D/z, $\xFF\x03\x11";
      break;
    }
    return false;
  case AArch64::CPY_ZPzI_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (CPY_ZPzI_S ZPR32:$Zd, PPRAny:$Pg, cpy_imm8_opt_lsl_i32:$imm)
      AsmString = "mov $\xFF\x01\x0A, $\xFF\x02\x0D/z, $\xFF\x03\x12";
      break;
    }
    return false;
  case AArch64::CSINCWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x13";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x13";
      break;
    }
    return false;
  case AArch64::CSINCXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "cset $\x01, $\xFF\x04\x13";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINCXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinc $\x01, $\x02, $\xFF\x04\x13";
      break;
    }
    return false;
  case AArch64::CSINVWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).getReg() == AArch64::WZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVWr GPR32:$dst, WZR, WZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x13";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x13";
      break;
    }
    return false;
  case AArch64::CSINVXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).getReg() == AArch64::XZR &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVXr GPR64:$dst, XZR, XZR, inv_ccode:$cc)
      AsmString = "csetm $\x01, $\xFF\x04\x13";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSINVXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cinv $\x01, $\x02, $\xFF\x04\x13";
      break;
    }
    return false;
  case AArch64::CSNEGWr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSNEGWr GPR32:$dst, GPR32:$src, GPR32:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x13";
      break;
    }
    return false;
  case AArch64::CSNEGXr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(3), STI, 4)) {
      // (CSNEGXr GPR64:$dst, GPR64:$src, GPR64:$src, inv_ccode:$cc)
      AsmString = "cneg $\x01, $\x02, $\xFF\x04\x13";
      break;
    }
    return false;
  case AArch64::DCPS1:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS1 0)
      AsmString = "dcps1";
      break;
    }
    return false;
  case AArch64::DCPS2:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS2 0)
      AsmString = "dcps2";
      break;
    }
    return false;
  case AArch64::DCPS3:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (DCPS3 0)
      AsmString = "dcps3";
      break;
    }
    return false;
  case AArch64::DUPM_ZI:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 5) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR16:$Zd, sve_preferred_logical_imm16:$imm)
      AsmString = "mov $\xFF\x01\x08, $\xFF\x02\x14";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 6) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR32:$Zd, sve_preferred_logical_imm32:$imm)
      AsmString = "mov $\xFF\x01\x0A, $\xFF\x02\x15";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 7) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR64:$Zd, sve_preferred_logical_imm64:$imm)
      AsmString = "mov $\xFF\x01\x0F, $\xFF\x02\x16";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR8:$Zd, sve_logical_imm8:$imm)
      AsmString = "dupm $\xFF\x01\x06, $\xFF\x02\x07";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR16:$Zd, sve_logical_imm16:$imm)
      AsmString = "dupm $\xFF\x01\x08, $\xFF\x02\x09";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(1), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUPM_ZI ZPR32:$Zd, sve_logical_imm32:$imm)
      AsmString = "dupm $\xFF\x01\x0A, $\xFF\x02\x04";
      break;
    }
    return false;
  case AArch64::DUP_ZI_B:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_B ZPR8:$Zd, cpy_imm8_opt_lsl_i8:$imm)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x0E";
      break;
    }
    return false;
  case AArch64::DUP_ZI_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_D ZPR64:$Zd, cpy_imm8_opt_lsl_i64:$imm)
      AsmString = "mov $\xFF\x01\x0F, $\xFF\x02\x10";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_D ZPR64:$Zd, 0, 0)
      AsmString = "fmov $\xFF\x01\x0F, #0.0";
      break;
    }
    return false;
  case AArch64::DUP_ZI_H:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_H ZPR16:$Zd, cpy_imm8_opt_lsl_i16:$imm)
      AsmString = "mov $\xFF\x01\x08, $\xFF\x02\x11";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_H ZPR16:$Zd, 0, 0)
      AsmString = "fmov $\xFF\x01\x08, #0.0";
      break;
    }
    return false;
  case AArch64::DUP_ZI_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_S ZPR32:$Zd, cpy_imm8_opt_lsl_i32:$imm)
      AsmString = "mov $\xFF\x01\x0A, $\xFF\x02\x12";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZI_S ZPR32:$Zd, 0, 0)
      AsmString = "fmov $\xFF\x01\x0A, #0.0";
      break;
    }
    return false;
  case AArch64::DUP_ZR_B:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_B ZPR8:$Zd, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x06, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZR_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_D ZPR64:$Zd, GPR64sp:$Rn)
      AsmString = "mov $\xFF\x01\x0F, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZR_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_H ZPR16:$Zd, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x08, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZR_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZR_S ZPR32:$Zd, GPR32sp:$Rn)
      AsmString = "mov $\xFF\x01\x0A, $\x02";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_B:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_B ZPR8:$Zd, FPR8asZPR:$Bn, 0)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x17";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_B ZPR8:$Zd, ZPR8:$Zn, sve_elm_idx_extdup_b:$idx)
      AsmString = "mov $\xFF\x01\x06, $\xFF\x02\x06$\xFF\x03\x18";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_D:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_D ZPR64:$Zd, FPR64asZPR:$Dn, 0)
      AsmString = "mov $\xFF\x01\x0F, $\xFF\x02\x19";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_D ZPR64:$Zd, ZPR64:$Zn, sve_elm_idx_extdup_d:$idx)
      AsmString = "mov $\xFF\x01\x0F, $\xFF\x02\x0F$\xFF\x03\x18";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_H:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_H ZPR16:$Zd, FPR16asZPR:$Hn, 0)
      AsmString = "mov $\xFF\x01\x08, $\xFF\x02\x1A";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_H ZPR16:$Zd, ZPR16:$Zn, sve_elm_idx_extdup_h:$idx)
      AsmString = "mov $\xFF\x01\x08, $\xFF\x02\x08$\xFF\x03\x18";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_Q:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_Q ZPR128:$Zd, FPR128asZPR:$Qn, 0)
      AsmString = "mov $\xFF\x01\x1B, $\xFF\x02\x1C";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_Q ZPR128:$Zd, ZPR128:$Zn, sve_elm_idx_extdup_q:$idx)
      AsmString = "mov $\xFF\x01\x1B, $\xFF\x02\x1B$\xFF\x03\x18";
      break;
    }
    return false;
  case AArch64::DUP_ZZI_S:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_S ZPR32:$Zd, FPR32asZPR:$Sn, 0)
      AsmString = "mov $\xFF\x01\x0A, $\xFF\x02\x1D";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (DUP_ZZI_S ZPR32:$Zd, ZPR32:$Zn, sve_elm_idx_extdup_s:$idx)
      AsmString = "mov $\xFF\x01\x0A, $\xFF\x02\x0A$\xFF\x03\x18";
      break;
    }
    return false;
  case AArch64::EONWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EONXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EONXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eon	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EORXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (EORXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "eor	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::EOR_ZI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EOR_ZI ZPR8:$Zdn, sve_logical_imm8:$imm)
      AsmString = "eor	$\xFF\x01\x06, $\xFF\x01\x06, $\xFF\x03\x07";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EOR_ZI ZPR16:$Zdn, sve_logical_imm16:$imm)
      AsmString = "eor	$\xFF\x01\x08, $\xFF\x01\x08, $\xFF\x03\x09";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (EOR_ZI ZPR32:$Zdn, sve_logical_imm32:$imm)
      AsmString = "eor	$\xFF\x01\x0A, $\xFF\x01\x0A, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::EXTRWrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRWrri GPR32:$dst, GPR32:$src, GPR32:$src, imm0_31:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::EXTRXrri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (EXTRXrri GPR64:$dst, GPR64:$src, GPR64:$src, imm0_63:$shift)
      AsmString = "ror $\x01, $\x02, $\x04";
      break;
    }
    return false;
  case AArch64::FCPY_ZPmI_D:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FCPY_ZPmI_D ZPR64:$Zd, PPRAny:$Pg, fpimm64:$imm8)
      AsmString = "fmov $\xFF\x01\x0F, $\xFF\x03\x0D/m, $\xFF\x04\x1E";
      break;
    }
    return false;
  case AArch64::FCPY_ZPmI_H:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FCPY_ZPmI_H ZPR16:$Zd, PPRAny:$Pg, fpimm16:$imm8)
      AsmString = "fmov $\xFF\x01\x08, $\xFF\x03\x0D/m, $\xFF\x04\x1E";
      break;
    }
    return false;
  case AArch64::FCPY_ZPmI_S:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FCPY_ZPmI_S ZPR32:$Zd, PPRAny:$Pg, fpimm32:$imm8)
      AsmString = "fmov $\xFF\x01\x0A, $\xFF\x03\x0D/m, $\xFF\x04\x1E";
      break;
    }
    return false;
  case AArch64::FDUP_ZI_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FDUP_ZI_D ZPR64:$Zd, fpimm64:$imm8)
      AsmString = "fmov $\xFF\x01\x0F, $\xFF\x02\x1E";
      break;
    }
    return false;
  case AArch64::FDUP_ZI_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FDUP_ZI_H ZPR16:$Zd, fpimm16:$imm8)
      AsmString = "fmov $\xFF\x01\x08, $\xFF\x02\x1E";
      break;
    }
    return false;
  case AArch64::FDUP_ZI_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (FDUP_ZI_S ZPR32:$Zd, fpimm32:$imm8)
      AsmString = "fmov $\xFF\x01\x0A, $\xFF\x02\x1E";
      break;
    }
    return false;
  case AArch64::GLD1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1b	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLD1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1b	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLD1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLD1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1h	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLD1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1h	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLD1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1sb	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLD1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1sb	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLD1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1sh	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLD1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1sh	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLD1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1sw	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLD1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ld1w	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLD1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLD1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ld1w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLDFF1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1b	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLDFF1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1b	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLDFF1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLDFF1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1h	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLDFF1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1h	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLDFF1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1sb	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLDFF1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1sb	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLDFF1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1sh	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLDFF1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1sh	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::GLDFF1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1sw	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLDFF1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "ldff1w	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::GLDFF1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (GLDFF1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "ldff1w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::HINT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (HINT { 0, 0, 0 })
      AsmString = "nop";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (HINT { 0, 0, 1 })
      AsmString = "yield";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (HINT { 0, 1, 0 })
      AsmString = "wfe";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 3) {
      // (HINT { 0, 1, 1 })
      AsmString = "wfi";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4) {
      // (HINT { 1, 0, 0 })
      AsmString = "sev";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 5) {
      // (HINT { 1, 0, 1 })
      AsmString = "sevl";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        STI.getFeatureBits()[AArch64::FeatureRAS]) {
      // (HINT { 1, 0, 0, 0, 0 })
      AsmString = "esb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 20) {
      // (HINT 20)
      AsmString = "csdb";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(0), STI, 8) &&
        STI.getFeatureBits()[AArch64::FeatureSPE]) {
      // (HINT psbhint_op:$op)
      AsmString = "psb $\xFF\x01\x21";
      break;
    }
    return false;
  case AArch64::INSvi16gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16gpr V128:$dst, VectorIndexH:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x0B.h$\xFF\x03\x18, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi16lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi16lane V128:$dst, VectorIndexH:$idx, V128:$src, VectorIndexH:$idx2)
      AsmString = "mov	$\xFF\x01\x0B.h$\xFF\x03\x18, $\xFF\x04\x0B.h$\xFF\x05\x18";
      break;
    }
    return false;
  case AArch64::INSvi32gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32gpr V128:$dst, VectorIndexS:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x0B.s$\xFF\x03\x18, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi32lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi32lane V128:$dst, VectorIndexS:$idx, V128:$src, VectorIndexS:$idx2)
      AsmString = "mov	$\xFF\x01\x0B.s$\xFF\x03\x18, $\xFF\x04\x0B.s$\xFF\x05\x18";
      break;
    }
    return false;
  case AArch64::INSvi64gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64gpr V128:$dst, VectorIndexD:$idx, GPR64:$src)
      AsmString = "mov	$\xFF\x01\x0B.d$\xFF\x03\x18, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi64lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi64lane V128:$dst, VectorIndexD:$idx, V128:$src, VectorIndexD:$idx2)
      AsmString = "mov	$\xFF\x01\x0B.d$\xFF\x03\x18, $\xFF\x04\x0B.d$\xFF\x05\x18";
      break;
    }
    return false;
  case AArch64::INSvi8gpr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8gpr V128:$dst, VectorIndexB:$idx, GPR32:$src)
      AsmString = "mov	$\xFF\x01\x0B.b$\xFF\x03\x18, $\x04";
      break;
    }
    return false;
  case AArch64::INSvi8lane:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(3).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(3).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (INSvi8lane V128:$dst, VectorIndexB:$idx, V128:$src, VectorIndexB:$idx2)
      AsmString = "mov	$\xFF\x01\x0B.b$\xFF\x03\x18, $\xFF\x04\x0B.b$\xFF\x05\x18";
      break;
    }
    return false;
  case AArch64::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  case AArch64::LD1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1B_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1B_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_IMM_REAL Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1b	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x24, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x25, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1h	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1h	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1h	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x24, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x25, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1RB_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RB_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RB_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_IMM Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RB_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RB_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rb	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RD_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RD_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rd	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RH_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RH_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rh	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RH_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RH_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rh	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RH_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RH_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rh	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_B_IMM Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqb	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqd	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqh	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RQ_W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RQ_W_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rqw	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSB_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSB_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsb	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSB_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSB_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsb	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSB_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSB_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsb	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSH_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSH_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsh	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSH_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSH_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsh	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RSW_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RSW_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rsw	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RW_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RW_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rw	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1RW_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1RW_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1rw	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x24, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x25, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x26, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x27, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x28, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x29, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x2A, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD1Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Rv8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "ld1r	$\xFF\x02\x2B, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sb	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SB_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SB_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sb	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sb	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sh	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sh	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1sw	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x24, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x25, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x24, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x25, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x28, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld1	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1w	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld1w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD1i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x2C$\xFF\x04\x18, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD1i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x2D$\xFF\x04\x18, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD1i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x2E$\xFF\x04\x18, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD1i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld1	$\xFF\x02\x2F$\xFF\x04\x18, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::LD2B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2B_IMM ZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2b	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2D_IMM ZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2H_IMM ZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2h	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x24, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x25, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x26, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x27, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x28, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x29, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x2A, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD2Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Rv8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2r	$\xFF\x02\x2B, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x24, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x28, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "ld2	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD2W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD2W_IMM ZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld2w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD2i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x2C$\xFF\x04\x18, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD2i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x2D$\xFF\x04\x18, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD2i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x2E$\xFF\x04\x18, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD2i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld2	$\xFF\x02\x2F$\xFF\x04\x18, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::LD3B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3B_IMM ZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3b	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3D_IMM ZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3H_IMM ZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3h	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x24, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x25, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x26, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x27, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x28, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x29, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x2A, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD3Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Rv8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3r	$\xFF\x02\x2B, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x24, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x27, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x28, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x29, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "ld3	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::LD3W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD3W_IMM ZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld3w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD3i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x2C$\xFF\x04\x18, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::LD3i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x2D$\xFF\x04\x18, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::LD3i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x2E$\xFF\x04\x18, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::LD3i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld3	$\xFF\x02\x2F$\xFF\x04\x18, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::LD4B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4B_IMM ZZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4b	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4D_IMM ZZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x24, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x27, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x29, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::LD4H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4H_IMM ZZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4h	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4Rv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x24, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x25, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4Rv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x28, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4Rv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4Rv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x2A, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LD4Rv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4Rv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "ld4r	$\xFF\x02\x2B, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LD4W_IMM ZZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ld4w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LD4i16_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x2C$\xFF\x04\x18, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::LD4i32_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x2D$\xFF\x04\x18, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::LD4i64_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x2E$\xFF\x04\x18, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::LD4i8_POST:
    if (MI->getNumOperands() == 6 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(5).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (LD4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "ld4	$\xFF\x02\x2F$\xFF\x04\x18, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::LDADDB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "staddl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDADDX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDADDX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stadd	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclrl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDCLRX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDCLRX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stclr	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steorl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDEORX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDEORX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "steor	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_H_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_H_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_REAL Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1B_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1B_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1b	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1H_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1H_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1h	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1H_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1H_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1h	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1H_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1H_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1h	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SB_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SB_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sb	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SB_H_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SB_H_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sb	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SB_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SB_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sb	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SH_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SH_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sh	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SH_S_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SH_S_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sh	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1SW_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1SW_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1sw	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1W_D_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1W_D_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1w	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDFF1W_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDFF1W_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, XZR)
      AsmString = "ldff1w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1B_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1B_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1B_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_IMM_REAL Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1B_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1B_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1b	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1H_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1H_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1h	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1h	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1H_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1H_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1h	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SB_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SB_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sb	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SB_H_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SB_H_IMM_REAL Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sb	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SB_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SB_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sb	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SH_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SH_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sh	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SH_S_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SH_S_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sh	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1SW_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1SW_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1sw	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1W_D_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1W_D_IMM_REAL Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1w	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNF1W_IMM_REAL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNF1W_IMM_REAL Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnf1w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDNPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1B_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1B_ZRI Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1b	$\xFF\x01\x23, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1D_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1D_ZRI Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1d	$\xFF\x01\x1F, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1H_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1H_ZRI Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1h	$\xFF\x01\x22, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDNT1W_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDNT1W_ZRI Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "ldnt1w	$\xFF\x01\x20, $\xFF\x02\x0D/z, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSWi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldpsw	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (LDPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "ldp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDRAAindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRAAindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldraa	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRABindexed:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::HasV8_3aOps]) {
      // (LDRABindexed GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrab	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBBui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRBroX FPR8Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRBui FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRDroX FPR64Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRDui FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHHui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRHroX FPR16Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRHui FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRQroX FPR128Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRQui FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSBXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSBXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSBXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSBXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHWui GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSHXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSHXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSHXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSHXui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSWroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldrsw	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSWui GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRSroX FPR32Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRSui FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRWui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (LDRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "ldr	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::LDRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDRXui GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDR_PXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDR_PXI PPRAny:$Pt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\xFF\x01\x0D, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDR_ZXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (LDR_ZXI ZPRAny:$Zt, GPR64sp:$Rn, 0)
      AsmString = "ldr	$\xFF\x01\x0D, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDSETB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stseth	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsetl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSETX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSETX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stset	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDSMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDSMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stsmin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtrsw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldtr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDUMAXB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumaxl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMAXX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMAXX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumax	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLB:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLB WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlb	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLH:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLH WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminlh	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINLX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINLX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stuminl	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINW WZR, GPR32:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDUMINX:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureLSE]) {
      // (LDUMINX XZR, GPR64:$Rs, GPR64sp:$Rn)
      AsmString = "stumin	$\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::LDURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURBi FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURDi FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldurh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURHi FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURQi FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSBXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSBXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSHXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSHXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSWi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldursw	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURSi FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURWi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::LDURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (LDURXi GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "ldur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::MADDWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MADDWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MADDXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MADDXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mul	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBWrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::WZR) {
      // (MSUBWrrr GPR32:$dst, GPR32:$src1, GPR32:$src2, WZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::MSUBXrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (MSUBXrrr GPR64:$dst, GPR64:$src1, GPR64:$src2, XZR)
      AsmString = "mneg	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::NOTv16i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv16i8 V128:$Vd, V128:$Vn)
      AsmString = "mvn $\xFF\x01\x0B.16b, $\xFF\x02\x0B.16b";
      break;
    }
    return false;
  case AArch64::NOTv8i8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg())) {
      // (NOTv8i8 V64:$Vd, V64:$Vn)
      AsmString = "mvn $\xFF\x01\x0B.8b, $\xFF\x02\x0B.8b";
      break;
    }
    return false;
  case AArch64::ORNWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNWrs GPR32:$Wd, WZR, GPR32:$Wm, logical_shift32:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORNXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, 0)
      AsmString = "mvn $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (ORNXrs GPR64:$Xd, XZR, GPR64:$Xm, logical_shift64:$sh)
      AsmString = "mvn $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORNXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orn	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORRXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "mov $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (ORRXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "orr	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::ORR_ZI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 1) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZI ZPR8:$Zdn, sve_logical_imm8:$imm)
      AsmString = "orr	$\xFF\x01\x06, $\xFF\x01\x06, $\xFF\x03\x07";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 2) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZI ZPR16:$Zdn, sve_logical_imm16:$imm)
      AsmString = "orr	$\xFF\x01\x08, $\xFF\x01\x08, $\xFF\x03\x09";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        AArch64InstPrinterValidateMCOperand(MI->getOperand(2), STI, 3) &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZI ZPR32:$Zdn, sve_logical_imm32:$imm)
      AsmString = "orr	$\xFF\x01\x0A, $\xFF\x01\x0A, $\xFF\x03\x04";
      break;
    }
    return false;
  case AArch64::ORR_ZZZ:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ORR_ZZZ ZPR64:$Zd, ZPR64:$Zn, ZPR64:$Zn)
      AsmString = "mov $\xFF\x01\x0F, $\xFF\x02\x0F";
      break;
    }
    return false;
  case AArch64::ORRv16i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv16i8 V128:$dst, V128:$src, V128:$src)
      AsmString = "mov	$\xFF\x01\x0B.16b, $\xFF\x02\x0B.16b";
      break;
    }
    return false;
  case AArch64::ORRv8i8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (ORRv8i8 V64:$dst, V64:$src, V64:$src)
      AsmString = "mov	$\xFF\x01\x0B.8b, $\xFF\x02\x0B.8b";
      break;
    }
    return false;
  case AArch64::PRFB_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFB_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfb	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::PRFB_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFB_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfb	$\xFF\x01\x31, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFB_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFB_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfb	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::PRFD_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFD_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfd	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::PRFD_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFD_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfd	$\xFF\x01\x31, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFD_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFD_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfd	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::PRFH_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFH_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfh	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::PRFH_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFH_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfh	$\xFF\x01\x31, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFH_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFH_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfh	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::PRFMroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (PRFMroX prfop:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "prfm $\xFF\x01\x32, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::PRFMui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFMui prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfm $\xFF\x01\x32, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFUMi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (PRFUMi prfop:$Rt, GPR64sp:$Rn, 0)
      AsmString = "prfum	$\xFF\x01\x32, [$\x02]";
      break;
    }
    return false;
  case AArch64::PRFW_D_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFW_D_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "prfw	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::PRFW_PRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFW_PRI sve_prfop:$prfop, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "prfw	$\xFF\x01\x31, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::PRFW_S_PZI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PRFW_S_PZI sve_prfop:$prfop, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "prfw	$\xFF\x01\x31, $\xFF\x02\x0D, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::PTRUES_B:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_B PPR8:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x06";
      break;
    }
    return false;
  case AArch64::PTRUES_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_D PPR64:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x0F";
      break;
    }
    return false;
  case AArch64::PTRUES_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_H PPR16:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x08";
      break;
    }
    return false;
  case AArch64::PTRUES_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUES_S PPR32:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrues	$\xFF\x01\x0A";
      break;
    }
    return false;
  case AArch64::PTRUE_B:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_B PPR8:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x06";
      break;
    }
    return false;
  case AArch64::PTRUE_D:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_D PPR64:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x0F";
      break;
    }
    return false;
  case AArch64::PTRUE_H:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_H PPR16:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x08";
      break;
    }
    return false;
  case AArch64::PTRUE_S:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 31 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (PTRUE_S PPR32:$Pd, { 1, 1, 1, 1, 1 })
      AsmString = "ptrue	$\xFF\x01\x0A";
      break;
    }
    return false;
  case AArch64::RET:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == AArch64::LR) {
      // (RET LR)
      AsmString = "ret";
      break;
    }
    return false;
  case AArch64::SBCSWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCSXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCSXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngcs $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCWr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCWr GPR32:$dst, WZR, GPR32:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBCXr:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SBCXr GPR64:$dst, XZR, GPR64:$src)
      AsmString = "ngc $\x01, $\x03";
      break;
    }
    return false;
  case AArch64::SBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (SBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "asr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "sxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "sxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (SBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "sxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::SMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (SMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "smnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SST1B_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1B_D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1b	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::SST1B_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1B_S_IMM Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "st1b	$\xFF\x01\x20, $\xFF\x02\x0D, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::SST1D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1d	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::SST1H_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1H_D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1h	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::SST1H_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1H_S_IMM Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "st1h	$\xFF\x01\x20, $\xFF\x02\x0D, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::SST1W_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1W_D_IMM Z_d:$Zt, PPR3bAny:$Pg, ZPR64:$Zn, 0)
      AsmString = "st1w	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\xFF\x03\x0F]";
      break;
    }
    return false;
  case AArch64::SST1W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (SST1W_IMM Z_s:$Zt, PPR3bAny:$Pg, ZPR32:$Zn, 0)
      AsmString = "st1w	$\xFF\x01\x20, $\xFF\x02\x0D, [$\xFF\x03\x0A]";
      break;
    }
    return false;
  case AArch64::ST1B_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1B_H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x22, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_IMM Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x23, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1B_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1B_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1b	$\xFF\x01\x20, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1d	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x24, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv1d_POST GPR64sp:$Rn, VecListFour1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x25, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST1H_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1H_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1h	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1H_IMM Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1h	$\xFF\x01\x22, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1H_S_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1H_S_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1h	$\xFF\x01\x20, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1Onev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev16b_POST GPR64sp:$Rn, VecListOne16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x24, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev1d_POST GPR64sp:$Rn, VecListOne1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x25, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2d_POST GPR64sp:$Rn, VecListOne2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev2s_POST GPR64sp:$Rn, VecListOne2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4h_POST GPR64sp:$Rn, VecListOne4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev4s_POST GPR64sp:$Rn, VecListOne4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Onev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8b_POST GPR64sp:$Rn, VecListOne8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1Onev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Onev8h_POST GPR64sp:$Rn, VecListOne8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x24, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev1d_POST GPR64sp:$Rn, VecListThree1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x25, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST1Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST1Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x24, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov1d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov1d_POST GPR64sp:$Rn, VecListTwo1d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x25, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x28, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST1Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st1	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST1W_D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1W_D_IMM Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1w	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST1W_IMM Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st1w	$\xFF\x01\x20, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST1i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i16_POST GPR64sp:$Rn, VecListOneh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x2C$\xFF\x03\x18, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST1i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i32_POST GPR64sp:$Rn, VecListOnes:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x2D$\xFF\x03\x18, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST1i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i64_POST GPR64sp:$Rn, VecListOned:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x2E$\xFF\x03\x18, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST1i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST1i8_POST GPR64sp:$Rn, VecListOneb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st1	$\xFF\x02\x2F$\xFF\x03\x18, [$\x01], #1";
      break;
    }
    return false;
  case AArch64::ST2B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2B_IMM ZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2b	$\xFF\x01\x23, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2D_IMM ZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2d	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2H_IMM ZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2h	$\xFF\x01\x22, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2Twov16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov16b_POST GPR64sp:$Rn, VecListTwo16b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x24, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2d_POST GPR64sp:$Rn, VecListTwo2d:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x26, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov2s_POST GPR64sp:$Rn, VecListTwo2s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x27, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4h_POST GPR64sp:$Rn, VecListTwo4h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x28, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov4s_POST GPR64sp:$Rn, VecListTwo4s:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x29, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2Twov8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8b_POST GPR64sp:$Rn, VecListTwo8b:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x2A, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2Twov8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2Twov8h_POST GPR64sp:$Rn, VecListTwo8h:$Vt, XZR)
      AsmString = "st2	$\xFF\x02\x2B, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST2W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR2RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST2W_IMM ZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st2w	$\xFF\x01\x20, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST2i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i16_POST GPR64sp:$Rn, VecListTwoh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x2C$\xFF\x03\x18, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::ST2i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i32_POST GPR64sp:$Rn, VecListTwos:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x2D$\xFF\x03\x18, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST2i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i64_POST GPR64sp:$Rn, VecListTwod:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x2E$\xFF\x03\x18, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST2i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST2i8_POST GPR64sp:$Rn, VecListTwob:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st2	$\xFF\x02\x2F$\xFF\x03\x18, [$\x01], #2";
      break;
    }
    return false;
  case AArch64::ST3B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3B_IMM ZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3b	$\xFF\x01\x23, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3D_IMM ZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3d	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3H_IMM ZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3h	$\xFF\x01\x22, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3Threev16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev16b_POST GPR64sp:$Rn, VecListThree16b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x24, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2d_POST GPR64sp:$Rn, VecListThree2d:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x26, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev2s_POST GPR64sp:$Rn, VecListThree2s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x27, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4h_POST GPR64sp:$Rn, VecListThree4h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x28, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev4s_POST GPR64sp:$Rn, VecListThree4s:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x29, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3Threev8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8b_POST GPR64sp:$Rn, VecListThree8b:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x2A, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3Threev8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3Threev8h_POST GPR64sp:$Rn, VecListThree8h:$Vt, XZR)
      AsmString = "st3	$\xFF\x02\x2B, [$\x01], #48";
      break;
    }
    return false;
  case AArch64::ST3W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR3RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST3W_IMM ZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st3w	$\xFF\x01\x20, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST3i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i16_POST GPR64sp:$Rn, VecListThreeh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x2C$\xFF\x03\x18, [$\x01], #6";
      break;
    }
    return false;
  case AArch64::ST3i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i32_POST GPR64sp:$Rn, VecListThrees:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x2D$\xFF\x03\x18, [$\x01], #12";
      break;
    }
    return false;
  case AArch64::ST3i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i64_POST GPR64sp:$Rn, VecListThreed:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x2E$\xFF\x03\x18, [$\x01], #24";
      break;
    }
    return false;
  case AArch64::ST3i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST3i8_POST GPR64sp:$Rn, VecListThreeb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st3	$\xFF\x02\x2F$\xFF\x03\x18, [$\x01], #3";
      break;
    }
    return false;
  case AArch64::ST4B_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4B_IMM ZZZZ_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4b	$\xFF\x01\x23, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4D_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4D_IMM ZZZZ_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4d	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4Fourv16b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv16b_POST GPR64sp:$Rn, VecListFour16b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x24, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2d_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2d_POST GPR64sp:$Rn, VecListFour2d:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x26, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv2s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv2s_POST GPR64sp:$Rn, VecListFour2s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x27, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4h_POST GPR64sp:$Rn, VecListFour4h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x28, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv4s_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv4s_POST GPR64sp:$Rn, VecListFour4s:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x29, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4Fourv8b_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::DDDDRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8b_POST GPR64sp:$Rn, VecListFour8b:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x2A, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4Fourv8h_POST:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4Fourv8h_POST GPR64sp:$Rn, VecListFour8h:$Vt, XZR)
      AsmString = "st4	$\xFF\x02\x2B, [$\x01], #64";
      break;
    }
    return false;
  case AArch64::ST4H_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4H_IMM ZZZZ_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4h	$\xFF\x01\x22, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4W_IMM:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPR4RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (ST4W_IMM ZZZZ_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "st4w	$\xFF\x01\x20, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::ST4i16_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i16_POST GPR64sp:$Rn, VecListFourh:$Vt, VectorIndexH:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x2C$\xFF\x03\x18, [$\x01], #8";
      break;
    }
    return false;
  case AArch64::ST4i32_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i32_POST GPR64sp:$Rn, VecListFours:$Vt, VectorIndexS:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x2D$\xFF\x03\x18, [$\x01], #16";
      break;
    }
    return false;
  case AArch64::ST4i64_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i64_POST GPR64sp:$Rn, VecListFourd:$Vt, VectorIndexD:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x2E$\xFF\x03\x18, [$\x01], #32";
      break;
    }
    return false;
  case AArch64::ST4i8_POST:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::QQQQRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(4).getReg() == AArch64::XZR &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (ST4i8_POST GPR64sp:$Rn, VecListFourb:$Vt, VectorIndexB:$idx, XZR)
      AsmString = "st4	$\xFF\x02\x2F$\xFF\x03\x18, [$\x01], #4";
      break;
    }
    return false;
  case AArch64::STNPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STNPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stnp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1B_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1B_ZRI Z_b:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1b	$\xFF\x01\x23, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1D_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1D_ZRI Z_d:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1d	$\xFF\x01\x1F, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1H_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1H_ZRI Z_h:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1h	$\xFF\x01\x22, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::STNT1W_ZRI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::PPR_3bRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STNT1W_ZRI Z_s:$Zt, PPR3bAny:$Pg, GPR64sp:$Rn, 0)
      AsmString = "stnt1w	$\xFF\x01\x20, $\xFF\x02\x0D, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPDi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPDi FPR64Op:$Rt, FPR64Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPQi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPQi FPR128Op:$Rt, FPR128Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPSi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPSi FPR32Op:$Rt, FPR32Op:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPWi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPWi GPR32z:$Rt, GPR32z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STPXi:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (STPXi GPR64z:$Rt, GPR64z:$Rt2, GPR64sp:$Rn, 0)
      AsmString = "stp	$\x01, $\x02, [$\x03]";
      break;
    }
    return false;
  case AArch64::STRBBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBBroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strb	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBBui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRBroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRBroX FPR8Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRBui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRBui FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRDroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRDroX FPR64Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRDui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRDui FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHHroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "strh	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHHui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "strh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRHroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRHroX FPR16Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRHui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRHui FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRQroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRQroX FPR128Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRQui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRQui FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRSroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRSroX FPR32Op:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRSui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRSui FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRWroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRWroX GPR32:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRWui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRWui GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STRXroX:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 0) {
      // (STRXroX GPR64:$Rt, GPR64sp:$Rn, GPR64:$Rm, 0, 0)
      AsmString = "str	$\x01, [$\x02, $\x03]";
      break;
    }
    return false;
  case AArch64::STRXui:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STRXui GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "str	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STR_PXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::PPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STR_PXI PPRAny:$Pt, GPR64sp:$Rn, 0)
      AsmString = "str	$\xFF\x01\x0D, [$\x02]";
      break;
    }
    return false;
  case AArch64::STR_ZXI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::ZPRRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        STI.getFeatureBits()[AArch64::FeatureSVE]) {
      // (STR_ZXI ZPRAny:$Zt, GPR64sp:$Rn, 0)
      AsmString = "str	$\xFF\x01\x0D, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRBi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRHi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttrh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRWi GPR32:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STTRXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STTRXi GPR64:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sttr	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBBi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturb	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURBi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR8RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURBi FPR8Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURDi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURDi FPR64Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHHi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "sturh	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURHi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR16RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURHi FPR16Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURQi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURQi FPR128Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURSi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::FPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURSi FPR32Op:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURWi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURWi GPR32z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::STURXi:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (STURXi GPR64z:$Rt, GPR64sp:$Rn, 0)
      AsmString = "stur	$\x01, [$\x02]";
      break;
    }
    return false;
  case AArch64::SUBSWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSWri WZR, GPR32sp:$src, addsub_shifted_imm32:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs WZR, GPR32:$src1, GPR32:$src2, arith_shift32:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx WZR, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::WZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSWrx WZR, GPR32sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBSWrx GPR32:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg())) {
      // (SUBSXri XZR, GPR64sp:$src, addsub_shifted_imm64:$imm)
      AsmString = "cmp	$\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case AArch64::SUBSXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs XZR, GPR64:$src1, GPR64:$src2, arith_shift64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "negs $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "negs $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBSXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx XZR, GPR64sp:$src1, GPR32:$src2, arith_extend:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    return false;
  case AArch64::SUBSXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 XZR, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "cmp	$\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).getReg() == AArch64::XZR &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBSXrx64 XZR, GPR64sp:$src1, GPR64:$src2, arith_extendlsl64:$sh)
      AsmString = "cmp	$\x02, $\x03$\xFF\x04\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBSXrx64 GPR64:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "subs	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::WZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBWrs GPR32:$dst, WZR, GPR32:$src, arith_shift32:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBWrs GPR32:$dst, GPR32:$src1, GPR32:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBWrx:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sponly:$dst, GPR32sp:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 16) {
      // (SUBWrx GPR32sp:$dst, GPR32sponly:$src1, GPR32:$src2, 16)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrs:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, 0)
      AsmString = "neg $\x01, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).getReg() == AArch64::XZR &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBXrs GPR64:$dst, XZR, GPR64:$src, arith_shift64:$shift)
      AsmString = "neg $\x01, $\x03$\xFF\x04\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (SUBXrs GPR64:$dst, GPR64:$src1, GPR64:$src2, 0)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SUBXrx64:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sponly:$dst, GPR64sp:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64spRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64sponlyRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 24) {
      // (SUBXrx64 GPR64sp:$dst, GPR64sponly:$src1, GPR64:$src2, 24)
      AsmString = "sub	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::SYSxt:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(4).getReg() == AArch64::XZR) {
      // (SYSxt imm0_7:$op1, sys_cr_op:$Cn, sys_cr_op:$Cm, imm0_7:$op2, XZR)
      AsmString = "sys $\x01, $\xFF\x02\x33, $\xFF\x03\x33, $\x04";
      break;
    }
    return false;
  case AArch64::UBFMWri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMWri GPR32:$dst, GPR32:$src, imm0_31:$shift, 31)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMWri GPR32:$dst, GPR32:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UBFMXri:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 63) {
      // (UBFMXri GPR64:$dst, GPR64:$src, imm0_63:$shift, 63)
      AsmString = "lsr $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 7)
      AsmString = "uxtb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 15)
      AsmString = "uxth $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 31) {
      // (UBFMXri GPR64:$dst, GPR64:$src, 0, 31)
      AsmString = "uxtw $\x01, $\x02";
      break;
    }
    return false;
  case AArch64::UMADDLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMADDLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umull	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  case AArch64::UMOVvi32:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi32 GPR32:$dst, V128:$src, VectorIndexS:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x0B.s$\xFF\x03\x18";
      break;
    }
    return false;
  case AArch64::UMOVvi64:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::FPR128RegClassID).contains(MI->getOperand(1).getReg()) &&
        STI.getFeatureBits()[AArch64::FeatureNEON]) {
      // (UMOVvi64 GPR64:$dst, V128:$src, VectorIndexD:$idx)
      AsmString = "mov	$\x01, $\xFF\x02\x0B.d$\xFF\x03\x18";
      break;
    }
    return false;
  case AArch64::UMSUBLrrr:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(AArch64::GPR64RegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(AArch64::GPR32RegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).getReg() == AArch64::XZR) {
      // (UMSUBLrrr GPR64:$dst, GPR32:$src1, GPR32:$src2, XZR)
      AsmString = "umnegl	$\x01, $\x02, $\x03";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AArch64InstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printAddSubImm(MI, OpIdx, STI, OS);
    break;
  case 1:
    printShifter(MI, OpIdx, STI, OS);
    break;
  case 2:
    printArithExtend(MI, OpIdx, STI, OS);
    break;
  case 3:
    printLogicalImm<int32_t>(MI, OpIdx, STI, OS);
    break;
  case 4:
    printLogicalImm<int64_t>(MI, OpIdx, STI, OS);
    break;
  case 5:
    printSVERegOp<'b'>(MI, OpIdx, STI, OS);
    break;
  case 6:
    printLogicalImm<int8_t>(MI, OpIdx, STI, OS);
    break;
  case 7:
    printSVERegOp<'h'>(MI, OpIdx, STI, OS);
    break;
  case 8:
    printLogicalImm<int16_t>(MI, OpIdx, STI, OS);
    break;
  case 9:
    printSVERegOp<'s'>(MI, OpIdx, STI, OS);
    break;
  case 10:
    printVRegOperand(MI, OpIdx, STI, OS);
    break;
  case 11:
    printImm(MI, OpIdx, STI, OS);
    break;
  case 12:
    printSVERegOp<>(MI, OpIdx, STI, OS);
    break;
  case 13:
    printImm8OptLsl<int8_t>(MI, OpIdx, STI, OS);
    break;
  case 14:
    printSVERegOp<'d'>(MI, OpIdx, STI, OS);
    break;
  case 15:
    printImm8OptLsl<int64_t>(MI, OpIdx, STI, OS);
    break;
  case 16:
    printImm8OptLsl<int16_t>(MI, OpIdx, STI, OS);
    break;
  case 17:
    printImm8OptLsl<int32_t>(MI, OpIdx, STI, OS);
    break;
  case 18:
    printInverseCondCode(MI, OpIdx, STI, OS);
    break;
  case 19:
    printSVELogicalImm<int16_t>(MI, OpIdx, STI, OS);
    break;
  case 20:
    printSVELogicalImm<int32_t>(MI, OpIdx, STI, OS);
    break;
  case 21:
    printSVELogicalImm<int64_t>(MI, OpIdx, STI, OS);
    break;
  case 22:
    printZPRasFPR<8>(MI, OpIdx, STI, OS);
    break;
  case 23:
    printVectorIndex(MI, OpIdx, STI, OS);
    break;
  case 24:
    printZPRasFPR<64>(MI, OpIdx, STI, OS);
    break;
  case 25:
    printZPRasFPR<16>(MI, OpIdx, STI, OS);
    break;
  case 26:
    printSVERegOp<'q'>(MI, OpIdx, STI, OS);
    break;
  case 27:
    printZPRasFPR<128>(MI, OpIdx, STI, OS);
    break;
  case 28:
    printZPRasFPR<32>(MI, OpIdx, STI, OS);
    break;
  case 29:
    printFPImmOperand(MI, OpIdx, STI, OS);
    break;
  case 30:
    printTypedVectorList<0,'d'>(MI, OpIdx, STI, OS);
    break;
  case 31:
    printTypedVectorList<0,'s'>(MI, OpIdx, STI, OS);
    break;
  case 32:
    printPSBHintOp(MI, OpIdx, STI, OS);
    break;
  case 33:
    printTypedVectorList<0,'h'>(MI, OpIdx, STI, OS);
    break;
  case 34:
    printTypedVectorList<0,'b'>(MI, OpIdx, STI, OS);
    break;
  case 35:
    printTypedVectorList<16, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 36:
    printTypedVectorList<1, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 37:
    printTypedVectorList<2, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 38:
    printTypedVectorList<2, 's'>(MI, OpIdx, STI, OS);
    break;
  case 39:
    printTypedVectorList<4, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 40:
    printTypedVectorList<4, 's'>(MI, OpIdx, STI, OS);
    break;
  case 41:
    printTypedVectorList<8, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 42:
    printTypedVectorList<8, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 43:
    printTypedVectorList<0, 'h'>(MI, OpIdx, STI, OS);
    break;
  case 44:
    printTypedVectorList<0, 's'>(MI, OpIdx, STI, OS);
    break;
  case 45:
    printTypedVectorList<0, 'd'>(MI, OpIdx, STI, OS);
    break;
  case 46:
    printTypedVectorList<0, 'b'>(MI, OpIdx, STI, OS);
    break;
  case 47:
    printImmHex(MI, OpIdx, STI, OS);
    break;
  case 48:
    printPrefetchOp<true>(MI, OpIdx, STI, OS);
    break;
  case 49:
    printPrefetchOp(MI, OpIdx, STI, OS);
    break;
  case 50:
    printSysCROperand(MI, OpIdx, STI, OS);
    break;
  }
}

static bool AArch64InstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int8_t>(Val);
  
    }
  case 2: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int16_t>(Val);
  
    }
  case 3: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int32_t>(Val);
  
    }
  case 4: {

    return MCOp.isImm() &&
           MCOp.getImm() != AArch64CC::AL &&
           MCOp.getImm() != AArch64CC::NV;
  
    }
  case 5: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int16_t>(Val) &&
           AArch64_AM::isSVEMoveMaskPreferredLogicalImmediate(Val);
  
    }
  case 6: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int32_t>(Val) &&
           AArch64_AM::isSVEMoveMaskPreferredLogicalImmediate(Val);
  
    }
  case 7: {

    if (!MCOp.isImm())
      return false;
    int64_t Val = AArch64_AM::decodeLogicalImmediate(MCOp.getImm(), 64);
    return AArch64_AM::isSVEMaskOfIdenticalElements<int64_t>(Val) &&
           AArch64_AM::isSVEMoveMaskPreferredLogicalImmediate(Val);
  
    }
  case 8: {

    // Check, if operand is valid, to fix exhaustive aliasing in disassembly.
    // "psb" is an alias to "hint" only for certain values of CRm:Op2 fields.
    if (!MCOp.isImm())
      return false;
    return AArch64PSBHint::lookupPSBByEncoding(MCOp.getImm()) != nullptr;
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
